/* automatically generated by rust-bindgen 0.65.1 */

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]

use ohos_arkui_sys::*;
use ohos_accessibility_sys::*;

pub const OH_NATIVE_XCOMPONENT_OBJ: &[u8; 26usize] = b"__NATIVE_XCOMPONENT_OBJ__\0";
pub const OH_NATIVE_XCOMPONENT_MAX_TOUCH_POINTS_NUMBER: u32 = 10;
extern "C" {
    pub fn OH_ArkUI_AccessibilityProviderRegisterCallback(
        provider: *mut ArkUI_AccessibilityProvider,
        callbacks: *mut ArkUI_AccessibilityProviderCallbacks,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_SendAccessibilityAsyncEvent(
        provider: *mut ArkUI_AccessibilityProvider,
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        callback: ::std::option::Option<unsafe extern "C" fn(errorCode: i32)>,
    );
}
extern "C" {
    pub fn OH_ArkUI_AddAndGetAccessibilityElementInfo(
        list: *mut ArkUI_AccessibilityElementInfoList,
    ) -> *mut ArkUI_AccessibilityElementInfo;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetElementId(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        elementId: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetParentId(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        parentId: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetComponentType(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        componentType: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetContents(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        contents: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetHintText(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        hintText: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityText(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityText: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityDescription(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityDescription: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetChildNodeIds(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        childCount: i32,
        childNodeIds: *mut i64,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetOperationActions(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        operationCount: i32,
        operationActions: *mut ArkUI_AccessibleAction,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetScreenRect(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        screenRect: *mut ArkUI_AccessibleRect,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetCheckable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        checkable: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetChecked(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        checked: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetFocusable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        focusable: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetFocused(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isFocused: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetVisible(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isVisible: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityFocused(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityFocused: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetSelected(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        selected: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetClickable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        clickable: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetLongClickable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        longClickable: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetEnabled(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isEnabled: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetIsPassword(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isPassword: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetScrollable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        scrollable: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetEditable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        editable: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetIsHint(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isHint: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetRangeInfo(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        rangeInfo: *mut ArkUI_AccessibleRangeInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetGridInfo(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        gridInfo: *mut ArkUI_AccessibleGridInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetGridItemInfo(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        gridItem: *mut ArkUI_AccessibleGridItemInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetSelectedTextStart(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        selectedTextStart: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetSelectedTextEnd(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        selectedTextEnd: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetCurrentItemIndex(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        currentItemIndex: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetStartItemIndex(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        startItemIndex: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetEndItemIndex(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        endItemIndex: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetItemCount(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        itemCount: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityOffset(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        offset: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityGroup(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityGroup: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityLevel(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityLevel: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetZIndex(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        zIndex: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityOpacity(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        opacity: f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetBackgroundColor(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        backgroundColor: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetBackgroundImage(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        backgroundImage: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetBlur(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        blur: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetHitTestBehavior(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        hitTestBehavior: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_CreateAccessibilityElementInfo() -> *mut ArkUI_AccessibilityElementInfo;
}
extern "C" {
    pub fn OH_ArkUI_DestoryAccessibilityElementInfo(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
    );
}
extern "C" {
    pub fn OH_ArkUI_CreateAccessibilityEventInfo() -> *mut ArkUI_AccessibilityEventInfo;
}
extern "C" {
    pub fn OH_ArkUI_DestoryAccessibilityEventInfo(eventInfo: *mut ArkUI_AccessibilityEventInfo);
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityEventSetEventType(
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        eventType: ArkUI_AccessibilityEventType,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityEventSetTextAnnouncedForAccessibility(
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        textAnnouncedForAccessibility: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityEventSetRequestFocusId(
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        requestFocusId: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityEventSetElementInfo(
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_FindAccessibilityActionArgumentByKey(
        arguments: *mut ArkUI_AccessibilityActionArguments,
        key: *const ::std::os::raw::c_char,
        value: *mut *mut ::std::os::raw::c_char,
    ) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_PixelmapNative {
    _unused: [u8; 0],
}
pub type OH_PixelmapNativeHandle = *mut OH_PixelmapNative;
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_CreateFromPixelMap(
        pixelMap: OH_PixelmapNativeHandle,
    ) -> *mut ArkUI_DrawableDescriptor;
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_CreateFromAnimatedPixelMap(
        array: *mut OH_PixelmapNativeHandle,
        size: i32,
    ) -> *mut ArkUI_DrawableDescriptor;
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_Dispose(drawableDescriptor: *mut ArkUI_DrawableDescriptor);
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_GetStaticPixelMap(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> OH_PixelmapNativeHandle;
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_GetAnimatedPixelMapArray(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> *mut OH_PixelmapNativeHandle;
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_GetAnimatedPixelMapArraySize(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_SetAnimationDuration(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
        duration: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_GetAnimationDuration(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_SetAnimationIteration(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
        iteration: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_GetAnimationIteration(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_Create() -> *mut ArkUI_LayoutConstraint;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_Copy(
        Constraint: *const ArkUI_LayoutConstraint,
    ) -> *mut ArkUI_LayoutConstraint;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_Dispose(
        Constraint: *mut ArkUI_LayoutConstraint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_GetMaxWidth(Constraint: *const ArkUI_LayoutConstraint) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_GetMinWidth(Constraint: *const ArkUI_LayoutConstraint) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_GetMaxHeight(Constraint: *const ArkUI_LayoutConstraint)
        -> i32;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_GetMinHeight(Constraint: *const ArkUI_LayoutConstraint)
        -> i32;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_GetPercentReferenceWidth(
        Constraint: *const ArkUI_LayoutConstraint,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_GetPercentReferenceHeight(
        Constraint: *const ArkUI_LayoutConstraint,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_SetMaxWidth(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_SetMinWidth(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_SetMaxHeight(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_SetMinHeight(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_SetPercentReferenceWidth(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_SetPercentReferenceHeight(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_DrawContext_GetCanvas(
        context: *mut ArkUI_DrawContext,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OH_ArkUI_DrawContext_GetSize(context: *mut ArkUI_DrawContext) -> ArkUI_IntSize;
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_Create() -> *mut ArkUI_WaterFlowSectionOption;
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_Dispose(option: *mut ArkUI_WaterFlowSectionOption);
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_SetSize(
        option: *mut ArkUI_WaterFlowSectionOption,
        size: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_GetSize(
        option: *mut ArkUI_WaterFlowSectionOption,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_SetItemCount(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        itemCount: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_GetItemCount(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_RegisterGetItemMainSizeCallbackByIndex(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        callback: ::std::option::Option<unsafe extern "C" fn(itemIndex: i32) -> f32>,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_RegisterGetItemMainSizeCallbackByIndexWithUserData(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(itemIndex: i32, userData: *mut ::std::os::raw::c_void) -> f32,
        >,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_SetCrossCount(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        crossCount: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_GetCrossCount(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_SetColumnGap(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        columnGap: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_GetColumnGap(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_SetRowGap(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        rowGap: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_GetRowGap(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_SetMargin(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        marginTop: f32,
        marginRight: f32,
        marginBottom: f32,
        marginLeft: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_GetMargin(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> ArkUI_Margin;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_Create(
        type_: ArkUI_SwiperIndicatorType,
    ) -> *mut ArkUI_SwiperIndicator;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_Dispose(indicator: *mut ArkUI_SwiperIndicator);
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetStartPosition(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetStartPosition(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetTopPosition(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetTopPosition(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetEndPosition(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetEndPosition(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetBottomPosition(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetBottomPosition(indicator: *mut ArkUI_SwiperIndicator)
        -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetItemWidth(indicator: *mut ArkUI_SwiperIndicator, value: f32);
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetItemWidth(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetItemHeight(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetItemHeight(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetSelectedItemWidth(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetSelectedItemWidth(
        indicator: *mut ArkUI_SwiperIndicator,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetSelectedItemHeight(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetSelectedItemHeight(
        indicator: *mut ArkUI_SwiperIndicator,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetMask(indicator: *mut ArkUI_SwiperIndicator, mask: i32);
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetMask(indicator: *mut ArkUI_SwiperIndicator) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetColor(indicator: *mut ArkUI_SwiperIndicator, color: u32);
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetColor(indicator: *mut ArkUI_SwiperIndicator) -> u32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetSelectedColor(
        indicator: *mut ArkUI_SwiperIndicator,
        selectedColor: u32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetSelectedColor(indicator: *mut ArkUI_SwiperIndicator) -> u32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetMaxDisplayCount(
        indicator: *mut ArkUI_SwiperIndicator,
        maxDisplayCount: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetMaxDisplayCount(
        indicator: *mut ArkUI_SwiperIndicator,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_Create(size: i32) -> *mut ArkUI_GuidelineOption;
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_Dispose(guideline: *mut ArkUI_GuidelineOption);
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_SetId(
        guideline: *mut ArkUI_GuidelineOption,
        value: *const ::std::os::raw::c_char,
        index: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_SetDirection(
        guideline: *mut ArkUI_GuidelineOption,
        value: ArkUI_Axis,
        index: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_SetPositionStart(
        guideline: *mut ArkUI_GuidelineOption,
        value: f32,
        index: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_SetPositionEnd(
        guideline: *mut ArkUI_GuidelineOption,
        value: f32,
        index: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_GetId(
        guideline: *mut ArkUI_GuidelineOption,
        index: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_GetDirection(
        guideline: *mut ArkUI_GuidelineOption,
        index: i32,
    ) -> ArkUI_Axis;
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_GetPositionStart(
        guideline: *mut ArkUI_GuidelineOption,
        index: i32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_GetPositionEnd(
        guideline: *mut ArkUI_GuidelineOption,
        index: i32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_Create(size: i32) -> *mut ArkUI_BarrierOption;
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_Dispose(barrierStyle: *mut ArkUI_BarrierOption);
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_SetId(
        barrierStyle: *mut ArkUI_BarrierOption,
        value: *const ::std::os::raw::c_char,
        index: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_SetDirection(
        barrierStyle: *mut ArkUI_BarrierOption,
        value: ArkUI_BarrierDirection,
        index: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_SetReferencedId(
        barrierStyle: *mut ArkUI_BarrierOption,
        value: *const ::std::os::raw::c_char,
        index: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_GetId(
        barrierStyle: *mut ArkUI_BarrierOption,
        index: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_GetDirection(
        barrierStyle: *mut ArkUI_BarrierOption,
        index: i32,
    ) -> ArkUI_BarrierDirection;
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_GetReferencedId(
        barrierStyle: *mut ArkUI_BarrierOption,
        index: i32,
        referencedIndex: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_GetReferencedIdSize(
        barrierStyle: *mut ArkUI_BarrierOption,
        index: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_Create() -> *mut ArkUI_AlignmentRuleOption;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_Dispose(option: *mut ArkUI_AlignmentRuleOption);
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetStart(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_HorizontalAlignment,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetEnd(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_HorizontalAlignment,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetCenterHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_HorizontalAlignment,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetTop(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_VerticalAlignment,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetBottom(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_VerticalAlignment,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetCenterVertical(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_VerticalAlignment,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetBiasHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
        horizontal: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetBiasVertical(
        option: *mut ArkUI_AlignmentRuleOption,
        vertical: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetStartId(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetStartAlignment(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_HorizontalAlignment;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetEndId(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetEndAlignment(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_HorizontalAlignment;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetCenterIdHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetCenterAlignmentHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_HorizontalAlignment;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetTopId(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetTopAlignment(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_VerticalAlignment;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetBottomId(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetBottomAlignment(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_VerticalAlignment;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetCenterIdVertical(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetCenterAlignmentVertical(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_VerticalAlignment;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetBiasHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetBiasVertical(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_Create() -> *mut ArkUI_ListItemSwipeActionItem;
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_Dispose(item: *mut ArkUI_ListItemSwipeActionItem);
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetContent(
        item: *mut ArkUI_ListItemSwipeActionItem,
        node: ArkUI_NodeHandle,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetActionAreaDistance(
        item: *mut ArkUI_ListItemSwipeActionItem,
        distance: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_GetActionAreaDistance(
        item: *mut ArkUI_ListItemSwipeActionItem,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnEnterActionArea(
        item: *mut ArkUI_ListItemSwipeActionItem,
        callback: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnEnterActionAreaWithUserData(
        item: *mut ArkUI_ListItemSwipeActionItem,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnAction(
        item: *mut ArkUI_ListItemSwipeActionItem,
        callback: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnActionWithUserData(
        item: *mut ArkUI_ListItemSwipeActionItem,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnExitActionArea(
        item: *mut ArkUI_ListItemSwipeActionItem,
        callback: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnExitActionAreaWithUserData(
        item: *mut ArkUI_ListItemSwipeActionItem,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnStateChange(
        item: *mut ArkUI_ListItemSwipeActionItem,
        callback: ::std::option::Option<
            unsafe extern "C" fn(swipeActionState: ArkUI_ListItemSwipeActionState),
        >,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnStateChangeWithUserData(
        item: *mut ArkUI_ListItemSwipeActionItem,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                swipeActionState: ArkUI_ListItemSwipeActionState,
                userData: *mut ::std::os::raw::c_void,
            ),
        >,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_Create() -> *mut ArkUI_ListItemSwipeActionOption;
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_Dispose(option: *mut ArkUI_ListItemSwipeActionOption);
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetStart(
        option: *mut ArkUI_ListItemSwipeActionOption,
        item: *mut ArkUI_ListItemSwipeActionItem,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetEnd(
        option: *mut ArkUI_ListItemSwipeActionOption,
        item: *mut ArkUI_ListItemSwipeActionItem,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetEdgeEffect(
        option: *mut ArkUI_ListItemSwipeActionOption,
        edgeEffect: ArkUI_ListItemSwipeEdgeEffect,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_GetEdgeEffect(
        option: *mut ArkUI_ListItemSwipeActionOption,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetOnOffsetChange(
        option: *mut ArkUI_ListItemSwipeActionOption,
        callback: ::std::option::Option<unsafe extern "C" fn(offset: f32)>,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetOnOffsetChangeWithUserData(
        option: *mut ArkUI_ListItemSwipeActionOption,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(offset: f32, userData: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_Create() -> *mut ArkUI_ListChildrenMainSize;
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_Dispose(option: *mut ArkUI_ListChildrenMainSize);
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_SetDefaultMainSize(
        option: *mut ArkUI_ListChildrenMainSize,
        defaultMainSize: f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_GetDefaultMainSize(
        option: *mut ArkUI_ListChildrenMainSize,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_Resize(
        option: *mut ArkUI_ListChildrenMainSize,
        totalSize: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_Splice(
        option: *mut ArkUI_ListChildrenMainSize,
        index: i32,
        deleteCount: i32,
        addCount: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_UpdateSize(
        option: *mut ArkUI_ListChildrenMainSize,
        index: i32,
        mainSize: f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_GetMainSize(
        option: *mut ArkUI_ListChildrenMainSize,
        index: i32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanMeasureInfo_Create() -> *mut ArkUI_CustomSpanMeasureInfo;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanMeasureInfo_Dispose(info: *mut ArkUI_CustomSpanMeasureInfo);
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanMeasureInfo_GetFontSize(
        info: *mut ArkUI_CustomSpanMeasureInfo,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanMetrics_Create() -> *mut ArkUI_CustomSpanMetrics;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanMetrics_Dispose(metrics: *mut ArkUI_CustomSpanMetrics);
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanMetrics_SetWidth(
        metrics: *mut ArkUI_CustomSpanMetrics,
        width: f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanMetrics_SetHeight(
        metrics: *mut ArkUI_CustomSpanMetrics,
        height: f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanDrawInfo_Create() -> *mut ArkUI_CustomSpanDrawInfo;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanDrawInfo_Dispose(info: *mut ArkUI_CustomSpanDrawInfo);
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanDrawInfo_GetXOffset(info: *mut ArkUI_CustomSpanDrawInfo) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanDrawInfo_GetLineTop(info: *mut ArkUI_CustomSpanDrawInfo) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanDrawInfo_GetLineBottom(info: *mut ArkUI_CustomSpanDrawInfo) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanDrawInfo_GetBaseline(info: *mut ArkUI_CustomSpanDrawInfo) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_CreateFromString(
        src: *mut ::std::os::raw::c_char,
    ) -> *mut ArkUI_ImageAnimatorFrameInfo;
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_CreateFromDrawableDescriptor(
        drawable: *mut ArkUI_DrawableDescriptor,
    ) -> *mut ArkUI_ImageAnimatorFrameInfo;
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_Dispose(imageInfo: *mut ArkUI_ImageAnimatorFrameInfo);
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetWidth(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        width: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetWidth(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetHeight(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        height: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetHeight(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetTop(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        top: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetTop(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetLeft(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        left: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetLeft(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetDuration(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        duration: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetDuration(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_Create() -> *mut ArkUI_AccessibilityState;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_Dispose(state: *mut ArkUI_AccessibilityState);
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_SetDisabled(
        state: *mut ArkUI_AccessibilityState,
        isDisabled: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_IsDisabled(state: *mut ArkUI_AccessibilityState) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_SetSelected(
        state: *mut ArkUI_AccessibilityState,
        isSelected: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_IsSelected(state: *mut ArkUI_AccessibilityState) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_SetCheckedState(
        state: *mut ArkUI_AccessibilityState,
        checkedState: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_GetCheckedState(state: *mut ArkUI_AccessibilityState)
        -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_Create() -> *mut ArkUI_AccessibilityValue;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_Dispose(value: *mut ArkUI_AccessibilityValue);
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_SetMin(value: *mut ArkUI_AccessibilityValue, min: i32);
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_GetMin(value: *mut ArkUI_AccessibilityValue) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_SetMax(value: *mut ArkUI_AccessibilityValue, max: i32);
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_GetMax(value: *mut ArkUI_AccessibilityValue) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_SetCurrent(
        value: *mut ArkUI_AccessibilityValue,
        current: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_GetCurrent(value: *mut ArkUI_AccessibilityValue) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_SetText(
        value: *mut ArkUI_AccessibilityValue,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_GetText(
        value: *mut ArkUI_AccessibilityValue,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_CustomProperty_Destroy(handle: *mut ArkUI_CustomProperty);
}
extern "C" {
    pub fn OH_ArkUI_CustomProperty_GetStringValue(
        handle: *mut ArkUI_CustomProperty,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_ActiveChildrenInfo_Destroy(handle: *mut ArkUI_ActiveChildrenInfo);
}
extern "C" {
    pub fn OH_ArkUI_ActiveChildrenInfo_GetNodeByIndex(
        handle: *mut ArkUI_ActiveChildrenInfo,
        index: i32,
    ) -> ArkUI_NodeHandle;
}
extern "C" {
    pub fn OH_ArkUI_ActiveChildrenInfo_GetCount(handle: *mut ArkUI_ActiveChildrenInfo) -> i32;
}
pub const HitTestMode_HTM_DEFAULT: HitTestMode = 0;
pub const HitTestMode_HTM_BLOCK: HitTestMode = 1;
pub const HitTestMode_HTM_TRANSPARENT: HitTestMode = 2;
pub const HitTestMode_HTM_NONE: HitTestMode = 3;
pub type HitTestMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn OH_ArkUI_UIInputEvent_GetType(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_UIInputEvent_GetAction(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_UIInputEvent_GetSourceType(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_UIInputEvent_GetToolType(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_UIInputEvent_GetEventTime(event: *const ArkUI_UIInputEvent) -> i64;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetPointerCount(event: *const ArkUI_UIInputEvent) -> u32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetPointerId(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetX(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetXByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetY(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetYByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetWindowX(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetWindowXByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetWindowY(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetWindowYByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetDisplayX(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetDisplayXByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetDisplayY(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetDisplayYByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetPressure(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetTiltX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetTiltY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetTouchAreaWidth(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetTouchAreaHeight(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistorySize(event: *const ArkUI_UIInputEvent) -> u32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryEventTime(
        event: *const ArkUI_UIInputEvent,
        historyIndex: u32,
    ) -> i64;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryPointerCount(
        event: *const ArkUI_UIInputEvent,
        historyIndex: u32,
    ) -> u32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryPointerId(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryWindowX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryWindowY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryDisplayX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryDisplayY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryPressure(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryTiltX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryTiltY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryTouchAreaWidth(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryTouchAreaHeight(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_AxisEvent_GetVerticalAxisValue(event: *const ArkUI_UIInputEvent) -> f64;
}
extern "C" {
    pub fn OH_ArkUI_AxisEvent_GetHorizontalAxisValue(event: *const ArkUI_UIInputEvent) -> f64;
}
extern "C" {
    pub fn OH_ArkUI_AxisEvent_GetPinchAxisScaleValue(event: *const ArkUI_UIInputEvent) -> f64;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_SetInterceptHitTestMode(
        event: *const ArkUI_UIInputEvent,
        mode: HitTestMode,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_MouseEvent_GetMouseButton(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_MouseEvent_GetMouseAction(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_SetStopPropagation(
        event: *const ArkUI_UIInputEvent,
        stopPropagation: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_UIInputEvent_GetDeviceId(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_UIInputEvent_GetPressedKeys(
        event: *const ArkUI_UIInputEvent,
        pressedKeyCodes: *mut i32,
        length: *mut i32,
    ) -> i32;
}
pub const OH_NativeXComponent_KeyCode_KEY_UNKNOWN: OH_NativeXComponent_KeyCode = -1;
pub const OH_NativeXComponent_KeyCode_KEY_FN: OH_NativeXComponent_KeyCode = 0;
pub const OH_NativeXComponent_KeyCode_KEY_HOME: OH_NativeXComponent_KeyCode = 1;
pub const OH_NativeXComponent_KeyCode_KEY_BACK: OH_NativeXComponent_KeyCode = 2;
pub const OH_NativeXComponent_KeyCode_KEY_MEDIA_PLAY_PAUSE: OH_NativeXComponent_KeyCode = 10;
pub const OH_NativeXComponent_KeyCode_KEY_MEDIA_STOP: OH_NativeXComponent_KeyCode = 11;
pub const OH_NativeXComponent_KeyCode_KEY_MEDIA_NEXT: OH_NativeXComponent_KeyCode = 12;
pub const OH_NativeXComponent_KeyCode_KEY_MEDIA_PREVIOUS: OH_NativeXComponent_KeyCode = 13;
pub const OH_NativeXComponent_KeyCode_KEY_MEDIA_REWIND: OH_NativeXComponent_KeyCode = 14;
pub const OH_NativeXComponent_KeyCode_KEY_MEDIA_FAST_FORWARD: OH_NativeXComponent_KeyCode = 15;
pub const OH_NativeXComponent_KeyCode_KEY_VOLUME_UP: OH_NativeXComponent_KeyCode = 16;
pub const OH_NativeXComponent_KeyCode_KEY_VOLUME_DOWN: OH_NativeXComponent_KeyCode = 17;
pub const OH_NativeXComponent_KeyCode_KEY_POWER: OH_NativeXComponent_KeyCode = 18;
pub const OH_NativeXComponent_KeyCode_KEY_CAMERA: OH_NativeXComponent_KeyCode = 19;
pub const OH_NativeXComponent_KeyCode_KEY_VOLUME_MUTE: OH_NativeXComponent_KeyCode = 22;
pub const OH_NativeXComponent_KeyCode_KEY_MUTE: OH_NativeXComponent_KeyCode = 23;
pub const OH_NativeXComponent_KeyCode_KEY_BRIGHTNESS_UP: OH_NativeXComponent_KeyCode = 40;
pub const OH_NativeXComponent_KeyCode_KEY_BRIGHTNESS_DOWN: OH_NativeXComponent_KeyCode = 41;
pub const OH_NativeXComponent_KeyCode_KEY_0: OH_NativeXComponent_KeyCode = 2000;
pub const OH_NativeXComponent_KeyCode_KEY_1: OH_NativeXComponent_KeyCode = 2001;
pub const OH_NativeXComponent_KeyCode_KEY_2: OH_NativeXComponent_KeyCode = 2002;
pub const OH_NativeXComponent_KeyCode_KEY_3: OH_NativeXComponent_KeyCode = 2003;
pub const OH_NativeXComponent_KeyCode_KEY_4: OH_NativeXComponent_KeyCode = 2004;
pub const OH_NativeXComponent_KeyCode_KEY_5: OH_NativeXComponent_KeyCode = 2005;
pub const OH_NativeXComponent_KeyCode_KEY_6: OH_NativeXComponent_KeyCode = 2006;
pub const OH_NativeXComponent_KeyCode_KEY_7: OH_NativeXComponent_KeyCode = 2007;
pub const OH_NativeXComponent_KeyCode_KEY_8: OH_NativeXComponent_KeyCode = 2008;
pub const OH_NativeXComponent_KeyCode_KEY_9: OH_NativeXComponent_KeyCode = 2009;
pub const OH_NativeXComponent_KeyCode_KEY_STAR: OH_NativeXComponent_KeyCode = 2010;
pub const OH_NativeXComponent_KeyCode_KEY_POUND: OH_NativeXComponent_KeyCode = 2011;
pub const OH_NativeXComponent_KeyCode_KEY_DPAD_UP: OH_NativeXComponent_KeyCode = 2012;
pub const OH_NativeXComponent_KeyCode_KEY_DPAD_DOWN: OH_NativeXComponent_KeyCode = 2013;
pub const OH_NativeXComponent_KeyCode_KEY_DPAD_LEFT: OH_NativeXComponent_KeyCode = 2014;
pub const OH_NativeXComponent_KeyCode_KEY_DPAD_RIGHT: OH_NativeXComponent_KeyCode = 2015;
pub const OH_NativeXComponent_KeyCode_KEY_DPAD_CENTER: OH_NativeXComponent_KeyCode = 2016;
pub const OH_NativeXComponent_KeyCode_KEY_A: OH_NativeXComponent_KeyCode = 2017;
pub const OH_NativeXComponent_KeyCode_KEY_B: OH_NativeXComponent_KeyCode = 2018;
pub const OH_NativeXComponent_KeyCode_KEY_C: OH_NativeXComponent_KeyCode = 2019;
pub const OH_NativeXComponent_KeyCode_KEY_D: OH_NativeXComponent_KeyCode = 2020;
pub const OH_NativeXComponent_KeyCode_KEY_E: OH_NativeXComponent_KeyCode = 2021;
pub const OH_NativeXComponent_KeyCode_KEY_F: OH_NativeXComponent_KeyCode = 2022;
pub const OH_NativeXComponent_KeyCode_KEY_G: OH_NativeXComponent_KeyCode = 2023;
pub const OH_NativeXComponent_KeyCode_KEY_H: OH_NativeXComponent_KeyCode = 2024;
pub const OH_NativeXComponent_KeyCode_KEY_I: OH_NativeXComponent_KeyCode = 2025;
pub const OH_NativeXComponent_KeyCode_KEY_J: OH_NativeXComponent_KeyCode = 2026;
pub const OH_NativeXComponent_KeyCode_KEY_K: OH_NativeXComponent_KeyCode = 2027;
pub const OH_NativeXComponent_KeyCode_KEY_L: OH_NativeXComponent_KeyCode = 2028;
pub const OH_NativeXComponent_KeyCode_KEY_M: OH_NativeXComponent_KeyCode = 2029;
pub const OH_NativeXComponent_KeyCode_KEY_N: OH_NativeXComponent_KeyCode = 2030;
pub const OH_NativeXComponent_KeyCode_KEY_O: OH_NativeXComponent_KeyCode = 2031;
pub const OH_NativeXComponent_KeyCode_KEY_P: OH_NativeXComponent_KeyCode = 2032;
pub const OH_NativeXComponent_KeyCode_KEY_Q: OH_NativeXComponent_KeyCode = 2033;
pub const OH_NativeXComponent_KeyCode_KEY_R: OH_NativeXComponent_KeyCode = 2034;
pub const OH_NativeXComponent_KeyCode_KEY_S: OH_NativeXComponent_KeyCode = 2035;
pub const OH_NativeXComponent_KeyCode_KEY_T: OH_NativeXComponent_KeyCode = 2036;
pub const OH_NativeXComponent_KeyCode_KEY_U: OH_NativeXComponent_KeyCode = 2037;
pub const OH_NativeXComponent_KeyCode_KEY_V: OH_NativeXComponent_KeyCode = 2038;
pub const OH_NativeXComponent_KeyCode_KEY_W: OH_NativeXComponent_KeyCode = 2039;
pub const OH_NativeXComponent_KeyCode_KEY_X: OH_NativeXComponent_KeyCode = 2040;
pub const OH_NativeXComponent_KeyCode_KEY_Y: OH_NativeXComponent_KeyCode = 2041;
pub const OH_NativeXComponent_KeyCode_KEY_Z: OH_NativeXComponent_KeyCode = 2042;
pub const OH_NativeXComponent_KeyCode_KEY_COMMA: OH_NativeXComponent_KeyCode = 2043;
pub const OH_NativeXComponent_KeyCode_KEY_PERIOD: OH_NativeXComponent_KeyCode = 2044;
pub const OH_NativeXComponent_KeyCode_KEY_ALT_LEFT: OH_NativeXComponent_KeyCode = 2045;
pub const OH_NativeXComponent_KeyCode_KEY_ALT_RIGHT: OH_NativeXComponent_KeyCode = 2046;
pub const OH_NativeXComponent_KeyCode_KEY_SHIFT_LEFT: OH_NativeXComponent_KeyCode = 2047;
pub const OH_NativeXComponent_KeyCode_KEY_SHIFT_RIGHT: OH_NativeXComponent_KeyCode = 2048;
pub const OH_NativeXComponent_KeyCode_KEY_TAB: OH_NativeXComponent_KeyCode = 2049;
pub const OH_NativeXComponent_KeyCode_KEY_SPACE: OH_NativeXComponent_KeyCode = 2050;
pub const OH_NativeXComponent_KeyCode_KEY_SYM: OH_NativeXComponent_KeyCode = 2051;
pub const OH_NativeXComponent_KeyCode_KEY_EXPLORER: OH_NativeXComponent_KeyCode = 2052;
pub const OH_NativeXComponent_KeyCode_KEY_ENVELOPE: OH_NativeXComponent_KeyCode = 2053;
pub const OH_NativeXComponent_KeyCode_KEY_ENTER: OH_NativeXComponent_KeyCode = 2054;
pub const OH_NativeXComponent_KeyCode_KEY_DEL: OH_NativeXComponent_KeyCode = 2055;
pub const OH_NativeXComponent_KeyCode_KEY_GRAVE: OH_NativeXComponent_KeyCode = 2056;
pub const OH_NativeXComponent_KeyCode_KEY_MINUS: OH_NativeXComponent_KeyCode = 2057;
pub const OH_NativeXComponent_KeyCode_KEY_EQUALS: OH_NativeXComponent_KeyCode = 2058;
pub const OH_NativeXComponent_KeyCode_KEY_LEFT_BRACKET: OH_NativeXComponent_KeyCode = 2059;
pub const OH_NativeXComponent_KeyCode_KEY_RIGHT_BRACKET: OH_NativeXComponent_KeyCode = 2060;
pub const OH_NativeXComponent_KeyCode_KEY_BACKSLASH: OH_NativeXComponent_KeyCode = 2061;
pub const OH_NativeXComponent_KeyCode_KEY_SEMICOLON: OH_NativeXComponent_KeyCode = 2062;
pub const OH_NativeXComponent_KeyCode_KEY_APOSTROPHE: OH_NativeXComponent_KeyCode = 2063;
pub const OH_NativeXComponent_KeyCode_KEY_SLASH: OH_NativeXComponent_KeyCode = 2064;
pub const OH_NativeXComponent_KeyCode_KEY_AT: OH_NativeXComponent_KeyCode = 2065;
pub const OH_NativeXComponent_KeyCode_KEY_PLUS: OH_NativeXComponent_KeyCode = 2066;
pub const OH_NativeXComponent_KeyCode_KEY_MENU: OH_NativeXComponent_KeyCode = 2067;
pub const OH_NativeXComponent_KeyCode_KEY_PAGE_UP: OH_NativeXComponent_KeyCode = 2068;
pub const OH_NativeXComponent_KeyCode_KEY_PAGE_DOWN: OH_NativeXComponent_KeyCode = 2069;
pub const OH_NativeXComponent_KeyCode_KEY_ESCAPE: OH_NativeXComponent_KeyCode = 2070;
pub const OH_NativeXComponent_KeyCode_KEY_FORWARD_DEL: OH_NativeXComponent_KeyCode = 2071;
pub const OH_NativeXComponent_KeyCode_KEY_CTRL_LEFT: OH_NativeXComponent_KeyCode = 2072;
pub const OH_NativeXComponent_KeyCode_KEY_CTRL_RIGHT: OH_NativeXComponent_KeyCode = 2073;
pub const OH_NativeXComponent_KeyCode_KEY_CAPS_LOCK: OH_NativeXComponent_KeyCode = 2074;
pub const OH_NativeXComponent_KeyCode_KEY_SCROLL_LOCK: OH_NativeXComponent_KeyCode = 2075;
pub const OH_NativeXComponent_KeyCode_KEY_META_LEFT: OH_NativeXComponent_KeyCode = 2076;
pub const OH_NativeXComponent_KeyCode_KEY_META_RIGHT: OH_NativeXComponent_KeyCode = 2077;
pub const OH_NativeXComponent_KeyCode_KEY_FUNCTION: OH_NativeXComponent_KeyCode = 2078;
pub const OH_NativeXComponent_KeyCode_KEY_SYSRQ: OH_NativeXComponent_KeyCode = 2079;
pub const OH_NativeXComponent_KeyCode_KEY_BREAK: OH_NativeXComponent_KeyCode = 2080;
pub const OH_NativeXComponent_KeyCode_KEY_MOVE_HOME: OH_NativeXComponent_KeyCode = 2081;
pub const OH_NativeXComponent_KeyCode_KEY_MOVE_END: OH_NativeXComponent_KeyCode = 2082;
pub const OH_NativeXComponent_KeyCode_KEY_INSERT: OH_NativeXComponent_KeyCode = 2083;
pub const OH_NativeXComponent_KeyCode_KEY_FORWARD: OH_NativeXComponent_KeyCode = 2084;
pub const OH_NativeXComponent_KeyCode_KEY_MEDIA_PLAY: OH_NativeXComponent_KeyCode = 2085;
pub const OH_NativeXComponent_KeyCode_KEY_MEDIA_PAUSE: OH_NativeXComponent_KeyCode = 2086;
pub const OH_NativeXComponent_KeyCode_KEY_MEDIA_CLOSE: OH_NativeXComponent_KeyCode = 2087;
pub const OH_NativeXComponent_KeyCode_KEY_MEDIA_EJECT: OH_NativeXComponent_KeyCode = 2088;
pub const OH_NativeXComponent_KeyCode_KEY_MEDIA_RECORD: OH_NativeXComponent_KeyCode = 2089;
pub const OH_NativeXComponent_KeyCode_KEY_F1: OH_NativeXComponent_KeyCode = 2090;
pub const OH_NativeXComponent_KeyCode_KEY_F2: OH_NativeXComponent_KeyCode = 2091;
pub const OH_NativeXComponent_KeyCode_KEY_F3: OH_NativeXComponent_KeyCode = 2092;
pub const OH_NativeXComponent_KeyCode_KEY_F4: OH_NativeXComponent_KeyCode = 2093;
pub const OH_NativeXComponent_KeyCode_KEY_F5: OH_NativeXComponent_KeyCode = 2094;
pub const OH_NativeXComponent_KeyCode_KEY_F6: OH_NativeXComponent_KeyCode = 2095;
pub const OH_NativeXComponent_KeyCode_KEY_F7: OH_NativeXComponent_KeyCode = 2096;
pub const OH_NativeXComponent_KeyCode_KEY_F8: OH_NativeXComponent_KeyCode = 2097;
pub const OH_NativeXComponent_KeyCode_KEY_F9: OH_NativeXComponent_KeyCode = 2098;
pub const OH_NativeXComponent_KeyCode_KEY_F10: OH_NativeXComponent_KeyCode = 2099;
pub const OH_NativeXComponent_KeyCode_KEY_F11: OH_NativeXComponent_KeyCode = 2100;
pub const OH_NativeXComponent_KeyCode_KEY_F12: OH_NativeXComponent_KeyCode = 2101;
pub const OH_NativeXComponent_KeyCode_KEY_NUM_LOCK: OH_NativeXComponent_KeyCode = 2102;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_0: OH_NativeXComponent_KeyCode = 2103;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_1: OH_NativeXComponent_KeyCode = 2104;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_2: OH_NativeXComponent_KeyCode = 2105;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_3: OH_NativeXComponent_KeyCode = 2106;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_4: OH_NativeXComponent_KeyCode = 2107;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_5: OH_NativeXComponent_KeyCode = 2108;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_6: OH_NativeXComponent_KeyCode = 2109;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_7: OH_NativeXComponent_KeyCode = 2110;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_8: OH_NativeXComponent_KeyCode = 2111;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_9: OH_NativeXComponent_KeyCode = 2112;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_DIVIDE: OH_NativeXComponent_KeyCode = 2113;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_MULTIPLY: OH_NativeXComponent_KeyCode = 2114;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_SUBTRACT: OH_NativeXComponent_KeyCode = 2115;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_ADD: OH_NativeXComponent_KeyCode = 2116;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_DOT: OH_NativeXComponent_KeyCode = 2117;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_COMMA: OH_NativeXComponent_KeyCode = 2118;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_ENTER: OH_NativeXComponent_KeyCode = 2119;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_EQUALS: OH_NativeXComponent_KeyCode = 2120;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_LEFT_PAREN: OH_NativeXComponent_KeyCode = 2121;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_RIGHT_PAREN: OH_NativeXComponent_KeyCode = 2122;
pub const OH_NativeXComponent_KeyCode_KEY_VIRTUAL_MULTITASK: OH_NativeXComponent_KeyCode = 2210;
pub const OH_NativeXComponent_KeyCode_KEY_SLEEP: OH_NativeXComponent_KeyCode = 2600;
pub const OH_NativeXComponent_KeyCode_KEY_ZENKAKU_HANKAKU: OH_NativeXComponent_KeyCode = 2601;
pub const OH_NativeXComponent_KeyCode_KEY_102ND: OH_NativeXComponent_KeyCode = 2602;
pub const OH_NativeXComponent_KeyCode_KEY_RO: OH_NativeXComponent_KeyCode = 2603;
pub const OH_NativeXComponent_KeyCode_KEY_KATAKANA: OH_NativeXComponent_KeyCode = 2604;
pub const OH_NativeXComponent_KeyCode_KEY_HIRAGANA: OH_NativeXComponent_KeyCode = 2605;
pub const OH_NativeXComponent_KeyCode_KEY_HENKAN: OH_NativeXComponent_KeyCode = 2606;
pub const OH_NativeXComponent_KeyCode_KEY_KATAKANA_HIRAGANA: OH_NativeXComponent_KeyCode = 2607;
pub const OH_NativeXComponent_KeyCode_KEY_MUHENKAN: OH_NativeXComponent_KeyCode = 2608;
pub const OH_NativeXComponent_KeyCode_KEY_LINEFEED: OH_NativeXComponent_KeyCode = 2609;
pub const OH_NativeXComponent_KeyCode_KEY_MACRO: OH_NativeXComponent_KeyCode = 2610;
pub const OH_NativeXComponent_KeyCode_KEY_NUMPAD_PLUSMINUS: OH_NativeXComponent_KeyCode = 2611;
pub const OH_NativeXComponent_KeyCode_KEY_SCALE: OH_NativeXComponent_KeyCode = 2612;
pub const OH_NativeXComponent_KeyCode_KEY_HANGUEL: OH_NativeXComponent_KeyCode = 2613;
pub const OH_NativeXComponent_KeyCode_KEY_HANJA: OH_NativeXComponent_KeyCode = 2614;
pub const OH_NativeXComponent_KeyCode_KEY_YEN: OH_NativeXComponent_KeyCode = 2615;
pub const OH_NativeXComponent_KeyCode_KEY_STOP: OH_NativeXComponent_KeyCode = 2616;
pub const OH_NativeXComponent_KeyCode_KEY_AGAIN: OH_NativeXComponent_KeyCode = 2617;
pub const OH_NativeXComponent_KeyCode_KEY_PROPS: OH_NativeXComponent_KeyCode = 2618;
pub const OH_NativeXComponent_KeyCode_KEY_UNDO: OH_NativeXComponent_KeyCode = 2619;
pub const OH_NativeXComponent_KeyCode_KEY_COPY: OH_NativeXComponent_KeyCode = 2620;
pub const OH_NativeXComponent_KeyCode_KEY_OPEN: OH_NativeXComponent_KeyCode = 2621;
pub const OH_NativeXComponent_KeyCode_KEY_PASTE: OH_NativeXComponent_KeyCode = 2622;
pub const OH_NativeXComponent_KeyCode_KEY_FIND: OH_NativeXComponent_KeyCode = 2623;
pub const OH_NativeXComponent_KeyCode_KEY_CUT: OH_NativeXComponent_KeyCode = 2624;
pub const OH_NativeXComponent_KeyCode_KEY_HELP: OH_NativeXComponent_KeyCode = 2625;
pub const OH_NativeXComponent_KeyCode_KEY_CALC: OH_NativeXComponent_KeyCode = 2626;
pub const OH_NativeXComponent_KeyCode_KEY_FILE: OH_NativeXComponent_KeyCode = 2627;
pub const OH_NativeXComponent_KeyCode_KEY_BOOKMARKS: OH_NativeXComponent_KeyCode = 2628;
pub const OH_NativeXComponent_KeyCode_KEY_NEXT: OH_NativeXComponent_KeyCode = 2629;
pub const OH_NativeXComponent_KeyCode_KEY_PLAYPAUSE: OH_NativeXComponent_KeyCode = 2630;
pub const OH_NativeXComponent_KeyCode_KEY_PREVIOUS: OH_NativeXComponent_KeyCode = 2631;
pub const OH_NativeXComponent_KeyCode_KEY_STOPCD: OH_NativeXComponent_KeyCode = 2632;
pub const OH_NativeXComponent_KeyCode_KEY_CONFIG: OH_NativeXComponent_KeyCode = 2634;
pub const OH_NativeXComponent_KeyCode_KEY_REFRESH: OH_NativeXComponent_KeyCode = 2635;
pub const OH_NativeXComponent_KeyCode_KEY_EXIT: OH_NativeXComponent_KeyCode = 2636;
pub const OH_NativeXComponent_KeyCode_KEY_EDIT: OH_NativeXComponent_KeyCode = 2637;
pub const OH_NativeXComponent_KeyCode_KEY_SCROLLUP: OH_NativeXComponent_KeyCode = 2638;
pub const OH_NativeXComponent_KeyCode_KEY_SCROLLDOWN: OH_NativeXComponent_KeyCode = 2639;
pub const OH_NativeXComponent_KeyCode_KEY_NEW: OH_NativeXComponent_KeyCode = 2640;
pub const OH_NativeXComponent_KeyCode_KEY_REDO: OH_NativeXComponent_KeyCode = 2641;
pub const OH_NativeXComponent_KeyCode_KEY_CLOSE: OH_NativeXComponent_KeyCode = 2642;
pub const OH_NativeXComponent_KeyCode_KEY_PLAY: OH_NativeXComponent_KeyCode = 2643;
pub const OH_NativeXComponent_KeyCode_KEY_BASSBOOST: OH_NativeXComponent_KeyCode = 2644;
pub const OH_NativeXComponent_KeyCode_KEY_PRINT: OH_NativeXComponent_KeyCode = 2645;
pub const OH_NativeXComponent_KeyCode_KEY_CHAT: OH_NativeXComponent_KeyCode = 2646;
pub const OH_NativeXComponent_KeyCode_KEY_FINANCE: OH_NativeXComponent_KeyCode = 2647;
pub const OH_NativeXComponent_KeyCode_KEY_CANCEL: OH_NativeXComponent_KeyCode = 2648;
pub const OH_NativeXComponent_KeyCode_KEY_KBDILLUM_TOGGLE: OH_NativeXComponent_KeyCode = 2649;
pub const OH_NativeXComponent_KeyCode_KEY_KBDILLUM_DOWN: OH_NativeXComponent_KeyCode = 2650;
pub const OH_NativeXComponent_KeyCode_KEY_KBDILLUM_UP: OH_NativeXComponent_KeyCode = 2651;
pub const OH_NativeXComponent_KeyCode_KEY_SEND: OH_NativeXComponent_KeyCode = 2652;
pub const OH_NativeXComponent_KeyCode_KEY_REPLY: OH_NativeXComponent_KeyCode = 2653;
pub const OH_NativeXComponent_KeyCode_KEY_FORWARDMAIL: OH_NativeXComponent_KeyCode = 2654;
pub const OH_NativeXComponent_KeyCode_KEY_SAVE: OH_NativeXComponent_KeyCode = 2655;
pub const OH_NativeXComponent_KeyCode_KEY_DOCUMENTS: OH_NativeXComponent_KeyCode = 2656;
pub const OH_NativeXComponent_KeyCode_KEY_VIDEO_NEXT: OH_NativeXComponent_KeyCode = 2657;
pub const OH_NativeXComponent_KeyCode_KEY_VIDEO_PREV: OH_NativeXComponent_KeyCode = 2658;
pub const OH_NativeXComponent_KeyCode_KEY_BRIGHTNESS_CYCLE: OH_NativeXComponent_KeyCode = 2659;
pub const OH_NativeXComponent_KeyCode_KEY_BRIGHTNESS_ZERO: OH_NativeXComponent_KeyCode = 2660;
pub const OH_NativeXComponent_KeyCode_KEY_DISPLAY_OFF: OH_NativeXComponent_KeyCode = 2661;
pub const OH_NativeXComponent_KeyCode_KEY_BTN_MISC: OH_NativeXComponent_KeyCode = 2662;
pub const OH_NativeXComponent_KeyCode_KEY_GOTO: OH_NativeXComponent_KeyCode = 2663;
pub const OH_NativeXComponent_KeyCode_KEY_INFO: OH_NativeXComponent_KeyCode = 2664;
pub const OH_NativeXComponent_KeyCode_KEY_PROGRAM: OH_NativeXComponent_KeyCode = 2665;
pub const OH_NativeXComponent_KeyCode_KEY_PVR: OH_NativeXComponent_KeyCode = 2666;
pub const OH_NativeXComponent_KeyCode_KEY_SUBTITLE: OH_NativeXComponent_KeyCode = 2667;
pub const OH_NativeXComponent_KeyCode_KEY_FULL_SCREEN: OH_NativeXComponent_KeyCode = 2668;
pub const OH_NativeXComponent_KeyCode_KEY_KEYBOARD: OH_NativeXComponent_KeyCode = 2669;
pub const OH_NativeXComponent_KeyCode_KEY_ASPECT_RATIO: OH_NativeXComponent_KeyCode = 2670;
pub const OH_NativeXComponent_KeyCode_KEY_PC: OH_NativeXComponent_KeyCode = 2671;
pub const OH_NativeXComponent_KeyCode_KEY_TV: OH_NativeXComponent_KeyCode = 2672;
pub const OH_NativeXComponent_KeyCode_KEY_TV2: OH_NativeXComponent_KeyCode = 2673;
pub const OH_NativeXComponent_KeyCode_KEY_VCR: OH_NativeXComponent_KeyCode = 2674;
pub const OH_NativeXComponent_KeyCode_KEY_VCR2: OH_NativeXComponent_KeyCode = 2675;
pub const OH_NativeXComponent_KeyCode_KEY_SAT: OH_NativeXComponent_KeyCode = 2676;
pub const OH_NativeXComponent_KeyCode_KEY_CD: OH_NativeXComponent_KeyCode = 2677;
pub const OH_NativeXComponent_KeyCode_KEY_TAPE: OH_NativeXComponent_KeyCode = 2678;
pub const OH_NativeXComponent_KeyCode_KEY_TUNER: OH_NativeXComponent_KeyCode = 2679;
pub const OH_NativeXComponent_KeyCode_KEY_PLAYER: OH_NativeXComponent_KeyCode = 2680;
pub const OH_NativeXComponent_KeyCode_KEY_DVD: OH_NativeXComponent_KeyCode = 2681;
pub const OH_NativeXComponent_KeyCode_KEY_AUDIO: OH_NativeXComponent_KeyCode = 2682;
pub const OH_NativeXComponent_KeyCode_KEY_VIDEO: OH_NativeXComponent_KeyCode = 2683;
pub const OH_NativeXComponent_KeyCode_KEY_MEMO: OH_NativeXComponent_KeyCode = 2684;
pub const OH_NativeXComponent_KeyCode_KEY_CALENDAR: OH_NativeXComponent_KeyCode = 2685;
pub const OH_NativeXComponent_KeyCode_KEY_RED: OH_NativeXComponent_KeyCode = 2686;
pub const OH_NativeXComponent_KeyCode_KEY_GREEN: OH_NativeXComponent_KeyCode = 2687;
pub const OH_NativeXComponent_KeyCode_KEY_YELLOW: OH_NativeXComponent_KeyCode = 2688;
pub const OH_NativeXComponent_KeyCode_KEY_BLUE: OH_NativeXComponent_KeyCode = 2689;
pub const OH_NativeXComponent_KeyCode_KEY_CHANNELUP: OH_NativeXComponent_KeyCode = 2690;
pub const OH_NativeXComponent_KeyCode_KEY_CHANNELDOWN: OH_NativeXComponent_KeyCode = 2691;
pub const OH_NativeXComponent_KeyCode_KEY_LAST: OH_NativeXComponent_KeyCode = 2692;
pub const OH_NativeXComponent_KeyCode_KEY_RESTART: OH_NativeXComponent_KeyCode = 2693;
pub const OH_NativeXComponent_KeyCode_KEY_SLOW: OH_NativeXComponent_KeyCode = 2694;
pub const OH_NativeXComponent_KeyCode_KEY_SHUFFLE: OH_NativeXComponent_KeyCode = 2695;
pub const OH_NativeXComponent_KeyCode_KEY_VIDEOPHONE: OH_NativeXComponent_KeyCode = 2696;
pub const OH_NativeXComponent_KeyCode_KEY_GAMES: OH_NativeXComponent_KeyCode = 2697;
pub const OH_NativeXComponent_KeyCode_KEY_ZOOMIN: OH_NativeXComponent_KeyCode = 2698;
pub const OH_NativeXComponent_KeyCode_KEY_ZOOMOUT: OH_NativeXComponent_KeyCode = 2699;
pub const OH_NativeXComponent_KeyCode_KEY_ZOOMRESET: OH_NativeXComponent_KeyCode = 2700;
pub const OH_NativeXComponent_KeyCode_KEY_WORDPROCESSOR: OH_NativeXComponent_KeyCode = 2701;
pub const OH_NativeXComponent_KeyCode_KEY_EDITOR: OH_NativeXComponent_KeyCode = 2702;
pub const OH_NativeXComponent_KeyCode_KEY_SPREADSHEET: OH_NativeXComponent_KeyCode = 2703;
pub const OH_NativeXComponent_KeyCode_KEY_GRAPHICSEDITOR: OH_NativeXComponent_KeyCode = 2704;
pub const OH_NativeXComponent_KeyCode_KEY_PRESENTATION: OH_NativeXComponent_KeyCode = 2705;
pub const OH_NativeXComponent_KeyCode_KEY_DATABASE: OH_NativeXComponent_KeyCode = 2706;
pub const OH_NativeXComponent_KeyCode_KEY_NEWS: OH_NativeXComponent_KeyCode = 2707;
pub const OH_NativeXComponent_KeyCode_KEY_VOICEMAIL: OH_NativeXComponent_KeyCode = 2708;
pub const OH_NativeXComponent_KeyCode_KEY_ADDRESSBOOK: OH_NativeXComponent_KeyCode = 2709;
pub const OH_NativeXComponent_KeyCode_KEY_MESSENGER: OH_NativeXComponent_KeyCode = 2710;
pub const OH_NativeXComponent_KeyCode_KEY_BRIGHTNESS_TOGGLE: OH_NativeXComponent_KeyCode = 2711;
pub const OH_NativeXComponent_KeyCode_KEY_SPELLCHECK: OH_NativeXComponent_KeyCode = 2712;
pub const OH_NativeXComponent_KeyCode_KEY_COFFEE: OH_NativeXComponent_KeyCode = 2713;
pub const OH_NativeXComponent_KeyCode_KEY_MEDIA_REPEAT: OH_NativeXComponent_KeyCode = 2714;
pub const OH_NativeXComponent_KeyCode_KEY_IMAGES: OH_NativeXComponent_KeyCode = 2715;
pub const OH_NativeXComponent_KeyCode_KEY_BUTTONCONFIG: OH_NativeXComponent_KeyCode = 2716;
pub const OH_NativeXComponent_KeyCode_KEY_TASKMANAGER: OH_NativeXComponent_KeyCode = 2717;
pub const OH_NativeXComponent_KeyCode_KEY_JOURNAL: OH_NativeXComponent_KeyCode = 2718;
pub const OH_NativeXComponent_KeyCode_KEY_CONTROLPANEL: OH_NativeXComponent_KeyCode = 2719;
pub const OH_NativeXComponent_KeyCode_KEY_APPSELECT: OH_NativeXComponent_KeyCode = 2720;
pub const OH_NativeXComponent_KeyCode_KEY_SCREENSAVER: OH_NativeXComponent_KeyCode = 2721;
pub const OH_NativeXComponent_KeyCode_KEY_ASSISTANT: OH_NativeXComponent_KeyCode = 2722;
pub const OH_NativeXComponent_KeyCode_KEY_KBD_LAYOUT_NEXT: OH_NativeXComponent_KeyCode = 2723;
pub const OH_NativeXComponent_KeyCode_KEY_BRIGHTNESS_MIN: OH_NativeXComponent_KeyCode = 2724;
pub const OH_NativeXComponent_KeyCode_KEY_BRIGHTNESS_MAX: OH_NativeXComponent_KeyCode = 2725;
pub const OH_NativeXComponent_KeyCode_KEY_KBDINPUTASSIST_PREV: OH_NativeXComponent_KeyCode = 2726;
pub const OH_NativeXComponent_KeyCode_KEY_KBDINPUTASSIST_NEXT: OH_NativeXComponent_KeyCode = 2727;
pub const OH_NativeXComponent_KeyCode_KEY_KBDINPUTASSIST_PREVGROUP: OH_NativeXComponent_KeyCode =
    2728;
pub const OH_NativeXComponent_KeyCode_KEY_KBDINPUTASSIST_NEXTGROUP: OH_NativeXComponent_KeyCode =
    2729;
pub const OH_NativeXComponent_KeyCode_KEY_KBDINPUTASSIST_ACCEPT: OH_NativeXComponent_KeyCode = 2730;
pub const OH_NativeXComponent_KeyCode_KEY_KBDINPUTASSIST_CANCEL: OH_NativeXComponent_KeyCode = 2731;
pub const OH_NativeXComponent_KeyCode_KEY_FRONT: OH_NativeXComponent_KeyCode = 2800;
pub const OH_NativeXComponent_KeyCode_KEY_SETUP: OH_NativeXComponent_KeyCode = 2801;
pub const OH_NativeXComponent_KeyCode_KEY_WAKEUP: OH_NativeXComponent_KeyCode = 2802;
pub const OH_NativeXComponent_KeyCode_KEY_SENDFILE: OH_NativeXComponent_KeyCode = 2803;
pub const OH_NativeXComponent_KeyCode_KEY_DELETEFILE: OH_NativeXComponent_KeyCode = 2804;
pub const OH_NativeXComponent_KeyCode_KEY_XFER: OH_NativeXComponent_KeyCode = 2805;
pub const OH_NativeXComponent_KeyCode_KEY_PROG1: OH_NativeXComponent_KeyCode = 2806;
pub const OH_NativeXComponent_KeyCode_KEY_PROG2: OH_NativeXComponent_KeyCode = 2807;
pub const OH_NativeXComponent_KeyCode_KEY_MSDOS: OH_NativeXComponent_KeyCode = 2808;
pub const OH_NativeXComponent_KeyCode_KEY_SCREENLOCK: OH_NativeXComponent_KeyCode = 2809;
pub const OH_NativeXComponent_KeyCode_KEY_DIRECTION_ROTATE_DISPLAY: OH_NativeXComponent_KeyCode =
    2810;
pub const OH_NativeXComponent_KeyCode_KEY_CYCLEWINDOWS: OH_NativeXComponent_KeyCode = 2811;
pub const OH_NativeXComponent_KeyCode_KEY_COMPUTER: OH_NativeXComponent_KeyCode = 2812;
pub const OH_NativeXComponent_KeyCode_KEY_EJECTCLOSECD: OH_NativeXComponent_KeyCode = 2813;
pub const OH_NativeXComponent_KeyCode_KEY_ISO: OH_NativeXComponent_KeyCode = 2814;
pub const OH_NativeXComponent_KeyCode_KEY_MOVE: OH_NativeXComponent_KeyCode = 2815;
pub const OH_NativeXComponent_KeyCode_KEY_F13: OH_NativeXComponent_KeyCode = 2816;
pub const OH_NativeXComponent_KeyCode_KEY_F14: OH_NativeXComponent_KeyCode = 2817;
pub const OH_NativeXComponent_KeyCode_KEY_F15: OH_NativeXComponent_KeyCode = 2818;
pub const OH_NativeXComponent_KeyCode_KEY_F16: OH_NativeXComponent_KeyCode = 2819;
pub const OH_NativeXComponent_KeyCode_KEY_F17: OH_NativeXComponent_KeyCode = 2820;
pub const OH_NativeXComponent_KeyCode_KEY_F18: OH_NativeXComponent_KeyCode = 2821;
pub const OH_NativeXComponent_KeyCode_KEY_F19: OH_NativeXComponent_KeyCode = 2822;
pub const OH_NativeXComponent_KeyCode_KEY_F20: OH_NativeXComponent_KeyCode = 2823;
pub const OH_NativeXComponent_KeyCode_KEY_F21: OH_NativeXComponent_KeyCode = 2824;
pub const OH_NativeXComponent_KeyCode_KEY_F22: OH_NativeXComponent_KeyCode = 2825;
pub const OH_NativeXComponent_KeyCode_KEY_F23: OH_NativeXComponent_KeyCode = 2826;
pub const OH_NativeXComponent_KeyCode_KEY_F24: OH_NativeXComponent_KeyCode = 2827;
pub const OH_NativeXComponent_KeyCode_KEY_PROG3: OH_NativeXComponent_KeyCode = 2828;
pub const OH_NativeXComponent_KeyCode_KEY_PROG4: OH_NativeXComponent_KeyCode = 2829;
pub const OH_NativeXComponent_KeyCode_KEY_DASHBOARD: OH_NativeXComponent_KeyCode = 2830;
pub const OH_NativeXComponent_KeyCode_KEY_SUSPEND: OH_NativeXComponent_KeyCode = 2831;
pub const OH_NativeXComponent_KeyCode_KEY_HP: OH_NativeXComponent_KeyCode = 2832;
pub const OH_NativeXComponent_KeyCode_KEY_SOUND: OH_NativeXComponent_KeyCode = 2833;
pub const OH_NativeXComponent_KeyCode_KEY_QUESTION: OH_NativeXComponent_KeyCode = 2834;
pub const OH_NativeXComponent_KeyCode_KEY_CONNECT: OH_NativeXComponent_KeyCode = 2836;
pub const OH_NativeXComponent_KeyCode_KEY_SPORT: OH_NativeXComponent_KeyCode = 2837;
pub const OH_NativeXComponent_KeyCode_KEY_SHOP: OH_NativeXComponent_KeyCode = 2838;
pub const OH_NativeXComponent_KeyCode_KEY_ALTERASE: OH_NativeXComponent_KeyCode = 2839;
pub const OH_NativeXComponent_KeyCode_KEY_SWITCHVIDEOMODE: OH_NativeXComponent_KeyCode = 2841;
pub const OH_NativeXComponent_KeyCode_KEY_BATTERY: OH_NativeXComponent_KeyCode = 2842;
pub const OH_NativeXComponent_KeyCode_KEY_BLUETOOTH: OH_NativeXComponent_KeyCode = 2843;
pub const OH_NativeXComponent_KeyCode_KEY_WLAN: OH_NativeXComponent_KeyCode = 2844;
pub const OH_NativeXComponent_KeyCode_KEY_UWB: OH_NativeXComponent_KeyCode = 2845;
pub const OH_NativeXComponent_KeyCode_KEY_WWAN_WIMAX: OH_NativeXComponent_KeyCode = 2846;
pub const OH_NativeXComponent_KeyCode_KEY_RFKILL: OH_NativeXComponent_KeyCode = 2847;
pub const OH_NativeXComponent_KeyCode_KEY_CHANNEL: OH_NativeXComponent_KeyCode = 3001;
pub const OH_NativeXComponent_KeyCode_KEY_BTN_0: OH_NativeXComponent_KeyCode = 3100;
pub const OH_NativeXComponent_KeyCode_KEY_BTN_1: OH_NativeXComponent_KeyCode = 3101;
pub const OH_NativeXComponent_KeyCode_KEY_BTN_2: OH_NativeXComponent_KeyCode = 3102;
pub const OH_NativeXComponent_KeyCode_KEY_BTN_3: OH_NativeXComponent_KeyCode = 3103;
pub const OH_NativeXComponent_KeyCode_KEY_BTN_4: OH_NativeXComponent_KeyCode = 3104;
pub const OH_NativeXComponent_KeyCode_KEY_BTN_5: OH_NativeXComponent_KeyCode = 3105;
pub const OH_NativeXComponent_KeyCode_KEY_BTN_6: OH_NativeXComponent_KeyCode = 3106;
pub const OH_NativeXComponent_KeyCode_KEY_BTN_7: OH_NativeXComponent_KeyCode = 3107;
pub const OH_NativeXComponent_KeyCode_KEY_BTN_8: OH_NativeXComponent_KeyCode = 3108;
pub const OH_NativeXComponent_KeyCode_KEY_BTN_9: OH_NativeXComponent_KeyCode = 3109;
pub type OH_NativeXComponent_KeyCode = ::std::os::raw::c_int;
pub const OH_NativeXComponent_KeyAction_OH_NATIVEXCOMPONENT_KEY_ACTION_UNKNOWN:
    OH_NativeXComponent_KeyAction = -1;
pub const OH_NativeXComponent_KeyAction_OH_NATIVEXCOMPONENT_KEY_ACTION_DOWN:
    OH_NativeXComponent_KeyAction = 0;
pub const OH_NativeXComponent_KeyAction_OH_NATIVEXCOMPONENT_KEY_ACTION_UP:
    OH_NativeXComponent_KeyAction = 1;
pub type OH_NativeXComponent_KeyAction = ::std::os::raw::c_int;
pub const OH_XCOMPONENT_ID_LEN_MAX: u32 = 128;
pub const OH_MAX_TOUCH_POINTS_NUMBER: u32 = 10;
pub const OH_NATIVEXCOMPONENT_RESULT_SUCCESS: _bindgen_ty_6 = 0;
pub const OH_NATIVEXCOMPONENT_RESULT_FAILED: _bindgen_ty_6 = -1;
pub const OH_NATIVEXCOMPONENT_RESULT_BAD_PARAMETER: _bindgen_ty_6 = -2;
pub type _bindgen_ty_6 = ::std::os::raw::c_int;
pub const OH_NativeXComponent_TouchEventType_OH_NATIVEXCOMPONENT_DOWN:
    OH_NativeXComponent_TouchEventType = 0;
pub const OH_NativeXComponent_TouchEventType_OH_NATIVEXCOMPONENT_UP:
    OH_NativeXComponent_TouchEventType = 1;
pub const OH_NativeXComponent_TouchEventType_OH_NATIVEXCOMPONENT_MOVE:
    OH_NativeXComponent_TouchEventType = 2;
pub const OH_NativeXComponent_TouchEventType_OH_NATIVEXCOMPONENT_CANCEL:
    OH_NativeXComponent_TouchEventType = 3;
pub const OH_NativeXComponent_TouchEventType_OH_NATIVEXCOMPONENT_UNKNOWN:
    OH_NativeXComponent_TouchEventType = 4;
pub type OH_NativeXComponent_TouchEventType = ::std::os::raw::c_uint;
pub const OH_NativeXComponent_TouchPointToolType_OH_NATIVEXCOMPONENT_TOOL_TYPE_UNKNOWN:
    OH_NativeXComponent_TouchPointToolType = 0;
pub const OH_NativeXComponent_TouchPointToolType_OH_NATIVEXCOMPONENT_TOOL_TYPE_FINGER:
    OH_NativeXComponent_TouchPointToolType = 1;
pub const OH_NativeXComponent_TouchPointToolType_OH_NATIVEXCOMPONENT_TOOL_TYPE_PEN:
    OH_NativeXComponent_TouchPointToolType = 2;
pub const OH_NativeXComponent_TouchPointToolType_OH_NATIVEXCOMPONENT_TOOL_TYPE_RUBBER:
    OH_NativeXComponent_TouchPointToolType = 3;
pub const OH_NativeXComponent_TouchPointToolType_OH_NATIVEXCOMPONENT_TOOL_TYPE_BRUSH:
    OH_NativeXComponent_TouchPointToolType = 4;
pub const OH_NativeXComponent_TouchPointToolType_OH_NATIVEXCOMPONENT_TOOL_TYPE_PENCIL:
    OH_NativeXComponent_TouchPointToolType = 5;
pub const OH_NativeXComponent_TouchPointToolType_OH_NATIVEXCOMPONENT_TOOL_TYPE_AIRBRUSH:
    OH_NativeXComponent_TouchPointToolType = 6;
pub const OH_NativeXComponent_TouchPointToolType_OH_NATIVEXCOMPONENT_TOOL_TYPE_MOUSE:
    OH_NativeXComponent_TouchPointToolType = 7;
pub const OH_NativeXComponent_TouchPointToolType_OH_NATIVEXCOMPONENT_TOOL_TYPE_LENS:
    OH_NativeXComponent_TouchPointToolType = 8;
pub type OH_NativeXComponent_TouchPointToolType = ::std::os::raw::c_uint;
pub const OH_NativeXComponent_EventSourceType_OH_NATIVEXCOMPONENT_SOURCE_TYPE_UNKNOWN:
    OH_NativeXComponent_EventSourceType = 0;
pub const OH_NativeXComponent_EventSourceType_OH_NATIVEXCOMPONENT_SOURCE_TYPE_MOUSE:
    OH_NativeXComponent_EventSourceType = 1;
pub const OH_NativeXComponent_EventSourceType_OH_NATIVEXCOMPONENT_SOURCE_TYPE_TOUCHSCREEN:
    OH_NativeXComponent_EventSourceType = 2;
pub const OH_NativeXComponent_EventSourceType_OH_NATIVEXCOMPONENT_SOURCE_TYPE_TOUCHPAD:
    OH_NativeXComponent_EventSourceType = 3;
pub const OH_NativeXComponent_EventSourceType_OH_NATIVEXCOMPONENT_SOURCE_TYPE_JOYSTICK:
    OH_NativeXComponent_EventSourceType = 4;
pub const OH_NativeXComponent_EventSourceType_OH_NATIVEXCOMPONENT_SOURCE_TYPE_KEYBOARD:
    OH_NativeXComponent_EventSourceType = 5;
pub type OH_NativeXComponent_EventSourceType = ::std::os::raw::c_uint;
pub const OH_NativeXComponent_MouseEventAction_OH_NATIVEXCOMPONENT_MOUSE_NONE:
    OH_NativeXComponent_MouseEventAction = 0;
pub const OH_NativeXComponent_MouseEventAction_OH_NATIVEXCOMPONENT_MOUSE_PRESS:
    OH_NativeXComponent_MouseEventAction = 1;
pub const OH_NativeXComponent_MouseEventAction_OH_NATIVEXCOMPONENT_MOUSE_RELEASE:
    OH_NativeXComponent_MouseEventAction = 2;
pub const OH_NativeXComponent_MouseEventAction_OH_NATIVEXCOMPONENT_MOUSE_MOVE:
    OH_NativeXComponent_MouseEventAction = 3;
pub type OH_NativeXComponent_MouseEventAction = ::std::os::raw::c_uint;
pub const OH_NativeXComponent_MouseEventButton_OH_NATIVEXCOMPONENT_NONE_BUTTON:
    OH_NativeXComponent_MouseEventButton = 0;
pub const OH_NativeXComponent_MouseEventButton_OH_NATIVEXCOMPONENT_LEFT_BUTTON:
    OH_NativeXComponent_MouseEventButton = 1;
pub const OH_NativeXComponent_MouseEventButton_OH_NATIVEXCOMPONENT_RIGHT_BUTTON:
    OH_NativeXComponent_MouseEventButton = 2;
pub const OH_NativeXComponent_MouseEventButton_OH_NATIVEXCOMPONENT_MIDDLE_BUTTON:
    OH_NativeXComponent_MouseEventButton = 4;
pub const OH_NativeXComponent_MouseEventButton_OH_NATIVEXCOMPONENT_BACK_BUTTON:
    OH_NativeXComponent_MouseEventButton = 8;
pub const OH_NativeXComponent_MouseEventButton_OH_NATIVEXCOMPONENT_FORWARD_BUTTON:
    OH_NativeXComponent_MouseEventButton = 16;
pub type OH_NativeXComponent_MouseEventButton = ::std::os::raw::c_uint;
pub const OH_NativeXComponent_TouchEvent_SourceTool_OH_NATIVEXCOMPONENT_SOURCETOOL_UNKNOWN:
    OH_NativeXComponent_TouchEvent_SourceTool = 0;
pub const OH_NativeXComponent_TouchEvent_SourceTool_OH_NATIVEXCOMPONENT_SOURCETOOL_FINGER:
    OH_NativeXComponent_TouchEvent_SourceTool = 1;
pub const OH_NativeXComponent_TouchEvent_SourceTool_OH_NATIVEXCOMPONENT_SOURCETOOL_PEN:
    OH_NativeXComponent_TouchEvent_SourceTool = 2;
pub const OH_NativeXComponent_TouchEvent_SourceTool_OH_NATIVEXCOMPONENT_SOURCETOOL_RUBBER:
    OH_NativeXComponent_TouchEvent_SourceTool = 3;
pub const OH_NativeXComponent_TouchEvent_SourceTool_OH_NATIVEXCOMPONENT_SOURCETOOL_BRUSH:
    OH_NativeXComponent_TouchEvent_SourceTool = 4;
pub const OH_NativeXComponent_TouchEvent_SourceTool_OH_NATIVEXCOMPONENT_SOURCETOOL_PENCIL:
    OH_NativeXComponent_TouchEvent_SourceTool = 5;
pub const OH_NativeXComponent_TouchEvent_SourceTool_OH_NATIVEXCOMPONENT_SOURCETOOL_AIRBRUSH:
    OH_NativeXComponent_TouchEvent_SourceTool = 6;
pub const OH_NativeXComponent_TouchEvent_SourceTool_OH_NATIVEXCOMPONENT_SOURCETOOL_MOUSE:
    OH_NativeXComponent_TouchEvent_SourceTool = 7;
pub const OH_NativeXComponent_TouchEvent_SourceTool_OH_NATIVEXCOMPONENT_SOURCETOOL_LENS:
    OH_NativeXComponent_TouchEvent_SourceTool = 8;
pub const OH_NativeXComponent_TouchEvent_SourceTool_OH_NATIVEXCOMPONENT_SOURCETOOL_TOUCHPAD:
    OH_NativeXComponent_TouchEvent_SourceTool = 9;
pub type OH_NativeXComponent_TouchEvent_SourceTool = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_NativeXComponent_HistoricalPoint {
    pub id: i32,
    pub screenX: f32,
    pub screenY: f32,
    pub x: f32,
    pub y: f32,
    pub type_: OH_NativeXComponent_TouchEventType,
    pub size: f64,
    pub force: f32,
    pub timeStamp: i64,
    pub titlX: f32,
    pub titlY: f32,
    pub sourceTool: OH_NativeXComponent_TouchEvent_SourceTool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_NativeXComponent_TouchPoint {
    pub id: i32,
    pub screenX: f32,
    pub screenY: f32,
    pub x: f32,
    pub y: f32,
    pub type_: OH_NativeXComponent_TouchEventType,
    pub size: f64,
    pub force: f32,
    pub timeStamp: i64,
    pub isPressed: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_NativeXComponent_TouchEvent {
    pub id: i32,
    pub screenX: f32,
    pub screenY: f32,
    pub x: f32,
    pub y: f32,
    pub type_: OH_NativeXComponent_TouchEventType,
    pub size: f64,
    pub force: f32,
    pub deviceId: i64,
    pub timeStamp: i64,
    pub touchPoints: [OH_NativeXComponent_TouchPoint; 10usize],
    pub numPoints: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_NativeXComponent_MouseEvent {
    pub x: f32,
    pub y: f32,
    pub screenX: f32,
    pub screenY: f32,
    pub timestamp: i64,
    pub action: OH_NativeXComponent_MouseEventAction,
    pub button: OH_NativeXComponent_MouseEventButton,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_NativeXComponent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_NativeXComponent_Callback {
    pub OnSurfaceCreated: ::std::option::Option<
        unsafe extern "C" fn(
            component: *mut OH_NativeXComponent,
            window: *mut ::std::os::raw::c_void,
        ),
    >,
    pub OnSurfaceChanged: ::std::option::Option<
        unsafe extern "C" fn(
            component: *mut OH_NativeXComponent,
            window: *mut ::std::os::raw::c_void,
        ),
    >,
    pub OnSurfaceDestroyed: ::std::option::Option<
        unsafe extern "C" fn(
            component: *mut OH_NativeXComponent,
            window: *mut ::std::os::raw::c_void,
        ),
    >,
    pub DispatchTouchEvent: ::std::option::Option<
        unsafe extern "C" fn(
            component: *mut OH_NativeXComponent,
            window: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_NativeXComponent_MouseEvent_Callback {
    pub DispatchMouseEvent: ::std::option::Option<
        unsafe extern "C" fn(
            component: *mut OH_NativeXComponent,
            window: *mut ::std::os::raw::c_void,
        ),
    >,
    pub DispatchHoverEvent: ::std::option::Option<
        unsafe extern "C" fn(component: *mut OH_NativeXComponent, isHover: bool),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_NativeXComponent_KeyEvent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_NativeXComponent_ExpectedRateRange {
    pub min: i32,
    pub max: i32,
    pub expected: i32,
}
extern "C" {
    pub fn OH_NativeXComponent_GetXComponentId(
        component: *mut OH_NativeXComponent,
        id: *mut ::std::os::raw::c_char,
        size: *mut u64,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetXComponentSize(
        component: *mut OH_NativeXComponent,
        window: *const ::std::os::raw::c_void,
        width: *mut u64,
        height: *mut u64,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetXComponentOffset(
        component: *mut OH_NativeXComponent,
        window: *const ::std::os::raw::c_void,
        x: *mut f64,
        y: *mut f64,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetTouchEvent(
        component: *mut OH_NativeXComponent,
        window: *const ::std::os::raw::c_void,
        touchEvent: *mut OH_NativeXComponent_TouchEvent,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetTouchPointToolType(
        component: *mut OH_NativeXComponent,
        pointIndex: u32,
        toolType: *mut OH_NativeXComponent_TouchPointToolType,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetTouchPointTiltX(
        component: *mut OH_NativeXComponent,
        pointIndex: u32,
        tiltX: *mut f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetTouchPointTiltY(
        component: *mut OH_NativeXComponent,
        pointIndex: u32,
        tiltY: *mut f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetTouchPointWindowX(
        component: *mut OH_NativeXComponent,
        pointIndex: u32,
        windowX: *mut f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetTouchPointWindowY(
        component: *mut OH_NativeXComponent,
        pointIndex: u32,
        windowY: *mut f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetTouchPointDisplayX(
        component: *mut OH_NativeXComponent,
        pointIndex: u32,
        displayX: *mut f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetTouchPointDisplayY(
        component: *mut OH_NativeXComponent,
        pointIndex: u32,
        displayY: *mut f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetHistoricalPoints(
        component: *mut OH_NativeXComponent,
        window: *const ::std::os::raw::c_void,
        size: *mut i32,
        historicalPoints: *mut *mut OH_NativeXComponent_HistoricalPoint,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetMouseEvent(
        component: *mut OH_NativeXComponent,
        window: *const ::std::os::raw::c_void,
        mouseEvent: *mut OH_NativeXComponent_MouseEvent,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_RegisterCallback(
        component: *mut OH_NativeXComponent,
        callback: *mut OH_NativeXComponent_Callback,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_RegisterMouseEventCallback(
        component: *mut OH_NativeXComponent,
        callback: *mut OH_NativeXComponent_MouseEvent_Callback,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_RegisterFocusEventCallback(
        component: *mut OH_NativeXComponent,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                component: *mut OH_NativeXComponent,
                window: *mut ::std::os::raw::c_void,
            ),
        >,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_RegisterKeyEventCallback(
        component: *mut OH_NativeXComponent,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                component: *mut OH_NativeXComponent,
                window: *mut ::std::os::raw::c_void,
            ),
        >,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_RegisterBlurEventCallback(
        component: *mut OH_NativeXComponent,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                component: *mut OH_NativeXComponent,
                window: *mut ::std::os::raw::c_void,
            ),
        >,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetKeyEvent(
        component: *mut OH_NativeXComponent,
        keyEvent: *mut *mut OH_NativeXComponent_KeyEvent,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetKeyEventAction(
        keyEvent: *mut OH_NativeXComponent_KeyEvent,
        action: *mut OH_NativeXComponent_KeyAction,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetKeyEventCode(
        keyEvent: *mut OH_NativeXComponent_KeyEvent,
        code: *mut OH_NativeXComponent_KeyCode,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetKeyEventSourceType(
        keyEvent: *mut OH_NativeXComponent_KeyEvent,
        sourceType: *mut OH_NativeXComponent_EventSourceType,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetKeyEventDeviceId(
        keyEvent: *mut OH_NativeXComponent_KeyEvent,
        deviceId: *mut i64,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetKeyEventTimestamp(
        keyEvent: *mut OH_NativeXComponent_KeyEvent,
        timestamp: *mut i64,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_SetExpectedFrameRateRange(
        component: *mut OH_NativeXComponent,
        range: *mut OH_NativeXComponent_ExpectedRateRange,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_RegisterOnFrameCallback(
        component: *mut OH_NativeXComponent,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                component: *mut OH_NativeXComponent,
                timestamp: u64,
                targetTimestamp: u64,
            ),
        >,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_UnregisterOnFrameCallback(
        component: *mut OH_NativeXComponent,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_AttachNativeRootNode(
        component: *mut OH_NativeXComponent,
        root: ArkUI_NodeHandle,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_DetachNativeRootNode(
        component: *mut OH_NativeXComponent,
        root: ArkUI_NodeHandle,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_RegisterSurfaceShowCallback(
        component: *mut OH_NativeXComponent,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                component: *mut OH_NativeXComponent,
                window: *mut ::std::os::raw::c_void,
            ),
        >,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_RegisterSurfaceHideCallback(
        component: *mut OH_NativeXComponent,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                component: *mut OH_NativeXComponent,
                window: *mut ::std::os::raw::c_void,
            ),
        >,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_RegisterUIInputEventCallback(
        component: *mut OH_NativeXComponent,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                component: *mut OH_NativeXComponent,
                event: *mut ArkUI_UIInputEvent,
                type_: ArkUI_UIInputEvent_Type,
            ),
        >,
        type_: ArkUI_UIInputEvent_Type,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_SetNeedSoftKeyboard(
        component: *mut OH_NativeXComponent,
        needSoftKeyboard: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_RegisterOnTouchInterceptCallback(
        component: *mut OH_NativeXComponent,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                component: *mut OH_NativeXComponent,
                event: *mut ArkUI_UIInputEvent,
            ) -> HitTestMode,
        >,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetTouchEventSourceType(
        component: *mut OH_NativeXComponent,
        pointId: i32,
        sourceType: *mut OH_NativeXComponent_EventSourceType,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_GetNativeXComponent(
        node: ArkUI_NodeHandle,
    ) -> *mut OH_NativeXComponent;
}
extern "C" {
    pub fn OH_NativeXComponent_GetNativeAccessibilityProvider(
        component: *mut OH_NativeXComponent,
        handle: *mut *mut ArkUI_AccessibilityProvider,
    ) -> i32;
}
extern "C" {
    pub fn OH_NativeXComponent_RegisterKeyEventCallbackWithResult(
        component: *mut OH_NativeXComponent,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                component: *mut OH_NativeXComponent,
                window: *mut ::std::os::raw::c_void,
            ) -> bool,
        >,
    ) -> i32;
}
