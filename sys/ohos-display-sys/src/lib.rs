/* automatically generated by rust-bindgen 0.65.1 */

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]

pub const NativeDisplayManager_Rotation_DISPLAY_MANAGER_ROTATION_0: NativeDisplayManager_Rotation =
    0;
pub const NativeDisplayManager_Rotation_DISPLAY_MANAGER_ROTATION_90: NativeDisplayManager_Rotation =
    1;
pub const NativeDisplayManager_Rotation_DISPLAY_MANAGER_ROTATION_180:
    NativeDisplayManager_Rotation = 2;
pub const NativeDisplayManager_Rotation_DISPLAY_MANAGER_ROTATION_270:
    NativeDisplayManager_Rotation = 3;
pub type NativeDisplayManager_Rotation = ::std::os::raw::c_uint;
pub const NativeDisplayManager_Orientation_DISPLAY_MANAGER_PORTRAIT:
    NativeDisplayManager_Orientation = 0;
pub const NativeDisplayManager_Orientation_DISPLAY_MANAGER_LANDSCAPE:
    NativeDisplayManager_Orientation = 1;
pub const NativeDisplayManager_Orientation_DISPLAY_MANAGER_PORTRAIT_INVERTED:
    NativeDisplayManager_Orientation = 2;
pub const NativeDisplayManager_Orientation_DISPLAY_MANAGER_LANDSCAPE_INVERTED:
    NativeDisplayManager_Orientation = 3;
pub const NativeDisplayManager_Orientation_DISPLAY_MANAGER_UNKNOWN:
    NativeDisplayManager_Orientation = 4;
pub type NativeDisplayManager_Orientation = ::std::os::raw::c_uint;
pub const NativeDisplayManager_ErrorCode_DISPLAY_MANAGER_OK: NativeDisplayManager_ErrorCode = 0;
pub const NativeDisplayManager_ErrorCode_DISPLAY_MANAGER_ERROR_NO_PERMISSION:
    NativeDisplayManager_ErrorCode = 201;
pub const NativeDisplayManager_ErrorCode_DISPLAY_MANAGER_ERROR_NOT_SYSTEM_APP:
    NativeDisplayManager_ErrorCode = 202;
pub const NativeDisplayManager_ErrorCode_DISPLAY_MANAGER_ERROR_INVALID_PARAM:
    NativeDisplayManager_ErrorCode = 401;
pub const NativeDisplayManager_ErrorCode_DISPLAY_MANAGER_ERROR_DEVICE_NOT_SUPPORTED:
    NativeDisplayManager_ErrorCode = 801;
pub const NativeDisplayManager_ErrorCode_DISPLAY_MANAGER_ERROR_INVALID_SCREEN:
    NativeDisplayManager_ErrorCode = 1400001;
pub const NativeDisplayManager_ErrorCode_DISPLAY_MANAGER_ERROR_INVALID_CALL:
    NativeDisplayManager_ErrorCode = 1400002;
pub const NativeDisplayManager_ErrorCode_DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL:
    NativeDisplayManager_ErrorCode = 1400003;
pub type NativeDisplayManager_ErrorCode = ::std::os::raw::c_uint;
pub const NativeDisplayManager_FoldDisplayMode_DISPLAY_MANAGER_FOLD_DISPLAY_MODE_UNKNOWN:
    NativeDisplayManager_FoldDisplayMode = 0;
pub const NativeDisplayManager_FoldDisplayMode_DISPLAY_MANAGER_FOLD_DISPLAY_MODE_FULL:
    NativeDisplayManager_FoldDisplayMode = 1;
pub const NativeDisplayManager_FoldDisplayMode_DISPLAY_MANAGER_FOLD_DISPLAY_MODE_MAIN:
    NativeDisplayManager_FoldDisplayMode = 2;
pub const NativeDisplayManager_FoldDisplayMode_DISPLAY_MANAGER_FOLD_DISPLAY_MODE_SUB:
    NativeDisplayManager_FoldDisplayMode = 3;
pub const NativeDisplayManager_FoldDisplayMode_DISPLAY_MANAGER_FOLD_DISPLAY_MODE_COORDINATION:
    NativeDisplayManager_FoldDisplayMode = 4;
pub type NativeDisplayManager_FoldDisplayMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NativeDisplayManager_Rect {
    pub left: i32,
    pub top: i32,
    pub width: u32,
    pub height: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NativeDisplayManager_WaterfallDisplayAreaRects {
    pub left: NativeDisplayManager_Rect,
    pub top: NativeDisplayManager_Rect,
    pub right: NativeDisplayManager_Rect,
    pub bottom: NativeDisplayManager_Rect,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NativeDisplayManager_CutoutInfo {
    pub boundingRectsLength: i32,
    pub boundingRects: *mut NativeDisplayManager_Rect,
    pub waterfallDisplayAreaRects: NativeDisplayManager_WaterfallDisplayAreaRects,
}
pub const NativeDisplayManager_DisplayState_DISPLAY_MANAGER_DISPLAY_STATE_UNKNOWN:
    NativeDisplayManager_DisplayState = 0;
pub const NativeDisplayManager_DisplayState_DISPLAY_MANAGER_DISPLAY_STATE_OFF:
    NativeDisplayManager_DisplayState = 1;
pub const NativeDisplayManager_DisplayState_DISPLAY_MANAGER_DISPLAY_STATE_ON:
    NativeDisplayManager_DisplayState = 2;
pub const NativeDisplayManager_DisplayState_DISPLAY_MANAGER_DISPLAY_STATE_DOZE:
    NativeDisplayManager_DisplayState = 3;
pub const NativeDisplayManager_DisplayState_DISPLAY_MANAGER_DISPLAY_STATE_DOZE_SUSPEND:
    NativeDisplayManager_DisplayState = 4;
pub const NativeDisplayManager_DisplayState_DISPLAY_MANAGER_DISPLAY_STATE_VR:
    NativeDisplayManager_DisplayState = 5;
pub const NativeDisplayManager_DisplayState_DISPLAY_MANAGER_DISPLAY_STATE_ON_SUSPEND:
    NativeDisplayManager_DisplayState = 6;
pub type NativeDisplayManager_DisplayState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NativeDisplayManager_DisplayHdrFormat {
    pub hdrFormatLength: u32,
    pub hdrFormats: *mut u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NativeDisplayManager_DisplayColorSpace {
    pub colorSpaceLength: u32,
    pub colorSpaces: *mut u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NativeDisplayManager_DisplayInfo {
    pub id: u32,
    pub name: [::std::os::raw::c_char; 33usize],
    pub isAlive: bool,
    pub width: i32,
    pub height: i32,
    pub physicalWidth: i32,
    pub physicalHeight: i32,
    pub refreshRate: u32,
    pub availableWidth: u32,
    pub availableHeight: u32,
    pub densityDPI: f32,
    pub densityPixels: f32,
    pub scaledDensity: f32,
    pub xDPI: f32,
    pub yDPI: f32,
    pub rotation: NativeDisplayManager_Rotation,
    pub state: NativeDisplayManager_DisplayState,
    pub orientation: NativeDisplayManager_Orientation,
    pub hdrFormat: *mut NativeDisplayManager_DisplayHdrFormat,
    pub colorSpace: *mut NativeDisplayManager_DisplayColorSpace,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NativeDisplayManager_DisplaysInfo {
    pub displaysLength: u32,
    pub displaysInfo: *mut NativeDisplayManager_DisplayInfo,
}
extern "C" {
    pub fn OH_NativeDisplayManager_GetDefaultDisplayId(
        displayId: *mut u64,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_GetDefaultDisplayWidth(
        displayWidth: *mut i32,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_GetDefaultDisplayHeight(
        displayHeight: *mut i32,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_GetDefaultDisplayRotation(
        displayRotation: *mut NativeDisplayManager_Rotation,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_GetDefaultDisplayOrientation(
        displayOrientation: *mut NativeDisplayManager_Orientation,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_GetDefaultDisplayVirtualPixelRatio(
        virtualPixels: *mut f32,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_GetDefaultDisplayRefreshRate(
        refreshRate: *mut u32,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_GetDefaultDisplayDensityDpi(
        densityDpi: *mut i32,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_GetDefaultDisplayDensityPixels(
        densityPixels: *mut f32,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_GetDefaultDisplayScaledDensity(
        scaledDensity: *mut f32,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_GetDefaultDisplayDensityXdpi(
        xDpi: *mut f32,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_GetDefaultDisplayDensityYdpi(
        yDpi: *mut f32,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_CreateDefaultDisplayCutoutInfo(
        cutoutInfo: *mut *mut NativeDisplayManager_CutoutInfo,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_DestroyDefaultDisplayCutoutInfo(
        cutoutInfo: *mut NativeDisplayManager_CutoutInfo,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_IsFoldable() -> bool;
}
extern "C" {
    pub fn OH_NativeDisplayManager_GetFoldDisplayMode(
        displayMode: *mut NativeDisplayManager_FoldDisplayMode,
    ) -> NativeDisplayManager_ErrorCode;
}
pub type OH_NativeDisplayManager_DisplayChangeCallback =
    ::std::option::Option<unsafe extern "C" fn(displayId: u64)>;
extern "C" {
    pub fn OH_NativeDisplayManager_RegisterDisplayChangeListener(
        displayChangeCallback: OH_NativeDisplayManager_DisplayChangeCallback,
        listenerIndex: *mut u32,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_UnregisterDisplayChangeListener(
        listenerIndex: u32,
    ) -> NativeDisplayManager_ErrorCode;
}
pub type OH_NativeDisplayManager_FoldDisplayModeChangeCallback =
    ::std::option::Option<unsafe extern "C" fn(displayMode: NativeDisplayManager_FoldDisplayMode)>;
extern "C" {
    pub fn OH_NativeDisplayManager_RegisterFoldDisplayModeChangeListener(
        displayModeChangeCallback: OH_NativeDisplayManager_FoldDisplayModeChangeCallback,
        listenerIndex: *mut u32,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_UnregisterFoldDisplayModeChangeListener(
        listenerIndex: u32,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_CreateAllDisplays(
        allDisplays: *mut *mut NativeDisplayManager_DisplaysInfo,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_DestroyAllDisplays(
        allDisplays: *mut NativeDisplayManager_DisplaysInfo,
    );
}
extern "C" {
    pub fn OH_NativeDisplayManager_CreateDisplayById(
        displayId: u32,
        displayInfo: *mut *mut NativeDisplayManager_DisplayInfo,
    ) -> NativeDisplayManager_ErrorCode;
}
extern "C" {
    pub fn OH_NativeDisplayManager_DestroyDisplay(
        displayInfo: *mut NativeDisplayManager_DisplayInfo,
    );
}
extern "C" {
    pub fn OH_NativeDisplayManager_CreatePrimaryDisplay(
        displayInfo: *mut *mut NativeDisplayManager_DisplayInfo,
    ) -> NativeDisplayManager_ErrorCode;
}
