/* automatically generated by rust-bindgen 0.65.1 */

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibilityElementInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibilityEventInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibilityProvider {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibilityActionArguments {
    _unused: [u8; 0],
}
pub const ArkUI_Accessibility_ActionType_ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_INVALID:
    ArkUI_Accessibility_ActionType = 0;
pub const ArkUI_Accessibility_ActionType_ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_CLICK:
    ArkUI_Accessibility_ActionType = 16;
pub const ArkUI_Accessibility_ActionType_ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_LONG_CLICK:
    ArkUI_Accessibility_ActionType = 32;
pub const ArkUI_Accessibility_ActionType_ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_GAIN_ACCESSIBILITY_FOCUS : ArkUI_Accessibility_ActionType = 64 ;
pub const ArkUI_Accessibility_ActionType_ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_CLEAR_ACCESSIBILITY_FOCUS : ArkUI_Accessibility_ActionType = 128 ;
pub const ArkUI_Accessibility_ActionType_ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_SCROLL_FORWARD:
    ArkUI_Accessibility_ActionType = 256;
pub const ArkUI_Accessibility_ActionType_ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_SCROLL_BACKWARD:
    ArkUI_Accessibility_ActionType = 512;
pub const ArkUI_Accessibility_ActionType_ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_COPY:
    ArkUI_Accessibility_ActionType = 1024;
pub const ArkUI_Accessibility_ActionType_ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_PASTE:
    ArkUI_Accessibility_ActionType = 2048;
pub const ArkUI_Accessibility_ActionType_ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_CUT:
    ArkUI_Accessibility_ActionType = 4096;
pub const ArkUI_Accessibility_ActionType_ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_SELECT_TEXT:
    ArkUI_Accessibility_ActionType = 8192;
pub const ArkUI_Accessibility_ActionType_ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_SET_TEXT:
    ArkUI_Accessibility_ActionType = 16384;
pub const ArkUI_Accessibility_ActionType_ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_SET_CURSOR_POSITION : ArkUI_Accessibility_ActionType = 1048576 ;
pub type ArkUI_Accessibility_ActionType = ::std::os::raw::c_uint;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_INVALID:
    ArkUI_AccessibilityEventType = 0;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_CLICKED:
    ArkUI_AccessibilityEventType = 1;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_LONG_CLICKED:
    ArkUI_AccessibilityEventType = 2;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_SELECTED:
    ArkUI_AccessibilityEventType = 4;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_TEXT_UPDATE:
    ArkUI_AccessibilityEventType = 16;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_PAGE_STATE_UPDATE:
    ArkUI_AccessibilityEventType = 32;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_PAGE_CONTENT_UPDATE:
    ArkUI_AccessibilityEventType = 2048;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_SCROLLED:
    ArkUI_AccessibilityEventType = 4096;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_ACCESSIBILITY_FOCUSED : ArkUI_AccessibilityEventType = 32768 ;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_ACCESSIBILITY_FOCUS_CLEARED : ArkUI_AccessibilityEventType = 65536 ;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_REQUEST_ACCESSIBILITY_FOCUS : ArkUI_AccessibilityEventType = 33554432 ;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_PAGE_OPEN:
    ArkUI_AccessibilityEventType = 536870912;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_PAGE_CLOSE:
    ArkUI_AccessibilityEventType = 134217728;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_ANNOUNCE_FOR_ACCESSIBILITY : ArkUI_AccessibilityEventType = 268435456 ;
pub const ArkUI_AccessibilityEventType_ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_FOCUS_NODE_UPDATE:
    ArkUI_AccessibilityEventType = 268435457;
pub type ArkUI_AccessibilityEventType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibleAction {
    pub actionType: ArkUI_Accessibility_ActionType,
    pub description: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibleRect {
    pub leftTopX: i32,
    pub leftTopY: i32,
    pub rightBottomX: i32,
    pub rightBottomY: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibleRangeInfo {
    pub min: f64,
    pub max: f64,
    pub current: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibleGridInfo {
    pub rowCount: i32,
    pub columnCount: i32,
    pub selectionMode: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibleGridItemInfo {
    pub heading: bool,
    pub selected: bool,
    pub columnIndex: i32,
    pub rowIndex: i32,
    pub columnSpan: i32,
    pub rowSpan: i32,
}
pub const ArkUI_AcessbilityErrorCode_ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL:
    ArkUI_AcessbilityErrorCode = 0;
pub const ArkUI_AcessbilityErrorCode_ARKUI_ACCESSIBILITY_NATIVE_RESULT_FAILED:
    ArkUI_AcessbilityErrorCode = -1;
pub const ArkUI_AcessbilityErrorCode_ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER:
    ArkUI_AcessbilityErrorCode = -2;
pub const ArkUI_AcessbilityErrorCode_ARKUI_ACCESSIBILITY_NATIVE_RESULT_OUT_OF_MEMORY:
    ArkUI_AcessbilityErrorCode = -3;
pub type ArkUI_AcessbilityErrorCode = ::std::os::raw::c_int;
pub const ArkUI_AccessibilitySearchMode_ARKUI_ACCESSIBILITY_NATIVE_SEARCH_MODE_PREFETCH_CURRENT:
    ArkUI_AccessibilitySearchMode = 0;
pub const ArkUI_AccessibilitySearchMode_ARKUI_ACCESSIBILITY_NATIVE_SEARCH_MODE_PREFETCH_PREDECESSORS : ArkUI_AccessibilitySearchMode = 1 ;
pub const ArkUI_AccessibilitySearchMode_ARKUI_ACCESSIBILITY_NATIVE_SEARCH_MODE_PREFETCH_SIBLINGS:
    ArkUI_AccessibilitySearchMode = 2;
pub const ArkUI_AccessibilitySearchMode_ARKUI_ACCESSIBILITY_NATIVE_SEARCH_MODE_PREFETCH_CHILDREN:
    ArkUI_AccessibilitySearchMode = 4;
pub const ArkUI_AccessibilitySearchMode_ARKUI_ACCESSIBILITY_NATIVE_SEARCH_MODE_PREFETCH_RECURSIVE_CHILDREN : ArkUI_AccessibilitySearchMode = 8 ;
pub type ArkUI_AccessibilitySearchMode = ::std::os::raw::c_uint;
pub const ArkUI_AccessibilityFocusType_ARKUI_ACCESSIBILITY_NATIVE_FOCUS_TYPE_INVALID:
    ArkUI_AccessibilityFocusType = -1;
pub const ArkUI_AccessibilityFocusType_ARKUI_ACCESSIBILITY_NATIVE_FOCUS_TYPE_INPUT:
    ArkUI_AccessibilityFocusType = 1;
pub const ArkUI_AccessibilityFocusType_ARKUI_ACCESSIBILITY_NATIVE_FOCUS_TYPE_ACCESSIBILITY:
    ArkUI_AccessibilityFocusType = 2;
pub type ArkUI_AccessibilityFocusType = ::std::os::raw::c_int;
pub const ArkUI_AccessibilityFocusMoveDirection_ARKUI_ACCESSIBILITY_NATIVE_DIRECTION_INVALID:
    ArkUI_AccessibilityFocusMoveDirection = 0;
pub const ArkUI_AccessibilityFocusMoveDirection_ARKUI_ACCESSIBILITY_NATIVE_DIRECTION_UP:
    ArkUI_AccessibilityFocusMoveDirection = 1;
pub const ArkUI_AccessibilityFocusMoveDirection_ARKUI_ACCESSIBILITY_NATIVE_DIRECTION_DOWN:
    ArkUI_AccessibilityFocusMoveDirection = 2;
pub const ArkUI_AccessibilityFocusMoveDirection_ARKUI_ACCESSIBILITY_NATIVE_DIRECTION_LEFT:
    ArkUI_AccessibilityFocusMoveDirection = 4;
pub const ArkUI_AccessibilityFocusMoveDirection_ARKUI_ACCESSIBILITY_NATIVE_DIRECTION_RIGHT:
    ArkUI_AccessibilityFocusMoveDirection = 8;
pub const ArkUI_AccessibilityFocusMoveDirection_ARKUI_ACCESSIBILITY_NATIVE_DIRECTION_FORWARD:
    ArkUI_AccessibilityFocusMoveDirection = 16;
pub const ArkUI_AccessibilityFocusMoveDirection_ARKUI_ACCESSIBILITY_NATIVE_DIRECTION_BACKWARD:
    ArkUI_AccessibilityFocusMoveDirection = 32;
pub type ArkUI_AccessibilityFocusMoveDirection = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibilityElementInfoList {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibilityProviderCallbacks {
    pub findAccessibilityNodeInfosById: ::std::option::Option<
        unsafe extern "C" fn(
            elementId: i64,
            mode: ArkUI_AccessibilitySearchMode,
            requestId: i32,
            elementList: *mut ArkUI_AccessibilityElementInfoList,
        ) -> i32,
    >,
    pub findAccessibilityNodeInfosByText: ::std::option::Option<
        unsafe extern "C" fn(
            elementId: i64,
            text: *const ::std::os::raw::c_char,
            requestId: i32,
            elementList: *mut ArkUI_AccessibilityElementInfoList,
        ) -> i32,
    >,
    pub findFocusedAccessibilityNode: ::std::option::Option<
        unsafe extern "C" fn(
            elementId: i64,
            focusType: ArkUI_AccessibilityFocusType,
            requestId: i32,
            elementInfo: *mut ArkUI_AccessibilityElementInfo,
        ) -> i32,
    >,
    pub findNextFocusAccessibilityNode: ::std::option::Option<
        unsafe extern "C" fn(
            elementId: i64,
            direction: ArkUI_AccessibilityFocusMoveDirection,
            requestId: i32,
            elementInfo: *mut ArkUI_AccessibilityElementInfo,
        ) -> i32,
    >,
    pub executeAccessibilityAction: ::std::option::Option<
        unsafe extern "C" fn(
            elementId: i64,
            action: ArkUI_Accessibility_ActionType,
            actionArguments: *mut ArkUI_AccessibilityActionArguments,
            requestId: i32,
        ) -> i32,
    >,
    pub clearFocusedFocusAccessibilityNode: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    pub getAccessibilityNodeCursorPosition: ::std::option::Option<
        unsafe extern "C" fn(elementId: i64, requestId: i32, index: *mut i32) -> i32,
    >,
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityProviderRegisterCallback(
        provider: *mut ArkUI_AccessibilityProvider,
        callbacks: *mut ArkUI_AccessibilityProviderCallbacks,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_SendAccessibilityAsyncEvent(
        provider: *mut ArkUI_AccessibilityProvider,
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        callback: ::std::option::Option<unsafe extern "C" fn(errorCode: i32)>,
    );
}
extern "C" {
    pub fn OH_ArkUI_AddAndGetAccessibilityElementInfo(
        list: *mut ArkUI_AccessibilityElementInfoList,
    ) -> *mut ArkUI_AccessibilityElementInfo;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetElementId(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        elementId: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetParentId(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        parentId: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetComponentType(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        componentType: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetContents(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        contents: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetHintText(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        hintText: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityText(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityText: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityDescription(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityDescription: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetChildNodeIds(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        childCount: i32,
        childNodeIds: *mut i64,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetOperationActions(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        operationCount: i32,
        operationActions: *mut ArkUI_AccessibleAction,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetScreenRect(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        screenRect: *mut ArkUI_AccessibleRect,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetCheckable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        checkable: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetChecked(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        checked: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetFocusable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        focusable: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetFocused(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isFocused: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetVisible(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isVisible: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityFocused(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityFocused: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetSelected(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        selected: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetClickable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        clickable: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetLongClickable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        longClickable: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetEnabled(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isEnabled: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetIsPassword(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isPassword: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetScrollable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        scrollable: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetEditable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        editable: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetIsHint(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isHint: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetRangeInfo(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        rangeInfo: *mut ArkUI_AccessibleRangeInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetGridInfo(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        gridInfo: *mut ArkUI_AccessibleGridInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetGridItemInfo(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        gridItem: *mut ArkUI_AccessibleGridItemInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetSelectedTextStart(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        selectedTextStart: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetSelectedTextEnd(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        selectedTextEnd: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetCurrentItemIndex(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        currentItemIndex: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetStartItemIndex(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        startItemIndex: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetEndItemIndex(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        endItemIndex: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetItemCount(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        itemCount: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityOffset(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        offset: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityGroup(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityGroup: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityLevel(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityLevel: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetZIndex(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        zIndex: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityOpacity(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        opacity: f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetBackgroundColor(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        backgroundColor: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetBackgroundImage(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        backgroundImage: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetBlur(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        blur: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityElementInfoSetHitTestBehavior(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        hitTestBehavior: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_CreateAccessibilityElementInfo() -> *mut ArkUI_AccessibilityElementInfo;
}
extern "C" {
    pub fn OH_ArkUI_DestoryAccessibilityElementInfo(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
    );
}
extern "C" {
    pub fn OH_ArkUI_CreateAccessibilityEventInfo() -> *mut ArkUI_AccessibilityEventInfo;
}
extern "C" {
    pub fn OH_ArkUI_DestoryAccessibilityEventInfo(eventInfo: *mut ArkUI_AccessibilityEventInfo);
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityEventSetEventType(
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        eventType: ArkUI_AccessibilityEventType,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityEventSetTextAnnouncedForAccessibility(
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        textAnnouncedForAccessibility: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityEventSetRequestFocusId(
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        requestFocusId: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityEventSetElementInfo(
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_FindAccessibilityActionArgumentByKey(
        arguments: *mut ArkUI_AccessibilityActionArguments,
        key: *const ::std::os::raw::c_char,
        value: *mut *mut ::std::os::raw::c_char,
    ) -> i32;
}
