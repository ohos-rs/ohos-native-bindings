/* automatically generated by rust-bindgen 0.65.1 */


#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(clippy::missing_safety_doc)]


#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_DrawableDescriptor {
    _unused: [u8; 0],
}
#[doc = " @brief Introduces the native pixel map information defined by Image Kit.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_PixelmapNative {
    _unused: [u8; 0],
}
#[doc = " @brief Defines the pointer to OH_PixelmapNative.\n\n @since 12"]
pub type OH_PixelmapNativeHandle = *mut OH_PixelmapNative;
extern "C" {
    #[doc = " @brief Creates a DrawableDescriptor from a Pixelmap.\n\n @param pixelMap Indicates the pointer to a Pixelmap\n @return Returns the pointer to the drawableDescriptor.\n @since 12"]
    pub fn OH_ArkUI_DrawableDescriptor_CreateFromPixelMap(
        pixelMap: OH_PixelmapNativeHandle,
    ) -> *mut ArkUI_DrawableDescriptor;
}
extern "C" {
    #[doc = " @brief Creates a DrawableDescriptor from a Pixelmap array.\n\n @param array Indicates the pointer to a Pixelmap array.\n @param size Indicates the size of the Pixelmap array.\n @return Returns the pointer to the drawableDescriptor.\n @since 12"]
    pub fn OH_ArkUI_DrawableDescriptor_CreateFromAnimatedPixelMap(
        array: *mut OH_PixelmapNativeHandle,
        size: i32,
    ) -> *mut ArkUI_DrawableDescriptor;
}
extern "C" {
    #[doc = " @brief Destroys the pointer to the drawableDescriptor.\n\n @param drawableDescriptor Indicates the pointer to the drawableDescriptor.\n @since 12"]
    pub fn OH_ArkUI_DrawableDescriptor_Dispose(drawableDescriptor: *mut ArkUI_DrawableDescriptor);
}
extern "C" {
    #[doc = " @brief Obtains the Pixelmap object.\n\n @param drawableDescriptor Indicates the pointer to the drawableDescriptor.\n @return Returns the pointer to the PixelMap.\n @since 12"]
    pub fn OH_ArkUI_DrawableDescriptor_GetStaticPixelMap(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> OH_PixelmapNativeHandle;
}
extern "C" {
    #[doc = " @brief Obtains the Pixelmap array used to play the animation.\n\n @param drawableDescriptor Indicates the pointer to the drawableDescriptor.\n @return Returns the pointer to the PixelMap array.\n @since 12"]
    pub fn OH_ArkUI_DrawableDescriptor_GetAnimatedPixelMapArray(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> *mut OH_PixelmapNativeHandle;
}
extern "C" {
    #[doc = " @brief Obtains the size of the Pixelmap array used to play the animation.\n\n @param drawableDescriptor Indicates the pointer to the drawableDescriptor.\n @return Returns the size of the Pixelmap array.\n @since 12"]
    pub fn OH_ArkUI_DrawableDescriptor_GetAnimatedPixelMapArraySize(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Sets the total playback duration.\n\n @param drawableDescriptor Indicates the pointer to the drawableDescriptor.\n @param duration Indicates the total playback duration. The unit is millisecond.\n @since 12"]
    pub fn OH_ArkUI_DrawableDescriptor_SetAnimationDuration(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
        duration: i32,
    );
}
extern "C" {
    #[doc = " @brief Obtains the total playback duration.\n\n @param drawableDescriptor Indicates the pointer to the drawableDescriptor.\n @return Return the total playback duration. The unit is millisecond.\n @since 12"]
    pub fn OH_ArkUI_DrawableDescriptor_GetAnimationDuration(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Sets the number of playback times.\n\n @param drawableDescriptor Indicates the pointer to the drawableDescriptor.\n @param iterations Indicates the number of playback times.\n @since 12"]
    pub fn OH_ArkUI_DrawableDescriptor_SetAnimationIteration(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
        iteration: i32,
    );
}
extern "C" {
    #[doc = " @brief Obtains the number of playback times.\n\n @param drawableDescriptor Indicates the pointer to the drawableDescriptor.\n @return Returns the number of playback times.\n @since 12"]
    pub fn OH_ArkUI_DrawableDescriptor_GetAnimationIteration(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> i32;
}
#[doc = " @brief Defines the ArkUI native component object.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_Node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_NodeContent {
    _unused: [u8; 0],
}
#[doc = " @brief Defines the pointer type of the ArkUI node content\n\n @since 12"]
pub type ArkUI_NodeContentHandle = *mut ArkUI_NodeContent;
#[doc = " @brief Defines the custom dialog box controller of ArkUI on the native side.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_NativeDialog {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_LayoutConstraint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_DrawContext {
    _unused: [u8; 0],
}
#[doc = " @brief Defines the pointer to the ArkUI native component object.\n\n @since 12"]
pub type ArkUI_NodeHandle = *mut ArkUI_Node;
#[doc = " @brief Defines the pointer to the custom dialog box controller of ArkUI on the native side.\n\n @since 12"]
pub type ArkUI_NativeDialogHandle = *mut ArkUI_NativeDialog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_WaterFlowSectionOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ListItemSwipeActionItem {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ListItemSwipeActionOption {
    _unused: [u8; 0],
}
#[doc = " @brief Defines the ArkUI native context object.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_Context {
    _unused: [u8; 0],
}
#[doc = " @brief Defines the pointer to the context instance object pointer definition of ArkUI on the native side.\n\n @since 12"]
pub type ArkUI_ContextHandle = *mut ArkUI_Context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_SwiperIndicator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_StyledString_Descriptor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AlignmentRuleOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_GuidelineOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_BarrierOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ListChildrenMainSize {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ImageAnimatorFrameInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibilityState {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibilityValue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_CustomProperty {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_HostWindowInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ActiveChildrenInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ProgressLinearStyleOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_CrossLanguageOption {
    _unused: [u8; 0],
}
#[doc = " @brief Defines the event callback type.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ContextCallback {
    #[doc = " Custom type."]
    pub userData: *mut ::std::os::raw::c_void,
    #[doc = " Event callback."]
    pub callback:
        ::std::option::Option<unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void)>,
}
#[doc = " @brief Provides the number types of ArkUI in the native code.\n\n @since 12"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union ArkUI_NumberValue {
    #[doc = " Floating-point type."]
    pub f32_: f32,
    #[doc = " Signed integer."]
    pub i32_: i32,
    #[doc = " Unsigned integer."]
    pub u32_: u32,
}
#[doc = " Top start."]
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_TOP_START: ArkUI_Alignment = 0;
#[doc = " Top center."]
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_TOP: ArkUI_Alignment = 1;
#[doc = " Top end."]
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_TOP_END: ArkUI_Alignment = 2;
#[doc = " Vertically centered start."]
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_START: ArkUI_Alignment = 3;
#[doc = " Horizontally and vertically centered."]
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_CENTER: ArkUI_Alignment = 4;
#[doc = " Vertically centered end."]
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_END: ArkUI_Alignment = 5;
#[doc = " Bottom start."]
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_BOTTOM_START: ArkUI_Alignment = 6;
#[doc = " Horizontally centered on the bottom."]
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_BOTTOM: ArkUI_Alignment = 7;
#[doc = " Bottom end."]
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_BOTTOM_END: ArkUI_Alignment = 8;
#[doc = " @brief Enumerates the alignment modes.\n\n @since 12"]
pub type ArkUI_Alignment = ::std::os::raw::c_uint;
#[doc = " The image is not repeatedly drawn."]
pub const ArkUI_ImageRepeat_ARKUI_IMAGE_REPEAT_NONE: ArkUI_ImageRepeat = 0;
#[doc = " The image is repeatedly drawn only along the x-axis."]
pub const ArkUI_ImageRepeat_ARKUI_IMAGE_REPEAT_X: ArkUI_ImageRepeat = 1;
#[doc = " The image is repeatedly drawn only along the y-axis."]
pub const ArkUI_ImageRepeat_ARKUI_IMAGE_REPEAT_Y: ArkUI_ImageRepeat = 2;
#[doc = " The image is repeatedly drawn along both axes."]
pub const ArkUI_ImageRepeat_ARKUI_IMAGE_REPEAT_XY: ArkUI_ImageRepeat = 3;
#[doc = " @brief Enumerates the image repeat patterns.\n\n @since 12"]
pub type ArkUI_ImageRepeat = ::std::os::raw::c_uint;
#[doc = " Standard font style."]
pub const ArkUI_FontStyle_ARKUI_FONT_STYLE_NORMAL: ArkUI_FontStyle = 0;
#[doc = " Italic font style."]
pub const ArkUI_FontStyle_ARKUI_FONT_STYLE_ITALIC: ArkUI_FontStyle = 1;
#[doc = " @brief Enumerates the font styles.\n\n @since 12"]
pub type ArkUI_FontStyle = ::std::os::raw::c_uint;
#[doc = " 100"]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W100: ArkUI_FontWeight = 0;
#[doc = " 200"]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W200: ArkUI_FontWeight = 1;
#[doc = " 300"]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W300: ArkUI_FontWeight = 2;
#[doc = " 400"]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W400: ArkUI_FontWeight = 3;
#[doc = " 500"]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W500: ArkUI_FontWeight = 4;
#[doc = " 600"]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W600: ArkUI_FontWeight = 5;
#[doc = " 700"]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W700: ArkUI_FontWeight = 6;
#[doc = " 800"]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W800: ArkUI_FontWeight = 7;
#[doc = " 900"]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W900: ArkUI_FontWeight = 8;
#[doc = " The font weight is bold."]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_BOLD: ArkUI_FontWeight = 9;
#[doc = " The font weight is normal."]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_NORMAL: ArkUI_FontWeight = 10;
#[doc = " The font weight is bolder."]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_BOLDER: ArkUI_FontWeight = 11;
#[doc = " The font weight is lighter."]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_LIGHTER: ArkUI_FontWeight = 12;
#[doc = " The font weight is medium."]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_MEDIUM: ArkUI_FontWeight = 13;
#[doc = " The font weight is normal."]
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_REGULAR: ArkUI_FontWeight = 14;
#[doc = " @brief Enumerates the font weights.\n\n @since 12"]
pub type ArkUI_FontWeight = ::std::os::raw::c_uint;
#[doc = " Aligned with the start."]
pub const ArkUI_TextAlignment_ARKUI_TEXT_ALIGNMENT_START: ArkUI_TextAlignment = 0;
#[doc = " Horizontally centered."]
pub const ArkUI_TextAlignment_ARKUI_TEXT_ALIGNMENT_CENTER: ArkUI_TextAlignment = 1;
#[doc = " Aligned with the end."]
pub const ArkUI_TextAlignment_ARKUI_TEXT_ALIGNMENT_END: ArkUI_TextAlignment = 2;
#[doc = " Aligned with both margins."]
pub const ArkUI_TextAlignment_ARKUI_TEXT_ALIGNMENT_JUSTIFY: ArkUI_TextAlignment = 3;
#[doc = " @brief Enumerates the text alignment mode.\n\n @since 12"]
pub type ArkUI_TextAlignment = ::std::os::raw::c_uint;
#[doc = " The Enter key is labeled \"Go.\""]
pub const ArkUI_EnterKeyType_ARKUI_ENTER_KEY_TYPE_GO: ArkUI_EnterKeyType = 2;
#[doc = " The Enter key is labeled \"Search.\""]
pub const ArkUI_EnterKeyType_ARKUI_ENTER_KEY_TYPE_SEARCH: ArkUI_EnterKeyType = 3;
#[doc = " The Enter key is labeled \"Send.\""]
pub const ArkUI_EnterKeyType_ARKUI_ENTER_KEY_TYPE_SEND: ArkUI_EnterKeyType = 4;
#[doc = " The Enter key is labeled \"Next.\""]
pub const ArkUI_EnterKeyType_ARKUI_ENTER_KEY_TYPE_NEXT: ArkUI_EnterKeyType = 5;
#[doc = " The Enter key is labeled \"Done.\""]
pub const ArkUI_EnterKeyType_ARKUI_ENTER_KEY_TYPE_DONE: ArkUI_EnterKeyType = 6;
#[doc = " The Enter key is labeled \"Previous.\""]
pub const ArkUI_EnterKeyType_ARKUI_ENTER_KEY_TYPE_PREVIOUS: ArkUI_EnterKeyType = 7;
#[doc = " The Enter key is labeled \"New Line.\""]
pub const ArkUI_EnterKeyType_ARKUI_ENTER_KEY_TYPE_NEW_LINE: ArkUI_EnterKeyType = 8;
#[doc = " @brief Enumerates the types of the Enter key for a single-line text box.\n\n @since 12"]
pub type ArkUI_EnterKeyType = ::std::os::raw::c_uint;
#[doc = " Normal input mode."]
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_NORMAL: ArkUI_TextInputType = 0;
#[doc = " Number input mode."]
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_NUMBER: ArkUI_TextInputType = 2;
#[doc = " Phone number input mode."]
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_PHONE_NUMBER: ArkUI_TextInputType = 3;
#[doc = " Email address input mode."]
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_EMAIL: ArkUI_TextInputType = 5;
#[doc = " Password input mode."]
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_PASSWORD: ArkUI_TextInputType = 7;
#[doc = " Numeric password input mode."]
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_NUMBER_PASSWORD: ArkUI_TextInputType = 8;
#[doc = " Lock screen password input mode."]
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_SCREEN_LOCK_PASSWORD: ArkUI_TextInputType = 9;
#[doc = " Username input mode."]
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_USER_NAME: ArkUI_TextInputType = 10;
#[doc = " New password input mode."]
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_NEW_PASSWORD: ArkUI_TextInputType = 11;
#[doc = " Number input mode with a decimal point."]
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_NUMBER_DECIMAL: ArkUI_TextInputType = 12;
#[doc = " @brief Enumerates the text input types.\n\n @since 12"]
pub type ArkUI_TextInputType = ::std::os::raw::c_uint;
#[doc = " Normal input mode."]
pub const ArkUI_TextAreaType_ARKUI_TEXTAREA_TYPE_NORMAL: ArkUI_TextAreaType = 0;
#[doc = " Number input mode."]
pub const ArkUI_TextAreaType_ARKUI_TEXTAREA_TYPE_NUMBER: ArkUI_TextAreaType = 2;
#[doc = " Phone number input mode."]
pub const ArkUI_TextAreaType_ARKUI_TEXTAREA_TYPE_PHONE_NUMBER: ArkUI_TextAreaType = 3;
#[doc = " Email address input mode."]
pub const ArkUI_TextAreaType_ARKUI_TEXTAREA_TYPE_EMAIL: ArkUI_TextAreaType = 5;
#[doc = " @brief Enumerates the text box types.\n\n @since 12"]
pub type ArkUI_TextAreaType = ::std::os::raw::c_uint;
#[doc = " The Cancel button is always displayed."]
pub const ArkUI_CancelButtonStyle_ARKUI_CANCELBUTTON_STYLE_CONSTANT: ArkUI_CancelButtonStyle = 0;
#[doc = " The Cancel button is always hidden."]
pub const ArkUI_CancelButtonStyle_ARKUI_CANCELBUTTON_STYLE_INVISIBLE: ArkUI_CancelButtonStyle = 1;
#[doc = " The Cancel button is displayed when there is text input."]
pub const ArkUI_CancelButtonStyle_ARKUI_CANCELBUTTON_STYLE_INPUT: ArkUI_CancelButtonStyle = 2;
#[doc = " @brief Enumerates the styles of the Cancel button.\n\n @since 12"]
pub type ArkUI_CancelButtonStyle = ::std::os::raw::c_uint;
#[doc = " The custom content of EGL/OpenGL ES and media data is displayed individually on the screen."]
pub const ArkUI_XComponentType_ARKUI_XCOMPONENT_TYPE_SURFACE: ArkUI_XComponentType = 0;
#[doc = " The custom content of EGL/OpenGL ES and media data is grouped and displayed together with content\n of the component."]
pub const ArkUI_XComponentType_ARKUI_XCOMPONENT_TYPE_TEXTURE: ArkUI_XComponentType = 2;
#[doc = " @brief Enumerates the types of the <b><XComponent></b> component.\n\n @since 12"]
pub type ArkUI_XComponentType = ::std::os::raw::c_uint;
#[doc = " Linear style."]
pub const ArkUI_ProgressType_ARKUI_PROGRESS_TYPE_LINEAR: ArkUI_ProgressType = 0;
#[doc = " Indeterminate ring style."]
pub const ArkUI_ProgressType_ARKUI_PROGRESS_TYPE_RING: ArkUI_ProgressType = 1;
#[doc = " Eclipse style."]
pub const ArkUI_ProgressType_ARKUI_PROGRESS_TYPE_ECLIPSE: ArkUI_ProgressType = 2;
#[doc = " Determinate ring style."]
pub const ArkUI_ProgressType_ARKUI_PROGRESS_TYPE_SCALE_RING: ArkUI_ProgressType = 3;
#[doc = " Capsule style."]
pub const ArkUI_ProgressType_ARKUI_PROGRESS_TYPE_CAPSULE: ArkUI_ProgressType = 4;
#[doc = " @brief Enumerates the styles of the progress indicator.\n\n @since 12"]
pub type ArkUI_ProgressType = ::std::os::raw::c_uint;
#[doc = " No text decoration."]
pub const ArkUI_TextDecorationType_ARKUI_TEXT_DECORATION_TYPE_NONE: ArkUI_TextDecorationType = 0;
#[doc = " Line under the text."]
pub const ArkUI_TextDecorationType_ARKUI_TEXT_DECORATION_TYPE_UNDERLINE: ArkUI_TextDecorationType =
    1;
#[doc = " Line over the text."]
pub const ArkUI_TextDecorationType_ARKUI_TEXT_DECORATION_TYPE_OVERLINE: ArkUI_TextDecorationType =
    2;
#[doc = " Line through the text."]
pub const ArkUI_TextDecorationType_ARKUI_TEXT_DECORATION_TYPE_LINE_THROUGH:
    ArkUI_TextDecorationType = 3;
#[doc = " @brief Enumerates the text decoration types.\n\n @since 12"]
pub type ArkUI_TextDecorationType = ::std::os::raw::c_uint;
#[doc = " Single solid line."]
pub const ArkUI_TextDecorationStyle_ARKUI_TEXT_DECORATION_STYLE_SOLID: ArkUI_TextDecorationStyle =
    0;
#[doc = " Double solid line."]
pub const ArkUI_TextDecorationStyle_ARKUI_TEXT_DECORATION_STYLE_DOUBLE: ArkUI_TextDecorationStyle =
    1;
#[doc = " Dotted line."]
pub const ArkUI_TextDecorationStyle_ARKUI_TEXT_DECORATION_STYLE_DOTTED: ArkUI_TextDecorationStyle =
    2;
#[doc = " Dashed line."]
pub const ArkUI_TextDecorationStyle_ARKUI_TEXT_DECORATION_STYLE_DASHED: ArkUI_TextDecorationStyle =
    3;
#[doc = " Wavy line."]
pub const ArkUI_TextDecorationStyle_ARKUI_TEXT_DECORATION_STYLE_WAVY: ArkUI_TextDecorationStyle = 4;
#[doc = " @brief Enumerates the text decoration styles.\n\n @since 12"]
pub type ArkUI_TextDecorationStyle = ::std::os::raw::c_uint;
#[doc = " The original case of the text is retained."]
pub const ArkUI_TextCase_ARKUI_TEXT_CASE_NORMAL: ArkUI_TextCase = 0;
#[doc = " All letters in the text are in lowercase."]
pub const ArkUI_TextCase_ARKUI_TEXT_CASE_LOWER: ArkUI_TextCase = 1;
#[doc = " All letters in the text are in uppercase."]
pub const ArkUI_TextCase_ARKUI_TEXT_CASE_UPPER: ArkUI_TextCase = 2;
#[doc = " @brief Enumerates the text cases.\n\n @since 12"]
pub type ArkUI_TextCase = ::std::os::raw::c_uint;
#[doc = " Copy is not allowed."]
pub const ArkUI_CopyOptions_ARKUI_COPY_OPTIONS_NONE: ArkUI_CopyOptions = 0;
#[doc = " Intra-application copy is allowed."]
pub const ArkUI_CopyOptions_ARKUI_COPY_OPTIONS_IN_APP: ArkUI_CopyOptions = 1;
#[doc = " Intra-device copy is allowed."]
pub const ArkUI_CopyOptions_ARKUI_COPY_OPTIONS_LOCAL_DEVICE: ArkUI_CopyOptions = 2;
#[doc = " Cross-device copy is allowed."]
pub const ArkUI_CopyOptions_ARKUI_COPY_OPTIONS_CROSS_DEVICE: ArkUI_CopyOptions = 3;
#[doc = " @brief Enumerates the text copy and paste modes.\n\n @since 12"]
pub type ArkUI_CopyOptions = ::std::os::raw::c_uint;
#[doc = " Color."]
pub const ArkUI_ShadowType_ARKUI_SHADOW_TYPE_COLOR: ArkUI_ShadowType = 0;
#[doc = " Blur."]
pub const ArkUI_ShadowType_ARKUI_SHADOW_TYPE_BLUR: ArkUI_ShadowType = 1;
#[doc = " @brief Enumerates the shadow types.\n\n @since 12"]
pub type ArkUI_ShadowType = ::std::os::raw::c_uint;
#[doc = " Single-column text picker."]
pub const ArkUI_TextPickerRangeType_ARKUI_TEXTPICKER_RANGETYPE_SINGLE: ArkUI_TextPickerRangeType =
    0;
#[doc = " Multi-column text picker."]
pub const ArkUI_TextPickerRangeType_ARKUI_TEXTPICKER_RANGETYPE_MULTI: ArkUI_TextPickerRangeType = 1;
#[doc = " Single-column text picker with image resources."]
pub const ArkUI_TextPickerRangeType_ARKUI_TEXTPICKER_RANGETYPE_RANGE_CONTENT:
    ArkUI_TextPickerRangeType = 2;
#[doc = " Interconnected multi-column text picker."]
pub const ArkUI_TextPickerRangeType_ARKUI_TEXTPICKER_RANGETYPE_CASCADE_RANGE_CONTENT:
    ArkUI_TextPickerRangeType = 3;
#[doc = " @brief Enumerates the types of the text picker.\n\n @since 12"]
pub type ArkUI_TextPickerRangeType = ::std::os::raw::c_uint;
#[doc = " @brief Defines the input structure of the single-column text picker with image resources.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ARKUI_TextPickerRangeContent {
    #[doc = " Image resource."]
    pub icon: *const ::std::os::raw::c_char,
    #[doc = " Text information."]
    pub text: *const ::std::os::raw::c_char,
}
#[doc = " @brief Defines the input structure of the interconnected multi-column text picker.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ARKUI_TextPickerCascadeRangeContent {
    #[doc = " Text information."]
    pub text: *const ::std::os::raw::c_char,
    #[doc = " Interconnected data."]
    pub children: *const ARKUI_TextPickerRangeContent,
    #[doc = " Size of the interconnected data array."]
    pub size: i32,
}
#[doc = " Spring effect. When at one of the edges, the component can move beyond the bounds based on the initial\n  speed or through touches, and produces a bounce effect when the user releases their finger."]
pub const ArkUI_EdgeEffect_ARKUI_EDGE_EFFECT_SPRING: ArkUI_EdgeEffect = 0;
#[doc = " Fade effect. When at one of the edges, the component produces a fade effect."]
pub const ArkUI_EdgeEffect_ARKUI_EDGE_EFFECT_FADE: ArkUI_EdgeEffect = 1;
#[doc = " No effect after the scrollbar is moved to the edge."]
pub const ArkUI_EdgeEffect_ARKUI_EDGE_EFFECT_NONE: ArkUI_EdgeEffect = 2;
#[doc = " @brief Enumerates the effects used at the edges of the component when the boundary of the scrollable content is\n reached.\n\n @since 12"]
pub type ArkUI_EdgeEffect = ::std::os::raw::c_uint;
#[doc = " Only vertical scrolling is supported."]
pub const ArkUI_ScrollDirection_ARKUI_SCROLL_DIRECTION_VERTICAL: ArkUI_ScrollDirection = 0;
#[doc = " Only horizontal scrolling is supported."]
pub const ArkUI_ScrollDirection_ARKUI_SCROLL_DIRECTION_HORIZONTAL: ArkUI_ScrollDirection = 1;
#[doc = " Scrolling is not allowed."]
pub const ArkUI_ScrollDirection_ARKUI_SCROLL_DIRECTION_NONE: ArkUI_ScrollDirection = 3;
#[doc = " @brief Enumerates the scroll directions for the <b><Scroll></b> component.\n\n @since 12"]
pub type ArkUI_ScrollDirection = ::std::os::raw::c_uint;
#[doc = " No alignment. This is the default value."]
pub const ArkUI_ScrollSnapAlign_ARKUI_SCROLL_SNAP_ALIGN_NONE: ArkUI_ScrollSnapAlign = 0;
#[doc = " The first item in the view is aligned at the start of the list."]
pub const ArkUI_ScrollSnapAlign_ARKUI_SCROLL_SNAP_ALIGN_START: ArkUI_ScrollSnapAlign = 1;
#[doc = " The middle items in the view are aligned in the center of the list."]
pub const ArkUI_ScrollSnapAlign_ARKUI_SCROLL_SNAP_ALIGN_CENTER: ArkUI_ScrollSnapAlign = 2;
#[doc = " The last item in the view is aligned at the end of the list."]
pub const ArkUI_ScrollSnapAlign_ARKUI_SCROLL_SNAP_ALIGN_END: ArkUI_ScrollSnapAlign = 3;
#[doc = " @brief Enumerates the alignment modes of list items when scrolling ends.\n\n @since 12"]
pub type ArkUI_ScrollSnapAlign = ::std::os::raw::c_uint;
#[doc = " Hide."]
pub const ArkUI_ScrollBarDisplayMode_ARKUI_SCROLL_BAR_DISPLAY_MODE_OFF: ArkUI_ScrollBarDisplayMode =
    0;
#[doc = " Display on demand (displays when the screen is touched and disappears after 2s)."]
pub const ArkUI_ScrollBarDisplayMode_ARKUI_SCROLL_BAR_DISPLAY_MODE_AUTO:
    ArkUI_ScrollBarDisplayMode = 1;
#[doc = " Always display."]
pub const ArkUI_ScrollBarDisplayMode_ARKUI_SCROLL_BAR_DISPLAY_MODE_ON: ArkUI_ScrollBarDisplayMode =
    2;
#[doc = " @brief Enumerates the scrollbar display modes.\n\n @since 12"]
pub type ArkUI_ScrollBarDisplayMode = ::std::os::raw::c_uint;
#[doc = " Only vertical scrolling is supported."]
pub const ArkUI_Axis_ARKUI_AXIS_VERTICAL: ArkUI_Axis = 0;
#[doc = " Only horizontal scrolling is supported."]
pub const ArkUI_Axis_ARKUI_AXIS_HORIZONTAL: ArkUI_Axis = 1;
#[doc = " @brief Enumerates the scroll directions for the <b><List></b> component.\n\n @since 12"]
pub type ArkUI_Axis = ::std::os::raw::c_uint;
#[doc = " In the list item group, the header is not pinned to the top, and the footer is not pinned to the bottom."]
pub const ArkUI_StickyStyle_ARKUI_STICKY_STYLE_NONE: ArkUI_StickyStyle = 0;
#[doc = " In the list item group, the header is pinned to the top, and the footer is not pinned to the bottom."]
pub const ArkUI_StickyStyle_ARKUI_STICKY_STYLE_HEADER: ArkUI_StickyStyle = 1;
#[doc = " In the list item group, the footer is pinned to the bottom, and the header is not pinned to the top."]
pub const ArkUI_StickyStyle_ARKUI_STICKY_STYLE_FOOTER: ArkUI_StickyStyle = 2;
#[doc = " In the list item group, the footer is pinned to the bottom, and the header is pinned to the top."]
pub const ArkUI_StickyStyle_ARKUI_STICKY_STYLE_BOTH: ArkUI_StickyStyle = 3;
#[doc = " @brief Enumerates the modes for pinning the header to the top or the footer to the bottom.\n\n @since 12"]
pub type ArkUI_StickyStyle = ::std::os::raw::c_uint;
#[doc = " Solid border."]
pub const ArkUI_BorderStyle_ARKUI_BORDER_STYLE_SOLID: ArkUI_BorderStyle = 0;
#[doc = " Dashed border."]
pub const ArkUI_BorderStyle_ARKUI_BORDER_STYLE_DASHED: ArkUI_BorderStyle = 1;
#[doc = " Dotted border."]
pub const ArkUI_BorderStyle_ARKUI_BORDER_STYLE_DOTTED: ArkUI_BorderStyle = 2;
#[doc = " @brief Enumerates the border styles.\n\n @since 12"]
pub type ArkUI_BorderStyle = ::std::os::raw::c_uint;
#[doc = " Both the node and its child node respond to the hit test of a touch event, but its sibling node is blocked from\n  the hit test."]
pub const ArkUI_HitTestMode_ARKUI_HIT_TEST_MODE_DEFAULT: ArkUI_HitTestMode = 0;
#[doc = " The node responds to the hit test of a touch event, but its child node and sibling node are blocked from the\n  hit test."]
pub const ArkUI_HitTestMode_ARKUI_HIT_TEST_MODE_BLOCK: ArkUI_HitTestMode = 1;
#[doc = " Both the node and its child node respond to the hit test of a touch event, and its sibling node is also\n considered during the hit test."]
pub const ArkUI_HitTestMode_ARKUI_HIT_TEST_MODE_TRANSPARENT: ArkUI_HitTestMode = 2;
#[doc = " The node does not respond to the hit test of a touch event."]
pub const ArkUI_HitTestMode_ARKUI_HIT_TEST_MODE_NONE: ArkUI_HitTestMode = 3;
#[doc = " @brief Enumerates the hit test modes.\n\n @since 12"]
pub type ArkUI_HitTestMode = ::std::os::raw::c_uint;
#[doc = " Mini shadow."]
pub const ArkUI_ShadowStyle_ARKUI_SHADOW_STYLE_OUTER_DEFAULT_XS: ArkUI_ShadowStyle = 0;
#[doc = " Little shadow."]
pub const ArkUI_ShadowStyle_ARKUI_SHADOW_STYLE_OUTER_DEFAULT_SM: ArkUI_ShadowStyle = 1;
#[doc = " Medium shadow."]
pub const ArkUI_ShadowStyle_ARKUI_SHADOW_STYLE_OUTER_DEFAULT_MD: ArkUI_ShadowStyle = 2;
#[doc = " Large shadow."]
pub const ArkUI_ShadowStyle_ARKUI_SHADOW_STYLE_OUTER_DEFAULT_LG: ArkUI_ShadowStyle = 3;
#[doc = " Floating small shadow."]
pub const ArkUI_ShadowStyle_ARKUI_SHADOW_STYLE_OUTER_FLOATING_SM: ArkUI_ShadowStyle = 4;
#[doc = " Floating medium shadow."]
pub const ArkUI_ShadowStyle_ARKUI_SHADOW_STYLE_OUTER_FLOATING_MD: ArkUI_ShadowStyle = 5;
#[doc = " @brief Enumerates the shadow styles.\n\n @since 12"]
pub type ArkUI_ShadowStyle = ::std::os::raw::c_uint;
#[doc = " The animation speed keeps unchanged."]
pub const ArkUI_AnimationCurve_ARKUI_CURVE_LINEAR: ArkUI_AnimationCurve = 0;
#[doc = " The animation starts slowly, accelerates, and then slows down towards the end."]
pub const ArkUI_AnimationCurve_ARKUI_CURVE_EASE: ArkUI_AnimationCurve = 1;
#[doc = " The animation starts at a low speed and then picks up speed until the end."]
pub const ArkUI_AnimationCurve_ARKUI_CURVE_EASE_IN: ArkUI_AnimationCurve = 2;
#[doc = " The animation ends at a low speed."]
pub const ArkUI_AnimationCurve_ARKUI_CURVE_EASE_OUT: ArkUI_AnimationCurve = 3;
#[doc = " The animation starts and ends at a low speed."]
pub const ArkUI_AnimationCurve_ARKUI_CURVE_EASE_IN_OUT: ArkUI_AnimationCurve = 4;
#[doc = " The animation uses the standard curve"]
pub const ArkUI_AnimationCurve_ARKUI_CURVE_FAST_OUT_SLOW_IN: ArkUI_AnimationCurve = 5;
#[doc = " The animation uses the deceleration curve."]
pub const ArkUI_AnimationCurve_ARKUI_CURVE_LINEAR_OUT_SLOW_IN: ArkUI_AnimationCurve = 6;
#[doc = " The animation uses the acceleration curve."]
pub const ArkUI_AnimationCurve_ARKUI_CURVE_FAST_OUT_LINEAR_IN: ArkUI_AnimationCurve = 7;
#[doc = " The animation uses the extreme deceleration curve."]
pub const ArkUI_AnimationCurve_ARKUI_CURVE_EXTREME_DECELERATION: ArkUI_AnimationCurve = 8;
#[doc = " The animation uses the sharp curve."]
pub const ArkUI_AnimationCurve_ARKUI_CURVE_SHARP: ArkUI_AnimationCurve = 9;
#[doc = " The animation uses the rhythm curve."]
pub const ArkUI_AnimationCurve_ARKUI_CURVE_RHYTHM: ArkUI_AnimationCurve = 10;
#[doc = " The animation uses the smooth curve."]
pub const ArkUI_AnimationCurve_ARKUI_CURVE_SMOOTH: ArkUI_AnimationCurve = 11;
#[doc = " The animation uses the friction curve"]
pub const ArkUI_AnimationCurve_ARKUI_CURVE_FRICTION: ArkUI_AnimationCurve = 12;
#[doc = " @brief Enumerates the animation curves.\n\n @since 12"]
pub type ArkUI_AnimationCurve = ::std::os::raw::c_uint;
#[doc = " The arrow is not displayed for the navigation point indicator."]
pub const ArkUI_SwiperArrow_ARKUI_SWIPER_ARROW_HIDE: ArkUI_SwiperArrow = 0;
#[doc = " The arrow is displayed for the navigation point indicator."]
pub const ArkUI_SwiperArrow_ARKUI_SWIPER_ARROW_SHOW: ArkUI_SwiperArrow = 1;
#[doc = " The arrow is displayed only when the mouse pointer hovers over the navigation point indicator."]
pub const ArkUI_SwiperArrow_ARKUI_SWIPER_ARROW_SHOW_ON_HOVER: ArkUI_SwiperArrow = 2;
#[doc = " @brief Enumerates arrow styles of the navigation point indicator.\n\n @since 12"]
pub type ArkUI_SwiperArrow = ::std::os::raw::c_uint;
#[doc = " Swiper only scrolls on its own and is not linked to its parent component."]
pub const ArkUI_SwiperNestedScrollMode_ARKUI_SWIPER_NESTED_SRCOLL_SELF_ONLY:
    ArkUI_SwiperNestedScrollMode = 0;
#[doc = " The Swiper itself scrolls first, and the parent component scrolls after it reaches the edge. After the parent\n component scrolls to the edge, if the parent component has an edge effect, the parent component triggers the edge\n effect; otherwise, the Swiper triggers the edge effect."]
pub const ArkUI_SwiperNestedScrollMode_ARKUI_SWIPER_NESTED_SRCOLL_SELF_FIRST:
    ArkUI_SwiperNestedScrollMode = 1;
#[doc = " @brief Nested scrolling mode for Swiper components and parent components.\n\n @since 12"]
pub type ArkUI_SwiperNestedScrollMode = ::std::os::raw::c_uint;
#[doc = " When the mouse wheel is scrolled continuously, multiple pages are flipped, which is determined by the number of\n  times that mouse events are reported."]
pub const ArkUI_PageFlipMode_ARKUI_PAGE_FLIP_MODE_CONTINUOUS: ArkUI_PageFlipMode = 0;
#[doc = " The system does not respond to other mouse wheel events until the page flipping animation ends."]
pub const ArkUI_PageFlipMode_ARKUI_PAGE_FLIP_MODE_SINGLE: ArkUI_PageFlipMode = 1;
#[doc = " @brief Enumerates the page flipping modes using the mouse wheel for the <b>Swiper</b> component.\n\n @since 15"]
pub type ArkUI_PageFlipMode = ::std::os::raw::c_uint;
#[doc = " Jump to target index without animation."]
pub const ArkUI_SwiperAnimationMode_ARKUI_SWIPER_NO_ANIMATION: ArkUI_SwiperAnimationMode = 0;
#[doc = " Scroll to target index with animation."]
pub const ArkUI_SwiperAnimationMode_ARKUI_SWIPER_DEFAULT_ANIMATION: ArkUI_SwiperAnimationMode = 1;
#[doc = " Jump to some index near the target index without animation, then scroll to target index with animation."]
pub const ArkUI_SwiperAnimationMode_ARKUI_SWIPER_FAST_ANIMATION: ArkUI_SwiperAnimationMode = 2;
#[doc = " @brief Enumerates the animation modes for {@link NODE_SWIPER_INDEX}.\n\n @since 15"]
pub type ArkUI_SwiperAnimationMode = ::std::os::raw::c_uint;
#[doc = " Whether the component can be identified by the accessibility service is dependent on the component."]
pub const ArkUI_AccessibilityMode_ARKUI_ACCESSIBILITY_MODE_AUTO: ArkUI_AccessibilityMode = 0;
#[doc = " The component can be identified by the accessibility service."]
pub const ArkUI_AccessibilityMode_ARKUI_ACCESSIBILITY_MODE_ENABLED: ArkUI_AccessibilityMode = 1;
#[doc = " The component cannot be identified by the accessibility service."]
pub const ArkUI_AccessibilityMode_ARKUI_ACCESSIBILITY_MODE_DISABLED: ArkUI_AccessibilityMode = 2;
#[doc = " The component and all its child components cannot be identified by the accessibility service."]
pub const ArkUI_AccessibilityMode_ARKUI_ACCESSIBILITY_MODE_DISABLED_FOR_DESCENDANTS:
    ArkUI_AccessibilityMode = 3;
#[doc = " @brief Enumerates the accessibility modes.\n\n @since 12"]
pub type ArkUI_AccessibilityMode = ::std::os::raw::c_uint;
#[doc = " Copy is not allowed."]
pub const ArkUI_TextCopyOptions_ARKUI_TEXT_COPY_OPTIONS_NONE: ArkUI_TextCopyOptions = 0;
#[doc = " Intra-application copy is allowed."]
pub const ArkUI_TextCopyOptions_ARKUI_TEXT_COPY_OPTIONS_IN_APP: ArkUI_TextCopyOptions = 1;
#[doc = " Intra-device copy is allowed."]
pub const ArkUI_TextCopyOptions_ARKUI_TEXT_COPY_OPTIONS_LOCAL_DEVICE: ArkUI_TextCopyOptions = 2;
#[doc = " Cross-device copy is allowed."]
pub const ArkUI_TextCopyOptions_ARKUI_TEXT_COPY_OPTIONS_CROSS_DEVICE: ArkUI_TextCopyOptions = 3;
#[doc = " @brief Defines whether copy and paste is allowed for text content.\n\n @since 12"]
pub type ArkUI_TextCopyOptions = ::std::os::raw::c_uint;
#[doc = " Prioritize the <b>maxLines</b> settings."]
pub const ArkUI_TextHeightAdaptivePolicy_ARKUI_TEXT_HEIGHT_ADAPTIVE_POLICY_MAX_LINES_FIRST:
    ArkUI_TextHeightAdaptivePolicy = 0;
#[doc = " Prioritize the <b>minFontSize</b> settings."]
pub const ArkUI_TextHeightAdaptivePolicy_ARKUI_TEXT_HEIGHT_ADAPTIVE_POLICY_MIN_FONT_SIZE_FIRST:
    ArkUI_TextHeightAdaptivePolicy = 1;
#[doc = " Prioritize the layout constraint settings in terms of height."]
pub const ArkUI_TextHeightAdaptivePolicy_ARKUI_TEXT_HEIGHT_ADAPTIVE_POLICY_LAYOUT_CONSTRAINT_FIRST : ArkUI_TextHeightAdaptivePolicy = 2 ;
#[doc = " @brief Defines how the adaptive height is determined for the text.\n\n @since 12"]
pub type ArkUI_TextHeightAdaptivePolicy = ::std::os::raw::c_uint;
#[doc = " The scrolling is contained within the component, and no scroll chaining occurs, that is, the parent component\n does not scroll when the component scrolling reaches the boundary."]
pub const ArkUI_ScrollNestedMode_ARKUI_SCROLL_NESTED_MODE_SELF_ONLY: ArkUI_ScrollNestedMode = 0;
#[doc = " The component scrolls first, and when it hits the boundary, the parent component scrolls.\n  When the parent component hits the boundary, its edge effect is displayed. If no edge\n  effect is specified for the parent component, the edge effect of the child component is displayed instead."]
pub const ArkUI_ScrollNestedMode_ARKUI_SCROLL_NESTED_MODE_SELF_FIRST: ArkUI_ScrollNestedMode = 1;
#[doc = " The parent component scrolls first, and when it hits the boundary, the component scrolls.\n  When the component hits the boundary, its edge effect is displayed. If no edge effect is specified for the\n  component, the edge effect of the parent component is displayed instead."]
pub const ArkUI_ScrollNestedMode_ARKUI_SCROLL_NESTED_MODE_PARENT_FIRST: ArkUI_ScrollNestedMode = 2;
#[doc = " The component and its parent component scroll at the same time. When both the component and its parent component\n  hit the boundary, the edge effect of the component is displayed. If no edge effect is specified for the\n  component, the edge effect of the parent component is displayed instead."]
pub const ArkUI_ScrollNestedMode_ARKUI_SCROLL_NESTED_MODE_PARALLEL: ArkUI_ScrollNestedMode = 3;
#[doc = " @brief Defines nested scrolling options.\n\n @since 12"]
pub type ArkUI_ScrollNestedMode = ::std::os::raw::c_uint;
#[doc = " Top edge in the vertical direction."]
pub const ArkUI_ScrollEdge_ARKUI_SCROLL_EDGE_TOP: ArkUI_ScrollEdge = 0;
#[doc = " Bottom edge in the vertical direction."]
pub const ArkUI_ScrollEdge_ARKUI_SCROLL_EDGE_BOTTOM: ArkUI_ScrollEdge = 1;
#[doc = " Start position in the horizontal direction."]
pub const ArkUI_ScrollEdge_ARKUI_SCROLL_EDGE_START: ArkUI_ScrollEdge = 2;
#[doc = " End position in the horizontal direction."]
pub const ArkUI_ScrollEdge_ARKUI_SCROLL_EDGE_END: ArkUI_ScrollEdge = 3;
#[doc = " @brief Defines the edge to which the component scrolls.\n\n @since 12"]
pub type ArkUI_ScrollEdge = ::std::os::raw::c_uint;
#[doc = " Align the head. Align the head of the specified item with the head of the container."]
pub const ArkUI_ScrollAlignment_ARKUI_SCROLL_ALIGNMENT_START: ArkUI_ScrollAlignment = 0;
#[doc = " Center alignment. Align the axis direction of the specified item to the center of the container."]
pub const ArkUI_ScrollAlignment_ARKUI_SCROLL_ALIGNMENT_CENTER: ArkUI_ScrollAlignment = 1;
#[doc = " Tail alignment. Align the tail of the specified item with the tail of the container."]
pub const ArkUI_ScrollAlignment_ARKUI_SCROLL_ALIGNMENT_END: ArkUI_ScrollAlignment = 2;
#[doc = " Automatic alignment. If the specified item is completely in the display area, no adjustments will be made.\n Otherwise, according to the principle of the shortest sliding distance, align the head or tail of the specified\n item with the container, so that the specified item is completely in the display area."]
pub const ArkUI_ScrollAlignment_ARKUI_SCROLL_ALIGNMENT_AUTO: ArkUI_ScrollAlignment = 3;
#[doc = " @brief Alignment when scrolling to specific items.\n\n @since 12"]
pub type ArkUI_ScrollAlignment = ::std::os::raw::c_uint;
#[doc = " Idle state. Trigger when using the method provided by the controller to control scrolling, and trigger when\n dragging the scroll bar to scroll."]
pub const ArkUI_ScrollState_ARKUI_SCROLL_STATE_IDLE: ArkUI_ScrollState = 0;
#[doc = " Scroll state. Triggered when dragging the container with fingers to scroll."]
pub const ArkUI_ScrollState_ARKUI_SCROLL_STATE_SCROLL: ArkUI_ScrollState = 1;
#[doc = " Inertial rolling state. Triggered when inertia rolling and bouncing back to the edge are performed after\n releasing the hand quickly."]
pub const ArkUI_ScrollState_ARKUI_SCROLL_STATE_FLING: ArkUI_ScrollState = 2;
#[doc = " @brief Define the current scrolling state.\n\n @since 12"]
pub type ArkUI_ScrollState = ::std::os::raw::c_uint;
#[doc = " Round slider."]
pub const ArkUI_SliderBlockStyle_ARKUI_SLIDER_BLOCK_STYLE_DEFAULT: ArkUI_SliderBlockStyle = 0;
#[doc = " Slider with an image background."]
pub const ArkUI_SliderBlockStyle_ARKUI_SLIDER_BLOCK_STYLE_IMAGE: ArkUI_SliderBlockStyle = 1;
#[doc = " Slider in a custom shape."]
pub const ArkUI_SliderBlockStyle_ARKUI_SLIDER_BLOCK_STYLE_SHAPE: ArkUI_SliderBlockStyle = 2;
#[doc = " @brief Enumerates the types of the slider in the block direction.\n\n @since 12"]
pub type ArkUI_SliderBlockStyle = ::std::os::raw::c_uint;
#[doc = " Vertical direction."]
pub const ArkUI_SliderDirection_ARKUI_SLIDER_DIRECTION_VERTICAL: ArkUI_SliderDirection = 0;
#[doc = " Horizontal direction."]
pub const ArkUI_SliderDirection_ARKUI_SLIDER_DIRECTION_HORIZONTAL: ArkUI_SliderDirection = 1;
#[doc = " @brief Enumerates the scroll directions of the slider.\n\n @since 12"]
pub type ArkUI_SliderDirection = ::std::os::raw::c_uint;
#[doc = " The slider is on the slider track."]
pub const ArkUI_SliderStyle_ARKUI_SLIDER_STYLE_OUT_SET: ArkUI_SliderStyle = 0;
#[doc = " The slider is in the slider track."]
pub const ArkUI_SliderStyle_ARKUI_SLIDER_STYLE_IN_SET: ArkUI_SliderStyle = 1;
#[doc = " No slider."]
pub const ArkUI_SliderStyle_ARKUI_SLIDER_STYLE_NONE: ArkUI_SliderStyle = 2;
#[doc = " @brief Enumerates the slider styles.\n\n @since 12"]
pub type ArkUI_SliderStyle = ::std::os::raw::c_uint;
#[doc = " Circle."]
pub const ArkUI_CheckboxShape_ArkUI_CHECKBOX_SHAPE_CIRCLE: ArkUI_CheckboxShape = 0;
#[doc = " Rounded square."]
pub const ArkUI_CheckboxShape_ArkUI_CHECKBOX_SHAPE_ROUNDED_SQUARE: ArkUI_CheckboxShape = 1;
#[doc = " @brief Enumerates the shapes of the check box\n\n @since 12"]
pub type ArkUI_CheckboxShape = ::std::os::raw::c_uint;
#[doc = " The animation is played forwards."]
pub const ArkUI_AnimationPlayMode_ARKUI_ANIMATION_PLAY_MODE_NORMAL: ArkUI_AnimationPlayMode = 0;
#[doc = " The animation is played reversely."]
pub const ArkUI_AnimationPlayMode_ARKUI_ANIMATION_PLAY_MODE_REVERSE: ArkUI_AnimationPlayMode = 1;
#[doc = " The animation is played normally for an odd number of times (1, 3, 5...) and reversely for an even number\n  of times (2, 4, 6...)."]
pub const ArkUI_AnimationPlayMode_ARKUI_ANIMATION_PLAY_MODE_ALTERNATE: ArkUI_AnimationPlayMode = 2;
#[doc = " The animation is played reversely for an odd number of times (1, 3, 5...) and normally for an even number\n  of times (2, 4, 6...)."]
pub const ArkUI_AnimationPlayMode_ARKUI_ANIMATION_PLAY_MODE_ALTERNATE_REVERSE:
    ArkUI_AnimationPlayMode = 3;
#[doc = " @brief Enumerates the animation playback modes.\n\n @since 12"]
pub type ArkUI_AnimationPlayMode = ::std::os::raw::c_uint;
#[doc = " The original image aspect ratio is retained."]
pub const ArkUI_ImageSize_ARKUI_IMAGE_SIZE_AUTO: ArkUI_ImageSize = 0;
#[doc = " Default value. The image is scaled with its aspect ratio retained for both sides to be greater than or equal\n  to the display boundaries."]
pub const ArkUI_ImageSize_ARKUI_IMAGE_SIZE_COVER: ArkUI_ImageSize = 1;
#[doc = " The image is scaled with its aspect ratio retained for the content to be completely displayed within the display\n  boundaries."]
pub const ArkUI_ImageSize_ARKUI_IMAGE_SIZE_CONTAIN: ArkUI_ImageSize = 2;
#[doc = " @brief Defines the image size.\n\n @since 12"]
pub type ArkUI_ImageSize = ::std::os::raw::c_uint;
#[doc = " Adaptive color mode is not used."]
pub const ArkUI_AdaptiveColor_ARKUI_ADAPTIVE_COLOR_DEFAULT: ArkUI_AdaptiveColor = 0;
#[doc = " Adaptive color mode is used."]
pub const ArkUI_AdaptiveColor_ARKUI_ADAPTIVE_COLOR_AVERAGE: ArkUI_AdaptiveColor = 1;
#[doc = " @brief Enumerates the adaptive color modes.\n\n @since 12"]
pub type ArkUI_AdaptiveColor = ::std::os::raw::c_uint;
#[doc = " Following the system color mode."]
pub const ArkUI_ColorMode_ARKUI_COLOR_MODE_SYSTEM: ArkUI_ColorMode = 0;
#[doc = " Light color mode."]
pub const ArkUI_ColorMode_ARKUI_COLOR_MODE_LIGHT: ArkUI_ColorMode = 1;
#[doc = " Dark color mode."]
pub const ArkUI_ColorMode_ARKUI_COLOR_MODE_DARK: ArkUI_ColorMode = 2;
#[doc = " @brief Enumerates the color modes.\n\n @since 12"]
pub type ArkUI_ColorMode = ::std::os::raw::c_uint;
#[doc = " Light color mode."]
pub const ArkUI_SystemColorMode_ARKUI_SYSTEM_COLOR_MODE_LIGHT: ArkUI_SystemColorMode = 0;
#[doc = " Dark color mode."]
pub const ArkUI_SystemColorMode_ARKUI_SYSTEM_COLOR_MODE_DARK: ArkUI_SystemColorMode = 1;
#[doc = " @brief Enumerates the system color modes.\n\n @since 12"]
pub type ArkUI_SystemColorMode = ::std::os::raw::c_uint;
#[doc = " Thin material."]
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_THIN: ArkUI_BlurStyle = 0;
#[doc = " Regular material."]
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_REGULAR: ArkUI_BlurStyle = 1;
#[doc = " Thick material."]
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_THICK: ArkUI_BlurStyle = 2;
#[doc = " Material that creates the minimum depth of field effect."]
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_BACKGROUND_THIN: ArkUI_BlurStyle = 3;
#[doc = " Material that creates a medium shallow depth of field effect."]
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_BACKGROUND_REGULAR: ArkUI_BlurStyle = 4;
#[doc = " Material that creates a high shallow depth of field effect."]
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_BACKGROUND_THICK: ArkUI_BlurStyle = 5;
#[doc = " Material that creates the maximum depth of field effect."]
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_BACKGROUND_ULTRA_THICK: ArkUI_BlurStyle = 6;
#[doc = " No blur."]
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_NONE: ArkUI_BlurStyle = 7;
#[doc = " Component ultra-thin material."]
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_COMPONENT_ULTRA_THIN: ArkUI_BlurStyle = 8;
#[doc = " Component thin material."]
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_COMPONENT_THIN: ArkUI_BlurStyle = 9;
#[doc = " Component regular material."]
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_COMPONENT_REGULAR: ArkUI_BlurStyle = 10;
#[doc = " Component thick material."]
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_COMPONENT_THICK: ArkUI_BlurStyle = 11;
#[doc = " Component ultra-thick material."]
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_COMPONENT_ULTRA_THICK: ArkUI_BlurStyle = 12;
#[doc = " @brief Enumerates the blur styles.\n\n @since 12"]
pub type ArkUI_BlurStyle = ::std::os::raw::c_uint;
#[doc = " Top aligned."]
pub const ArkUI_VerticalAlignment_ARKUI_VERTICAL_ALIGNMENT_TOP: ArkUI_VerticalAlignment = 0;
#[doc = " Center aligned. This is the default alignment mode."]
pub const ArkUI_VerticalAlignment_ARKUI_VERTICAL_ALIGNMENT_CENTER: ArkUI_VerticalAlignment = 1;
#[doc = " Bottom aligned."]
pub const ArkUI_VerticalAlignment_ARKUI_VERTICAL_ALIGNMENT_BOTTOM: ArkUI_VerticalAlignment = 2;
#[doc = " @brief Enumerates the vertical alignment modes.\n\n @since 12"]
pub type ArkUI_VerticalAlignment = ::std::os::raw::c_uint;
#[doc = " Aligned with the start edge in the same direction as the language in use."]
pub const ArkUI_HorizontalAlignment_ARKUI_HORIZONTAL_ALIGNMENT_START: ArkUI_HorizontalAlignment = 0;
#[doc = " Center aligned. This is the default alignment mode."]
pub const ArkUI_HorizontalAlignment_ARKUI_HORIZONTAL_ALIGNMENT_CENTER: ArkUI_HorizontalAlignment =
    1;
#[doc = " Aligned with the end edge in the same direction as the language in use."]
pub const ArkUI_HorizontalAlignment_ARKUI_HORIZONTAL_ALIGNMENT_END: ArkUI_HorizontalAlignment = 2;
#[doc = " @brief Enumerates the alignment mode in the horizontal direction.\n\n @since 12"]
pub type ArkUI_HorizontalAlignment = ::std::os::raw::c_uint;
#[doc = " Extra-long text is not clipped."]
pub const ArkUI_TextOverflow_ARKUI_TEXT_OVERFLOW_NONE: ArkUI_TextOverflow = 0;
#[doc = " Extra-long text is clipped."]
pub const ArkUI_TextOverflow_ARKUI_TEXT_OVERFLOW_CLIP: ArkUI_TextOverflow = 1;
#[doc = " An ellipsis (...) is used to represent text overflow."]
pub const ArkUI_TextOverflow_ARKUI_TEXT_OVERFLOW_ELLIPSIS: ArkUI_TextOverflow = 2;
#[doc = " Text continuously scrolls when text overflow occurs."]
pub const ArkUI_TextOverflow_ARKUI_TEXT_OVERFLOW_MARQUEE: ArkUI_TextOverflow = 3;
#[doc = " @brief Enumerates the display modes when the text is too long.\n\n @since 12"]
pub type ArkUI_TextOverflow = ::std::os::raw::c_uint;
#[doc = " The image is bottom aligned with the text baseline."]
pub const ArkUI_ImageSpanAlignment_ARKUI_IMAGE_SPAN_ALIGNMENT_BASELINE: ArkUI_ImageSpanAlignment =
    0;
#[doc = " The image is bottom aligned with the text."]
pub const ArkUI_ImageSpanAlignment_ARKUI_IMAGE_SPAN_ALIGNMENT_BOTTOM: ArkUI_ImageSpanAlignment = 1;
#[doc = " The image is centered aligned with the text."]
pub const ArkUI_ImageSpanAlignment_ARKUI_IMAGE_SPAN_ALIGNMENT_CENTER: ArkUI_ImageSpanAlignment = 2;
#[doc = " The image is top aligned with the text."]
pub const ArkUI_ImageSpanAlignment_ARKUI_IMAGE_SPAN_ALIGNMENT_TOP: ArkUI_ImageSpanAlignment = 3;
#[doc = " @brief Enumerates the alignment mode of the image with the text.\n\n @since 12"]
pub type ArkUI_ImageSpanAlignment = ::std::os::raw::c_uint;
#[doc = " The image is scaled with its aspect ratio retained for the content to be completely displayed within the\n  display boundaries."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_CONTAIN: ArkUI_ObjectFit = 0;
#[doc = " The image is scaled with its aspect ratio retained for both sides to be greater than or equal to the\n  display boundaries."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_COVER: ArkUI_ObjectFit = 1;
#[doc = " The image is scaled automatically to fit the display area."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_AUTO: ArkUI_ObjectFit = 2;
#[doc = " The image is scaled to fill the display area, and its aspect ratio is not retained."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_FILL: ArkUI_ObjectFit = 3;
#[doc = " The image content is displayed with its aspect ratio retained. The size is smaller than or equal to the\n  original size."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_SCALE_DOWN: ArkUI_ObjectFit = 4;
#[doc = " The original size is retained."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE: ArkUI_ObjectFit = 5;
#[doc = " Not resized, the image is aligned with the start edge of the top of the container."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_TOP_START: ArkUI_ObjectFit = 6;
#[doc = " Not resized, the image is horizontally centered at the top of the container."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_TOP: ArkUI_ObjectFit = 7;
#[doc = " Not resized, the image is aligned with the end edge at the top of the container."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_TOP_END: ArkUI_ObjectFit = 8;
#[doc = " Not resized, the image is vertically centered on the start edge of the container."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_START: ArkUI_ObjectFit = 9;
#[doc = " Not resized, the image is horizontally and vertically centered in the container."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_CENTER: ArkUI_ObjectFit = 10;
#[doc = " Not resized, the image is vertically centered on the end edge of the container."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_END: ArkUI_ObjectFit = 11;
#[doc = " Not resized, the image is aligned with the start edge at the bottom of the container."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_BOTTOM_START: ArkUI_ObjectFit = 12;
#[doc = " Not resized, the image is horizontally centered at the bottom of the container."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_BOTTOM: ArkUI_ObjectFit = 13;
#[doc = " Not resized, the image is aligned with the end edge at the bottom of the container."]
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_BOTTOM_END: ArkUI_ObjectFit = 14;
#[doc = " @brief Defines how the image is resized to fit its container.\nImageSpanAlignment\n @since 12"]
pub type ArkUI_ObjectFit = ::std::os::raw::c_uint;
#[doc = " No image interpolation."]
pub const ArkUI_ImageInterpolation_ARKUI_IMAGE_INTERPOLATION_NONE: ArkUI_ImageInterpolation = 0;
#[doc = " Low quality interpolation."]
pub const ArkUI_ImageInterpolation_ARKUI_IMAGE_INTERPOLATION_LOW: ArkUI_ImageInterpolation = 1;
#[doc = " Medium quality interpolation."]
pub const ArkUI_ImageInterpolation_ARKUI_IMAGE_INTERPOLATION_MEDIUM: ArkUI_ImageInterpolation = 2;
#[doc = " High quality interpolation. This mode produces scaled images of the highest possible quality."]
pub const ArkUI_ImageInterpolation_ARKUI_IMAGE_INTERPOLATION_HIGH: ArkUI_ImageInterpolation = 3;
#[doc = " @brief Enumerates the image interpolation effect.\n\n @since 12"]
pub type ArkUI_ImageInterpolation = ::std::os::raw::c_uint;
#[doc = " The top image is superimposed on the bottom image without any blending."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_NONE: ArkUI_BlendMode = 0;
#[doc = " The target pixels covered by the source pixels are erased by being turned to completely transparent."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_CLEAR: ArkUI_BlendMode = 1;
#[doc = " r = s: Only the source pixels are displayed."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SRC: ArkUI_BlendMode = 2;
#[doc = " r = d: Only the target pixels are displayed."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_DST: ArkUI_BlendMode = 3;
#[doc = " r = s + (1 - sa) * d: The source pixels are blended based on opacity and cover the target pixels."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SRC_OVER: ArkUI_BlendMode = 4;
#[doc = " r = d + (1 - da) * s: The target pixels are blended based on opacity and cover on the source pixels."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_DST_OVER: ArkUI_BlendMode = 5;
#[doc = " r = s * da: Only the part of the source pixels that overlap with the target pixels is displayed."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SRC_IN: ArkUI_BlendMode = 6;
#[doc = " r = d * sa: Only the part of the target pixels that overlap with the source pixels is displayed."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_DST_IN: ArkUI_BlendMode = 7;
#[doc = " r = s * (1 - da): Only the part of the source pixels that do not overlap with the target pixels is displayed."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SRC_OUT: ArkUI_BlendMode = 8;
#[doc = " r = d * (1 - sa): Only the part of the target pixels that do not overlap with the source pixels is displayed."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_DST_OUT: ArkUI_BlendMode = 9;
#[doc = " r = s * da + d * (1 - sa): The part of the source pixels that overlap with the target pixels is displayed and\n  the part of the target pixels that do not overlap with the source pixels are displayed."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SRC_ATOP: ArkUI_BlendMode = 10;
#[doc = " r = d * sa + s * (1 - da): The part of the target pixels that overlap with the source pixels and the part of\n  the source pixels that do not overlap with the target pixels are displayed."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_DST_ATOP: ArkUI_BlendMode = 11;
#[doc = " r = s * (1 - da) + d * (1 - sa): Only the non-overlapping part between the source pixels and the target pixels\n is displayed."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_XOR: ArkUI_BlendMode = 12;
#[doc = " r = min(s + d, 1): New pixels resulting from adding the source pixels to the target pixels are displayed."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_PLUS: ArkUI_BlendMode = 13;
#[doc = " r = s * d: New pixels resulting from multiplying the source pixels with the target pixels are displayed."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_MODULATE: ArkUI_BlendMode = 14;
#[doc = " r = s + d - s * d: Pixels are blended by adding the source pixels to the target pixels and subtracting the\n  product of their multiplication."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SCREEN: ArkUI_BlendMode = 15;
#[doc = " The MULTIPLY or SCREEN mode is used based on the target pixels."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_OVERLAY: ArkUI_BlendMode = 16;
#[doc = " rc = s + d - max(s * da, d * sa), ra = kSrcOver: When two colors overlap, whichever is darker is used."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_DARKEN: ArkUI_BlendMode = 17;
#[doc = " rc = s + d - min(s * da, d * sa), ra =\nkSrcOver: The final pixels are composed of the lightest values of pixels."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_LIGHTEN: ArkUI_BlendMode = 18;
#[doc = " The colors of the target pixels are lightened to reflect the source pixels."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_COLOR_DODGE: ArkUI_BlendMode = 19;
#[doc = " The colors of the target pixels are darkened to reflect the source pixels."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_COLOR_BURN: ArkUI_BlendMode = 20;
#[doc = " The MULTIPLY or SCREEN mode is used, depending on the source pixels."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_HARD_LIGHT: ArkUI_BlendMode = 21;
#[doc = " The LIGHTEN or DARKEN mode is used, depending on the source pixels."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SOFT_LIGHT: ArkUI_BlendMode = 22;
#[doc = " rc = s + d - 2 * (min(s * da, d * sa)), ra =\nkSrcOver: The final pixel is the result of subtracting the darker of the two pixels (source and target) from\nthe lighter one."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_DIFFERENCE: ArkUI_BlendMode = 23;
#[doc = " rc = s + d - two(s * d), ra = kSrcOver: The final pixel is similar to <b>DIFFERENCE</b>, but with less contrast."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_EXCLUSION: ArkUI_BlendMode = 24;
#[doc = " r = s * (1 - da) + d * (1 - sa) + s * d: The final pixel is the result of multiplying the source pixel\n  by the target pixel."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_MULTIPLY: ArkUI_BlendMode = 25;
#[doc = " The resultant image is created with the luminance and saturation of the source image and the hue of the target\n  image."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_HUE: ArkUI_BlendMode = 26;
#[doc = " The resultant image is created with the luminance and hue of the target image and the saturation of the source\n  image."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SATURATION: ArkUI_BlendMode = 27;
#[doc = " The resultant image is created with the saturation and hue of the source image and the luminance of the target\n  image."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_COLOR: ArkUI_BlendMode = 28;
#[doc = " The resultant image is created with the saturation and hue of the target image and the luminance of the source\n  image."]
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_LUMINOSITY: ArkUI_BlendMode = 29;
#[doc = " @brief Enumerates the blend modes.\n\n @since 12"]
pub type ArkUI_BlendMode = ::std::os::raw::c_uint;
#[doc = " Components are arranged from left to right."]
pub const ArkUI_Direction_ARKUI_DIRECTION_LTR: ArkUI_Direction = 0;
#[doc = " Components are arranged from right to left."]
pub const ArkUI_Direction_ARKUI_DIRECTION_RTL: ArkUI_Direction = 1;
#[doc = " The default layout direction is used."]
pub const ArkUI_Direction_ARKUI_DIRECTION_AUTO: ArkUI_Direction = 3;
#[doc = " @brief Enumerates the modes in which components are laid out along the main axis of the container.\n\n @since 12"]
pub type ArkUI_Direction = ::std::os::raw::c_uint;
#[doc = " The default configuration in the container is used."]
pub const ArkUI_ItemAlignment_ARKUI_ITEM_ALIGNMENT_AUTO: ArkUI_ItemAlignment = 0;
#[doc = " The items in the container are aligned with the cross-start edge."]
pub const ArkUI_ItemAlignment_ARKUI_ITEM_ALIGNMENT_START: ArkUI_ItemAlignment = 1;
#[doc = " The items in the container are centered along the cross axis."]
pub const ArkUI_ItemAlignment_ARKUI_ITEM_ALIGNMENT_CENTER: ArkUI_ItemAlignment = 2;
#[doc = " The items in the container are aligned with the cross-end edge."]
pub const ArkUI_ItemAlignment_ARKUI_ITEM_ALIGNMENT_END: ArkUI_ItemAlignment = 3;
#[doc = " The items in the container are stretched and padded along the cross axis."]
pub const ArkUI_ItemAlignment_ARKUI_ITEM_ALIGNMENT_STRETCH: ArkUI_ItemAlignment = 4;
#[doc = " The items in the container are aligned in such a manner that their text baselines are aligned along the\n  cross axis."]
pub const ArkUI_ItemAlignment_ARKUI_ITEM_ALIGNMENT_BASELINE: ArkUI_ItemAlignment = 5;
#[doc = " @brief Enumerates the modes in which components are laid out along the cross axis of the container.\n\n @since 12"]
pub type ArkUI_ItemAlignment = ::std::os::raw::c_uint;
#[doc = " The foreground colors are the inverse of the component background colors."]
pub const ArkUI_ColorStrategy_ARKUI_COLOR_STRATEGY_INVERT: ArkUI_ColorStrategy = 0;
#[doc = " The shadow colors of the component are the average color obtained from the component background shadow area."]
pub const ArkUI_ColorStrategy_ARKUI_COLOR_STRATEGY_AVERAGE: ArkUI_ColorStrategy = 1;
#[doc = " The shadow colors of the component are the primary color obtained from the component background shadow area."]
pub const ArkUI_ColorStrategy_ARKUI_COLOR_STRATEGY_PRIMARY: ArkUI_ColorStrategy = 2;
#[doc = " @brief Enumerates the foreground colors.\n\n @since 12"]
pub type ArkUI_ColorStrategy = ::std::os::raw::c_uint;
#[doc = " The child components are aligned with the start edge of the main axis."]
pub const ArkUI_FlexAlignment_ARKUI_FLEX_ALIGNMENT_START: ArkUI_FlexAlignment = 1;
#[doc = " The child components are aligned in the center of the main axis."]
pub const ArkUI_FlexAlignment_ARKUI_FLEX_ALIGNMENT_CENTER: ArkUI_FlexAlignment = 2;
#[doc = " The child components are aligned with the end edge of the main axis."]
pub const ArkUI_FlexAlignment_ARKUI_FLEX_ALIGNMENT_END: ArkUI_FlexAlignment = 3;
#[doc = " The child components are evenly distributed along the main axis. The space between any two adjacent components\n  is the same. The first component is aligned with the main-start, and the last component is aligned with\n  the main-end."]
pub const ArkUI_FlexAlignment_ARKUI_FLEX_ALIGNMENT_SPACE_BETWEEN: ArkUI_FlexAlignment = 6;
#[doc = " The child components are evenly distributed along the main axis. The space between any two adjacent components\n  is the same. The space between the first component and main-start, and that between the last component and\n  cross-main are both half the size of the space between two adjacent components."]
pub const ArkUI_FlexAlignment_ARKUI_FLEX_ALIGNMENT_SPACE_AROUND: ArkUI_FlexAlignment = 7;
#[doc = " The child components are evenly distributed along the main axis. The space between the first component\n  and main-start, the space between the last component and main-end, and the space between any two adjacent\n  components are the same."]
pub const ArkUI_FlexAlignment_ARKUI_FLEX_ALIGNMENT_SPACE_EVENLY: ArkUI_FlexAlignment = 8;
#[doc = " @brief Enumerates the vertical alignment modes.\n\n @since 12"]
pub type ArkUI_FlexAlignment = ::std::os::raw::c_uint;
#[doc = " The child components are arranged in the same direction as the main axis runs along the rows."]
pub const ArkUI_FlexDirection_ARKUI_FLEX_DIRECTION_ROW: ArkUI_FlexDirection = 0;
#[doc = " The child components are arranged in the same direction as the main axis runs down the columns."]
pub const ArkUI_FlexDirection_ARKUI_FLEX_DIRECTION_COLUMN: ArkUI_FlexDirection = 1;
#[doc = " The child components are arranged opposite to the <b>ROW</b> direction."]
pub const ArkUI_FlexDirection_ARKUI_FLEX_DIRECTION_ROW_REVERSE: ArkUI_FlexDirection = 2;
#[doc = " The child components are arranged opposite to the <b>COLUMN</b> direction."]
pub const ArkUI_FlexDirection_ARKUI_FLEX_DIRECTION_COLUMN_REVERSE: ArkUI_FlexDirection = 3;
#[doc = " @brief Enumerates the directions of the main axis in the flex container.\n\n @since 12"]
pub type ArkUI_FlexDirection = ::std::os::raw::c_uint;
#[doc = " The child components in the flex container are arranged in a single line, and they cannot overflow."]
pub const ArkUI_FlexWrap_ARKUI_FLEX_WRAP_NO_WRAP: ArkUI_FlexWrap = 0;
#[doc = " The child components in the flex container are arranged in multiple lines, and they may overflow."]
pub const ArkUI_FlexWrap_ARKUI_FLEX_WRAP_WRAP: ArkUI_FlexWrap = 1;
#[doc = " The child components in the flex container are reversely arranged in multiple lines, and they may overflow."]
pub const ArkUI_FlexWrap_ARKUI_FLEX_WRAP_WRAP_REVERSE: ArkUI_FlexWrap = 2;
#[doc = " @brief Defines whether the flex container has a single line or multiple lines.\n\n @since 12"]
pub type ArkUI_FlexWrap = ::std::os::raw::c_uint;
#[doc = " The component is visible."]
pub const ArkUI_Visibility_ARKUI_VISIBILITY_VISIBLE: ArkUI_Visibility = 0;
#[doc = " The component is hidden, and a placeholder is used for it in the layout."]
pub const ArkUI_Visibility_ARKUI_VISIBILITY_HIDDEN: ArkUI_Visibility = 1;
#[doc = " The component is hidden. It is not involved in the layout, and no placeholder is used for it."]
pub const ArkUI_Visibility_ARKUI_VISIBILITY_NONE: ArkUI_Visibility = 2;
#[doc = " @brief Enumerates the visibility values.\n\n @since 12"]
pub type ArkUI_Visibility = ::std::os::raw::c_uint;
#[doc = " Left aligned."]
pub const ArkUI_CalendarAlignment_ARKUI_CALENDAR_ALIGNMENT_START: ArkUI_CalendarAlignment = 0;
#[doc = " Center aligned."]
pub const ArkUI_CalendarAlignment_ARKUI_CALENDAR_ALIGNMENT_CENTER: ArkUI_CalendarAlignment = 1;
#[doc = " Right aligned."]
pub const ArkUI_CalendarAlignment_ARKUI_CALENDAR_ALIGNMENT_END: ArkUI_CalendarAlignment = 2;
#[doc = " @brief Enumerates the alignment modes between the calendar picker and the entry component.\n\n @since 12"]
pub type ArkUI_CalendarAlignment = ::std::os::raw::c_uint;
#[doc = " Rectangle."]
pub const ArkUI_MaskType_ARKUI_MASK_TYPE_RECTANGLE: ArkUI_MaskType = 0;
#[doc = " Circle."]
pub const ArkUI_MaskType_ARKUI_MASK_TYPE_CIRCLE: ArkUI_MaskType = 1;
#[doc = " Ellipse."]
pub const ArkUI_MaskType_ARKUI_MASK_TYPE_ELLIPSE: ArkUI_MaskType = 2;
#[doc = " Path."]
pub const ArkUI_MaskType_ARKUI_MASK_TYPE_PATH: ArkUI_MaskType = 3;
#[doc = " Progress indicator."]
pub const ArkUI_MaskType_ARKUI_MASK_TYPE_PROGRESS: ArkUI_MaskType = 4;
#[doc = " @brief Enumerates the mask types.\n\n @since 12"]
pub type ArkUI_MaskType = ::std::os::raw::c_uint;
#[doc = " Rectangle."]
pub const ArkUI_ClipType_ARKUI_CLIP_TYPE_RECTANGLE: ArkUI_ClipType = 0;
#[doc = " Circle."]
pub const ArkUI_ClipType_ARKUI_CLIP_TYPE_CIRCLE: ArkUI_ClipType = 1;
#[doc = " Ellipse."]
pub const ArkUI_ClipType_ARKUI_CLIP_TYPE_ELLIPSE: ArkUI_ClipType = 2;
#[doc = " Path."]
pub const ArkUI_ClipType_ARKUI_CLIP_TYPE_PATH: ArkUI_ClipType = 3;
#[doc = " @brief Enumerates the clipping region types.\n\n @since 12"]
pub type ArkUI_ClipType = ::std::os::raw::c_uint;
#[doc = " @brief Defines the gradient color stop structure.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ColorStop {
    #[doc = " Color array."]
    pub colors: *const u32,
    #[doc = " Position array."]
    pub stops: *mut f32,
    #[doc = " Length array."]
    pub size: ::std::os::raw::c_int,
}
#[doc = " Rectangle."]
pub const ArkUI_ShapeType_ARKUI_SHAPE_TYPE_RECTANGLE: ArkUI_ShapeType = 0;
#[doc = " Circle."]
pub const ArkUI_ShapeType_ARKUI_SHAPE_TYPE_CIRCLE: ArkUI_ShapeType = 1;
#[doc = " Ellipse."]
pub const ArkUI_ShapeType_ARKUI_SHAPE_TYPE_ELLIPSE: ArkUI_ShapeType = 2;
#[doc = " Path."]
pub const ArkUI_ShapeType_ARKUI_SHAPE_TYPE_PATH: ArkUI_ShapeType = 3;
#[doc = " @brief Enumerates the custom shapes.\n\n @since 12"]
pub type ArkUI_ShapeType = ::std::os::raw::c_uint;
#[doc = " From right to left."]
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_LEFT:
    ArkUI_LinearGradientDirection = 0;
#[doc = " From bottom to top."]
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_TOP:
    ArkUI_LinearGradientDirection = 1;
#[doc = " From left to right."]
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_RIGHT:
    ArkUI_LinearGradientDirection = 2;
#[doc = " From top to bottom."]
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_BOTTOM:
    ArkUI_LinearGradientDirection = 3;
#[doc = " From lower right to upper left."]
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_LEFT_TOP:
    ArkUI_LinearGradientDirection = 4;
#[doc = " From upper right to lower left."]
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_LEFT_BOTTOM:
    ArkUI_LinearGradientDirection = 5;
#[doc = " From lower left to upper right."]
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_RIGHT_TOP:
    ArkUI_LinearGradientDirection = 6;
#[doc = " From upper left to lower right."]
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_RIGHT_BOTTOM:
    ArkUI_LinearGradientDirection = 7;
#[doc = " No gradient."]
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_NONE:
    ArkUI_LinearGradientDirection = 8;
#[doc = " Custom direction."]
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_CUSTOM:
    ArkUI_LinearGradientDirection = 9;
#[doc = " @brief Enumerates the gradient directions.\n\n @since 12"]
pub type ArkUI_LinearGradientDirection = ::std::os::raw::c_uint;
#[doc = " Word breaks can occur between any two characters for Chinese, Japanese, and Korean (CJK) text, but can occur\n  only at a space character for non-CJK text (such as English)."]
pub const ArkUI_WordBreak_ARKUI_WORD_BREAK_NORMAL: ArkUI_WordBreak = 0;
#[doc = " Word breaks can occur between any two characters for non-CJK text. CJK text behavior is the same as for\n  <b>NORMAL</b>."]
pub const ArkUI_WordBreak_ARKUI_WORD_BREAK_BREAK_ALL: ArkUI_WordBreak = 1;
#[doc = " This option has the same effect as <b>BREAK_ALL</b> for non-CJK text, except that if it preferentially wraps\n  lines at appropriate characters (for example, spaces) whenever possible.\nCJK text behavior is the same as for <b>NORMAL</b>."]
pub const ArkUI_WordBreak_ARKUI_WORD_BREAK_BREAK_WORD: ArkUI_WordBreak = 2;
#[doc = " @brief Enumerates the word break rules.\n\n @since 12"]
pub type ArkUI_WordBreak = ::std::os::raw::c_uint;
#[doc = " An ellipsis is used at the start of the line of text."]
pub const ArkUI_EllipsisMode_ARKUI_ELLIPSIS_MODE_START: ArkUI_EllipsisMode = 0;
#[doc = " An ellipsis is used at the center of the line of text."]
pub const ArkUI_EllipsisMode_ARKUI_ELLIPSIS_MODE_CENTER: ArkUI_EllipsisMode = 1;
#[doc = " An ellipsis is used at the end of the line of text."]
pub const ArkUI_EllipsisMode_ARKUI_ELLIPSIS_MODE_END: ArkUI_EllipsisMode = 2;
#[doc = " @brief Enumerates the ellipsis positions.\n\n @since 12"]
pub type ArkUI_EllipsisMode = ::std::os::raw::c_uint;
#[doc = " Render image pixels as they are in the original source image."]
pub const ArkUI_ImageRenderMode_ARKUI_IMAGE_RENDER_MODE_ORIGINAL: ArkUI_ImageRenderMode = 0;
#[doc = " Render image pixels to create a monochrome template image."]
pub const ArkUI_ImageRenderMode_ARKUI_IMAGE_RENDER_MODE_TEMPLATE: ArkUI_ImageRenderMode = 1;
#[doc = " @brief Enumerates the image rendering modes.\n\n @since 12"]
pub type ArkUI_ImageRenderMode = ::std::os::raw::c_uint;
#[doc = " Top edge of the window."]
pub const ArkUI_TransitionEdge_ARKUI_TRANSITION_EDGE_TOP: ArkUI_TransitionEdge = 0;
#[doc = " Bottom edge of the window."]
pub const ArkUI_TransitionEdge_ARKUI_TRANSITION_EDGE_BOTTOM: ArkUI_TransitionEdge = 1;
#[doc = " Left edge of the window."]
pub const ArkUI_TransitionEdge_ARKUI_TRANSITION_EDGE_START: ArkUI_TransitionEdge = 2;
#[doc = " Right edge of the window."]
pub const ArkUI_TransitionEdge_ARKUI_TRANSITION_EDGE_END: ArkUI_TransitionEdge = 3;
#[doc = " @brief Enumerates the slide-in and slide-out positions of the component from the screen edge during transition.\n\n @since 12"]
pub type ArkUI_TransitionEdge = ::std::os::raw::c_uint;
#[doc = " The content of the view is blended in sequence on the target image."]
pub const ArkUI_BlendApplyType_BLEND_APPLY_TYPE_FAST: ArkUI_BlendApplyType = 0;
#[doc = " The content of the component and its child components are drawn on the offscreen canvas, and then blended with\n  the existing content on the canvas."]
pub const ArkUI_BlendApplyType_BLEND_APPLY_TYPE_OFFSCREEN: ArkUI_BlendApplyType = 1;
#[doc = " @brief Defines how the specified blend mode is applied.\n\n @since 12"]
pub type ArkUI_BlendApplyType = ::std::os::raw::c_uint;
#[doc = " @brief Defines a mask area.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_Rect {
    #[doc = " X coordinate of the mask area."]
    pub x: f32,
    #[doc = " Y coordinate of the mask area."]
    pub y: f32,
    #[doc = " Width of the mask area."]
    pub width: f32,
    #[doc = " Height of the mask area."]
    pub height: f32,
}
#[doc = " @brief Describes the width and height of a component.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_IntSize {
    #[doc = " Width, in px."]
    pub width: i32,
    #[doc = " Height, in px."]
    pub height: i32,
}
#[doc = " @brief Describes the position of a component.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_IntOffset {
    #[doc = " Horizontal coordinate, in px."]
    pub x: i32,
    #[doc = " Vertical coordinate, in px."]
    pub y: i32,
}
#[doc = " The callback is invoked when the entire animation is removed once it has finished."]
pub const ArkUI_FinishCallbackType_ARKUI_FINISH_CALLBACK_REMOVED: ArkUI_FinishCallbackType = 0;
#[doc = " The callback is invoked when the animation logically enters the falling state, though it may still be in its\n long tail state."]
pub const ArkUI_FinishCallbackType_ARKUI_FINISH_CALLBACK_LOGICALLY: ArkUI_FinishCallbackType = 1;
#[doc = " @brief Enumerates the animation onFinish callback types.\n\n @since 12"]
pub type ArkUI_FinishCallbackType = ::std::os::raw::c_uint;
#[doc = " The list items are packed toward the start edge of the list container along the cross axis."]
pub const ArkUI_ListItemAlignment_ARKUI_LIST_ITEM_ALIGNMENT_START: ArkUI_ListItemAlignment = 0;
#[doc = " The list items are centered in the list container along the cross axis."]
pub const ArkUI_ListItemAlignment_ARKUI_LIST_ITEM_ALIGNMENT_CENTER: ArkUI_ListItemAlignment = 1;
#[doc = " The list items are packed toward the end edge of the list container along the cross axis."]
pub const ArkUI_ListItemAlignment_ARKUI_LIST_ITEM_ALIGNMENT_END: ArkUI_ListItemAlignment = 2;
#[doc = " @brief Enumerates the alignment modes of items along the cross axis.\n\n @since 12"]
pub type ArkUI_ListItemAlignment = ::std::os::raw::c_uint;
#[doc = " The barrier is the leftmost of all its referencedIds."]
pub const ArkUI_BarrierDirection_ARKUI_BARRIER_DIRECTION_START: ArkUI_BarrierDirection = 0;
#[doc = " The barrier is on the rightmost side of all its referencedIds."]
pub const ArkUI_BarrierDirection_ARKUI_BARRIER_DIRECTION_END: ArkUI_BarrierDirection = 1;
#[doc = " The barrier is at the top of all its referencedIds."]
pub const ArkUI_BarrierDirection_ARKUI_BARRIER_DIRECTION_TOP: ArkUI_BarrierDirection = 2;
#[doc = " The barrier is at the bottom of all its referencedIds."]
pub const ArkUI_BarrierDirection_ARKUI_BARRIER_DIRECTION_BOTTOM: ArkUI_BarrierDirection = 3;
#[doc = " @brief defines the direction of the barrier line.\n\n @since 12"]
pub type ArkUI_BarrierDirection = ::std::os::raw::c_uint;
#[doc = " Components are evenly distributed among constraint anchor points."]
pub const ArkUI_RelativeLayoutChainStyle_ARKUI_RELATIVE_LAYOUT_CHAIN_STYLE_SPREAD:
    ArkUI_RelativeLayoutChainStyle = 0;
#[doc = " Except for the first and last two sub-components,\n other components are evenly distributed between the constraint anchor points."]
pub const ArkUI_RelativeLayoutChainStyle_ARKUI_RELATIVE_LAYOUT_CHAIN_STYLE_SPREAD_INSIDE:
    ArkUI_RelativeLayoutChainStyle = 1;
#[doc = " No gaps in subcomponents within the chain."]
pub const ArkUI_RelativeLayoutChainStyle_ARKUI_RELATIVE_LAYOUT_CHAIN_STYLE_PACKED:
    ArkUI_RelativeLayoutChainStyle = 2;
#[doc = " @brief defines the style of the chain.\n\n @since 12"]
pub type ArkUI_RelativeLayoutChainStyle = ::std::os::raw::c_uint;
#[doc = " @brief Describes the margins of a component.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_Margin {
    #[doc = " Top margin, in vp."]
    pub top: f32,
    #[doc = " Right margin, in vp."]
    pub right: f32,
    #[doc = " Bottom margin, in vp."]
    pub bottom: f32,
    #[doc = " Left margin, in vp."]
    pub left: f32,
}
#[doc = " Default, which is fp for fonts and vp for non-fonts."]
pub const ArkUI_LengthMetricUnit_ARKUI_LENGTH_METRIC_UNIT_DEFAULT: ArkUI_LengthMetricUnit = -1;
#[doc = " px."]
pub const ArkUI_LengthMetricUnit_ARKUI_LENGTH_METRIC_UNIT_PX: ArkUI_LengthMetricUnit = 0;
#[doc = " vp."]
pub const ArkUI_LengthMetricUnit_ARKUI_LENGTH_METRIC_UNIT_VP: ArkUI_LengthMetricUnit = 1;
#[doc = " fp."]
pub const ArkUI_LengthMetricUnit_ARKUI_LENGTH_METRIC_UNIT_FP: ArkUI_LengthMetricUnit = 2;
#[doc = " @brief Enumerates the component units.\n\n @since 12"]
pub type ArkUI_LengthMetricUnit = ::std::os::raw::c_int;
#[doc = " Maintains the content size of the animation's final state,\n and the content is always centered with the component."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_CENTER: ArkUI_RenderFit = 0;
#[doc = " Maintains the content size of the animation's final state,\n and the content is always aligned with the top center of the component."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_TOP: ArkUI_RenderFit = 1;
#[doc = " Maintains the content size of the animation's final state,\n and the content is always aligned with the bottom center of the component."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_BOTTOM: ArkUI_RenderFit = 2;
#[doc = " Maintains the content size of the animation's final state,\n and the content is always aligned to the left of the component."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_LEFT: ArkUI_RenderFit = 3;
#[doc = " Maintains the content size of the animation's final state,\n and the content is always right-aligned with the component."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RIGHT: ArkUI_RenderFit = 4;
#[doc = " Maintains the content size of the animation's final state,\n and the content is always aligned with the top left corner of the component."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_TOP_LEFT: ArkUI_RenderFit = 5;
#[doc = " Keep the content size of the animation final state,\n and the content is always aligned with the upper right corner of the component."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_TOP_RIGHT: ArkUI_RenderFit = 6;
#[doc = " Keep the content size of the animation final state,\n and the content always aligns with the lower-left corner of the component."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_BOTTOM_LEFT: ArkUI_RenderFit = 7;
#[doc = " Keep the content size of the animation final state,\nand the content always aligns with the lower-right corner of the component."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_BOTTOM_RIGHT: ArkUI_RenderFit = 8;
#[doc = " The aspect ratio of the animation's final state content is not considered,\nand the content is always scaled to the size of the component."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RESIZE_FILL: ArkUI_RenderFit = 9;
#[doc = " Reduce or enlarge the aspect ratio of the animation final state content,\n so that the content is fully displayed in the component,\n and keep the center aligned with the component."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RESIZE_CONTAIN: ArkUI_RenderFit = 10;
#[doc = " Keep the aspect ratio of the animation final state content to reduce or enlarge,\n so that the content is fully displayed in the component.\n When there is left over in the broad direction of the component,\n the content is aligned to the left of the component,\n and when there is left over in the high direction of the component,\n the content is aligned to the top of the component."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RESIZE_CONTAIN_TOP_LEFT: ArkUI_RenderFit = 11;
#[doc = " Keep the aspect ratio of the animation final state content to reduce or enlarge,\n so that the content is fully displayed in the component.\n When there is left in the wide direction of the component,\n the content is aligned with the component on the right.\n When there is left in the high direction of the component,\n the content is aligned with the component on the bottom."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RESIZE_CONTAIN_BOTTOM_RIGHT: ArkUI_RenderFit = 12;
#[doc = " Keep the aspect ratio of the animation final state content reduced or enlarged,\n so that both sides of the content are greater than or equal to both sides of the component,\n and keep the center aligned with the component to display the middle part of the content."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RESIZE_COVER: ArkUI_RenderFit = 13;
#[doc = " Keep the aspect ratio of the final content of the animation reduced or enlarged\n so that both sides of the content are exactly greater than or equal to both sides of the component.\n When the content width is left, the content is aligned to the left of the component,\n and the left portion of the content is displayed. When the content is left in the high direction,\n the content and the component remain top aligned, showing the top side of the content."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RESIZE_COVER_TOP_LEFT: ArkUI_RenderFit = 14;
#[doc = " Keep the aspect ratio of the final content of the animation reduced or enlarged so\n that both sides of the content are exactly greater than or equal to both sides of the component.\n When the content width is left, the content and the component remain right aligned,\n and the right part of the content is displayed. When the content is left in the high direction,\n the content and the component remain aligned at the bottom,\n and the bottom part of the content is displayed."]
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RESIZE_COVER_BOTTOM_RIGHT: ArkUI_RenderFit = 15;
#[doc = " @brief Enumerates the render fit.\n\n @since 12"]
pub type ArkUI_RenderFit = ::std::os::raw::c_uint;
#[doc = " Normal button (without rounded corners by default)."]
pub const ArkUI_ButtonType_ARKUI_BUTTON_TYPE_NORMAL: ArkUI_ButtonType = 0;
#[doc = " Capsule-type button (the round corner is half of the height by default)."]
pub const ArkUI_ButtonType_ARKUI_BUTTON_TYPE_CAPSULE: ArkUI_ButtonType = 1;
#[doc = " Circle button."]
pub const ArkUI_ButtonType_ARKUI_BUTTON_TYPE_CIRCLE: ArkUI_ButtonType = 2;
#[doc = " @brief Enumerates the button types.\n\n @since 12"]
pub type ArkUI_ButtonType = ::std::os::raw::c_uint;
#[doc = " Username. Password Vault, when enabled, can automatically save and fill in usernames."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_USER_NAME:
    ArkUI_TextInputContentType = 0;
#[doc = " Password. Password Vault, when enabled, can automatically save and fill in passwords."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_PASSWORD:
    ArkUI_TextInputContentType = 1;
#[doc = " New password. Password Vault, when enabled, can automatically generate a new password."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_NEW_PASSWORD:
    ArkUI_TextInputContentType = 2;
#[doc = " Full street address. The scenario-based autofill feature, when enabled, can automatically save and fill in full\n  street addresses."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_FULL_STREET_ADDRESS:
    ArkUI_TextInputContentType = 3;
#[doc = " House number. The scenario-based autofill feature, when enabled, can automatically save and fill in house\n  numbers."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_HOUSE_NUMBER:
    ArkUI_TextInputContentType = 4;
#[doc = " District and county. The scenario-based autofill feature, when enabled, can automatically save and fill in\n  districts and counties."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_DISTRICT_ADDRESS:
    ArkUI_TextInputContentType = 5;
#[doc = " City. The scenario-based autofill feature, when enabled, can automatically save and fill in cities."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_CITY_ADDRESS:
    ArkUI_TextInputContentType = 6;
#[doc = " Province. The scenario-based autofill feature, when enabled, can automatically save and fill in provinces."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_PROVINCE_ADDRESS:
    ArkUI_TextInputContentType = 7;
#[doc = " Country. The scenario-based autofill feature, when enabled, can automatically save and fill in countries."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_COUNTRY_ADDRESS:
    ArkUI_TextInputContentType = 8;
#[doc = " Full name. The scenario-based autofill feature, when enabled, can automatically save and fill in full names."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_PERSON_FULL_NAME:
    ArkUI_TextInputContentType = 9;
#[doc = " Last name. The scenario-based autofill feature, when enabled, can automatically save and fill in last names."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_PERSON_LAST_NAME:
    ArkUI_TextInputContentType = 10;
#[doc = " First name. The scenario-based autofill feature, when enabled, can automatically save and fill in first names."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_PERSON_FIRST_NAME:
    ArkUI_TextInputContentType = 11;
#[doc = " Phone number. The scenario-based autofill feature, when enabled, can automatically save and fill in phone\n  numbers."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_PHONE_NUMBER:
    ArkUI_TextInputContentType = 12;
#[doc = " Country code. The scenario-based autofill feature, when enabled, can automatically save and fill in country\n  codes."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_PHONE_COUNTRY_CODE:
    ArkUI_TextInputContentType = 13;
#[doc = " Phone number with country code. The scenario-based autofill feature, when enabled, can automatically save and\n  fill in phone numbers with country codes."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_FULL_PHONE_NUMBER:
    ArkUI_TextInputContentType = 14;
#[doc = " Email address. The scenario-based autofill feature, when enabled, can automatically save and fill in email\n  addresses."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_EMAIL_ADDRESS:
    ArkUI_TextInputContentType = 15;
#[doc = " Bank card number. The scenario-based autofill feature, when enabled, can automatically save and fill in bank\n  card numbers."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_BANK_CARD_NUMBER:
    ArkUI_TextInputContentType = 16;
#[doc = " ID card number. The scenario-based autofill feature, when enabled, can automatically save and fill in ID card\n  numbers."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_ID_CARD_NUMBER:
    ArkUI_TextInputContentType = 17;
#[doc = " Nickname. The scenario-based autofill feature, when enabled, can automatically save and fill in nicknames."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_NICKNAME:
    ArkUI_TextInputContentType = 18;
#[doc = " Address information without street address. The scenario-based autofill feature, when enabled, can automatically\n  save and fill in address information without street addresses."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_DETAIL_INFO_WITHOUT_STREET:
    ArkUI_TextInputContentType = 19;
#[doc = " Standard address. The scenario-based autofill feature, when enabled, can automatically save and fill in standard\n  addresses."]
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_FORMAT_ADDRESS:
    ArkUI_TextInputContentType = 20;
#[doc = " @brief Enumerates the autofill types.\n\n @since 12"]
pub type ArkUI_TextInputContentType = ::std::os::raw::c_uint;
#[doc = " Default style. The caret width is fixed at 1.5 vp, and the caret height is subject to the background height and\n  font size of the selected text."]
pub const ArkUI_TextInputStyle_ARKUI_TEXTINPUT_STYLE_DEFAULT: ArkUI_TextInputStyle = 0;
#[doc = " Inline input style. The background height of the selected text is the same as the height of the text box."]
pub const ArkUI_TextInputStyle_ARKUI_TEXTINPUT_STYLE_INLINE: ArkUI_TextInputStyle = 1;
#[doc = " @brief Defines the text input style.\n\n @since 12"]
pub type ArkUI_TextInputStyle = ::std::os::raw::c_uint;
#[doc = " Default appearance mode, won't adopt immersive styles.\n @since 15"]
pub const ArkUI_KeyboardAppearance_ARKUI_KEYBOARD_APPEARANCE_NONE_IMMERSIVE:
    ArkUI_KeyboardAppearance = 0;
#[doc = " Immersive mode.\n @since 15"]
pub const ArkUI_KeyboardAppearance_ARKUI_KEYBOARD_APPEARANCE_IMMERSIVE: ArkUI_KeyboardAppearance =
    1;
#[doc = " Light immersive style.\n @since 15"]
pub const ArkUI_KeyboardAppearance_ARKUI_KEYBOARD_APPEARANCE_LIGHT_IMMERSIVE:
    ArkUI_KeyboardAppearance = 2;
#[doc = " Dark immersive style.\n @since 15"]
pub const ArkUI_KeyboardAppearance_ARKUI_KEYBOARD_APPEARANCE_DARK_IMMERSIVE:
    ArkUI_KeyboardAppearance = 3;
#[doc = " @brief Defines the keyboard style of input box\n\n @since 15"]
pub type ArkUI_KeyboardAppearance = ::std::os::raw::c_uint;
#[doc = " Phone Number."]
pub const ArkUI_TextDataDetectorType_ARKUI_TEXT_DATA_DETECTOR_TYPE_PHONE_NUMBER:
    ArkUI_TextDataDetectorType = 0;
#[doc = " Link."]
pub const ArkUI_TextDataDetectorType_ARKUI_TEXT_DATA_DETECTOR_TYPE_URL: ArkUI_TextDataDetectorType =
    1;
#[doc = " Mailbox."]
pub const ArkUI_TextDataDetectorType_ARKUI_TEXT_DATA_DETECTOR_TYPE_EMAIL:
    ArkUI_TextDataDetectorType = 2;
#[doc = " Address."]
pub const ArkUI_TextDataDetectorType_ARKUI_TEXT_DATA_DETECTOR_TYPE_ADDRESS:
    ArkUI_TextDataDetectorType = 3;
#[doc = " @brief Defines the entity type for text recognition.\n\n @since 12"]
pub type ArkUI_TextDataDetectorType = ::std::os::raw::c_uint;
#[doc = " dot type."]
pub const ArkUI_SwiperIndicatorType_ARKUI_SWIPER_INDICATOR_TYPE_DOT: ArkUI_SwiperIndicatorType = 0;
#[doc = " digit type."]
pub const ArkUI_SwiperIndicatorType_ARKUI_SWIPER_INDICATOR_TYPE_DIGIT: ArkUI_SwiperIndicatorType =
    1;
#[doc = " @brief Define the navigation indicator type of the swiper.\n\n @since 12"]
pub type ArkUI_SwiperIndicatorType = ::std::os::raw::c_uint;
#[doc = " In the folded state, when the ListItem slides in the opposite direction to the main axis,\n the operation item is hidden."]
pub const ArkUI_ListItemSwipeActionState_ARKUI_LIST_ITEM_SWIPE_ACTION_STATE_COLLAPSED:
    ArkUI_ListItemSwipeActionState = 0;
#[doc = " In the folded state, when the ListItem slides in the opposite direction to the spindle,\n the operation item is displayed."]
pub const ArkUI_ListItemSwipeActionState_ARKUI_LIST_ITEM_SWIPE_ACTION_STATE_EXPANDED:
    ArkUI_ListItemSwipeActionState = 1;
#[doc = " Long distance state, the state of deleting a ListItem after it enters the long distance deletion area."]
pub const ArkUI_ListItemSwipeActionState_ARKUI_LIST_ITEM_SWIPE_ACTION_STATE_ACTIONING:
    ArkUI_ListItemSwipeActionState = 2;
#[doc = " @brief Define the pattern of element arrangement in the main axis direction of the Swiper component.\n\n @since 12"]
pub type ArkUI_ListItemSwipeActionState = ::std::os::raw::c_uint;
#[doc = " The ListItem can continue to be scratched after the distance exceeds the size of the scratched component."]
pub const ArkUI_ListItemSwipeEdgeEffect_ARKUI_LIST_ITEM_SWIPE_EDGE_EFFECT_SPRING:
    ArkUI_ListItemSwipeEdgeEffect = 0;
#[doc = " The sliding distance of the ListItem cannot exceed the size of the scratched component."]
pub const ArkUI_ListItemSwipeEdgeEffect_ARKUI_LIST_ITEM_SWIPE_EDGE_EFFECT_NONE:
    ArkUI_ListItemSwipeEdgeEffect = 1;
#[doc = " @brief Define the explicit and implicit mode of the SwipeAction method for the Listitem component.\n\n @since 12"]
pub type ArkUI_ListItemSwipeEdgeEffect = ::std::os::raw::c_uint;
#[doc = " @error No errors."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_NO_ERROR: ArkUI_ErrorCode = 0;
#[doc = " @error Parameter error."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_PARAM_INVALID: ArkUI_ErrorCode = 401;
#[doc = " @error Internal error occurs, such as failure occurs because of the internal environment error,\n or operation failed because of the internal execution failed.\n @since 15"]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_INTERNAL_ERROR: ArkUI_ErrorCode = 100001;
#[doc = " @error The component does not support specific properties or events."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_ATTRIBUTE_OR_EVENT_NOT_SUPPORTED: ArkUI_ErrorCode =
    106102;
#[doc = " @error The corresponding operation does not support nodes created by ArkTS."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_ARKTS_NODE_NOT_SUPPORTED: ArkUI_ErrorCode = 106103;
#[doc = " @error The lazy loading adapter is not bound to the component."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_ADAPTER_NOT_BOUND: ArkUI_ErrorCode = 106104;
#[doc = " @error The adapter already exists."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_ADAPTER_EXIST: ArkUI_ErrorCode = 106105;
#[doc = " @error The corresponding node already has a child node and cannot add an adapter."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_CHILD_NODE_EXIST: ArkUI_ErrorCode = 106106;
#[doc = " The parameter length in the parameter event exceeds the limit."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_NODE_EVENT_PARAM_INDEX_OUT_OF_RANGE: ArkUI_ErrorCode =
    106107;
#[doc = " The data does not exist in the component event."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_NODE_EVENT_PARAM_INVALID: ArkUI_ErrorCode = 106108;
#[doc = " The component event does not support return values."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_NODE_EVENT_NO_RETURN: ArkUI_ErrorCode = 106109;
#[doc = " The index value is invalid."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_NODE_INDEX_INVALID: ArkUI_ErrorCode = 106200;
#[doc = "  Failed to query route navigation information."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_GET_INFO_FAILED: ArkUI_ErrorCode = 106201;
#[doc = " The buffer size is not large enough."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR: ArkUI_ErrorCode = 106202;
#[doc = " @error The node is not on main tree.\n @since 15"]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_NODE_NOT_ON_MAIN_TREE: ArkUI_ErrorCode = 106203;
#[doc = " @error The node requesting focus is not focusable.\n @since 15"]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_FOCUS_NON_FOCUSABLE: ArkUI_ErrorCode = 150001;
#[doc = " @error The node requesting focus has unfocusable ancestor.\n @since 15"]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_FOCUS_NON_FOCUSABLE_ANCESTOR: ArkUI_ErrorCode = 150002;
#[doc = " @error The node requesting focus does not exists.\n @since 15"]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_FOCUS_NON_EXISTENT: ArkUI_ErrorCode = 150003;
#[doc = " @error The snapshot taking is timeout.\n @since 15"]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_COMPONENT_SNAPSHOT_TIMEOUT: ArkUI_ErrorCode = 160002;
#[doc = " The component is not a scroll container."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_NON_SCROLLABLE_CONTAINER: ArkUI_ErrorCode = 180001;
#[doc = " The buffer is not large enough."]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_BUFFER_SIZE_NOT_ENOUGH: ArkUI_ErrorCode = 180002;
#[doc = " @error The event is not a clone event.\n @since 15"]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_NOT_CLONED_POINTER_EVENT: ArkUI_ErrorCode = 180003;
#[doc = " @error The component status is abnormal.\n @since 15"]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_POST_CLONED_COMPONENT_STATUS_ABNORMAL: ArkUI_ErrorCode =
    180004;
#[doc = " @error No component hit to respond to the event.\n @since 15"]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_POST_CLONED_NO_COMPONENT_HIT_TO_RESPOND_TO_THE_EVENT:
    ArkUI_ErrorCode = 180005;
#[doc = " @error invalid styled string.\n @since 14"]
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_INVALID_STYLED_STRING: ArkUI_ErrorCode = 180101;
#[doc = " @brief Define error code enumeration values.\n\n @since 12"]
pub type ArkUI_ErrorCode = ::std::os::raw::c_uint;
#[doc = " The animation is in the initial state."]
pub const ArkUI_AnimationStatus_ARKUI_ANIMATION_STATUS_INITIAL: ArkUI_AnimationStatus = 0;
#[doc = " The animation is being played."]
pub const ArkUI_AnimationStatus_ARKUI_ANIMATION_STATUS_RUNNING: ArkUI_AnimationStatus = 1;
#[doc = " The animation is paused."]
pub const ArkUI_AnimationStatus_ARKUI_ANIMATION_STATUS_PAUSED: ArkUI_AnimationStatus = 2;
#[doc = " The animation is stopped."]
pub const ArkUI_AnimationStatus_ARKUI_ANIMATION_STATUS_STOPPED: ArkUI_AnimationStatus = 3;
#[doc = " @brief Defines the playback status for the image animator.\n\n @since 12"]
pub type ArkUI_AnimationStatus = ::std::os::raw::c_uint;
#[doc = " Before execution, the animation does not apply any styles to the target component.\n After execution, the animation restores the target component to its default state."]
pub const ArkUI_AnimationFillMode_ARKUI_ANIMATION_FILL_MODE_NONE: ArkUI_AnimationFillMode = 0;
#[doc = " The target component retains the state set by the last keyframe encountered\n during execution of the animation."]
pub const ArkUI_AnimationFillMode_ARKUI_ANIMATION_FILL_MODE_FORWARDS: ArkUI_AnimationFillMode = 1;
#[doc = " The animation applies the values defined in the first relevant keyframe once it is applied to\n the target component, and retains the values during the period set by delay."]
pub const ArkUI_AnimationFillMode_ARKUI_ANIMATION_FILL_MODE_BACKWARDS: ArkUI_AnimationFillMode = 2;
#[doc = " The animation follows the rules for both Forwards and Backwards,\n extending the animation attributes in both directions."]
pub const ArkUI_AnimationFillMode_ARKUI_ANIMATION_FILL_MODE_BOTH: ArkUI_AnimationFillMode = 3;
#[doc = " @brief Defines the status before and after execution of the animation in the current playback direction.\n\n @since 12"]
pub type ArkUI_AnimationFillMode = ::std::os::raw::c_uint;
#[doc = " The Checkbox unchecked."]
pub const ArkUI_AccessibilityCheckedState_ARKUI_ACCESSIBILITY_UNCHECKED:
    ArkUI_AccessibilityCheckedState = 0;
#[doc = " The Checkbox checked."]
pub const ArkUI_AccessibilityCheckedState_ARKUI_ACCESSIBILITY_CHECKED:
    ArkUI_AccessibilityCheckedState = 1;
#[doc = " @brief Defines the state type for the accessibility checkbox.\n\n @since 12"]
pub type ArkUI_AccessibilityCheckedState = ::std::os::raw::c_uint;
#[doc = " The animation plays in forward loop mode."]
pub const ArkUI_AnimationDirection_ARKUI_ANIMATION_DIRECTION_NORMAL: ArkUI_AnimationDirection = 0;
#[doc = " The animation plays in reverse loop mode."]
pub const ArkUI_AnimationDirection_ARKUI_ANIMATION_DIRECTION_REVERSE: ArkUI_AnimationDirection = 1;
#[doc = " The animation plays in alternating loop mode. When the animation is played for an odd number of times, the\n  playback is in forward direction. When the animation is played for an even number of times, the playback is in\n  reverse direction."]
pub const ArkUI_AnimationDirection_ARKUI_ANIMATION_DIRECTION_ALTERNATE: ArkUI_AnimationDirection =
    2;
#[doc = " The animation plays in reverse alternating loop mode. When the animation is played for an odd number of times,\n  the playback is in reverse direction. When the animation is played for an even number of times, the playback is\n  in forward direction."]
pub const ArkUI_AnimationDirection_ARKUI_ANIMATION_DIRECTION_ALTERNATE_REVERSE:
    ArkUI_AnimationDirection = 3;
#[doc = "/**\n @brief Enumerates the animation playback modes.\n\n @since 12"]
pub type ArkUI_AnimationDirection = ::std::os::raw::c_uint;
#[doc = " Finger drag."]
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_DRAG: ArkUI_ScrollSource = 0;
#[doc = " Inertial roll after finger drag."]
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_FLING: ArkUI_ScrollSource = 1;
#[doc = " Execute the EdgeEffect.Spring edge effect when crossing the boundary."]
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_EDGE_EFFECT: ArkUI_ScrollSource = 2;
#[doc = " Other user input other than dragging, such as mouse wheel, keyboard events, etc."]
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_OTHER_USER_INPUT: ArkUI_ScrollSource = 3;
#[doc = " Drag the scroll bar."]
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_SCROLL_BAR: ArkUI_ScrollSource = 4;
#[doc = " Inertia scrolling after dragging the scroll bar."]
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_SCROLL_BAR_FLING: ArkUI_ScrollSource = 5;
#[doc = " The scroll controller causes unanimated scrolling."]
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_SCROLLER: ArkUI_ScrollSource = 6;
#[doc = " The scroll controller causes the scroll to drive the painting."]
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_ANIMATION: ArkUI_ScrollSource = 7;
#[doc = " @brief Define the rolling source enumeration value.\n\n @since 12"]
pub type ArkUI_ScrollSource = ::std::os::raw::c_uint;
#[doc = " click action."]
pub const ArkUI_AccessibilityActionType_ARKUI_ACCESSIBILITY_ACTION_CLICK:
    ArkUI_AccessibilityActionType = 1;
#[doc = " long click action."]
pub const ArkUI_AccessibilityActionType_ARKUI_ACCESSIBILITY_ACTION_LONG_CLICK:
    ArkUI_AccessibilityActionType = 2;
#[doc = " cut action."]
pub const ArkUI_AccessibilityActionType_ARKUI_ACCESSIBILITY_ACTION_CUT:
    ArkUI_AccessibilityActionType = 4;
#[doc = " copy action."]
pub const ArkUI_AccessibilityActionType_ARKUI_ACCESSIBILITY_ACTION_COPY:
    ArkUI_AccessibilityActionType = 8;
#[doc = " paste action."]
pub const ArkUI_AccessibilityActionType_ARKUI_ACCESSIBILITY_ACTION_PASTE:
    ArkUI_AccessibilityActionType = 16;
#[doc = " @brief Define accessible action types.\n\n @since 12"]
pub type ArkUI_AccessibilityActionType = ::std::os::raw::c_uint;
#[doc = " @brief Defines the translation options for component transition.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_TranslationOptions {
    #[doc = " Translation distance along the x-axis."]
    pub x: f32,
    #[doc = " Translation distance along the y-axis."]
    pub y: f32,
    #[doc = " Translation distance along the z-axis."]
    pub z: f32,
}
#[doc = " @brief Defines the scaling options for component transition.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ScaleOptions {
    #[doc = " Scale ratio along the x-axis."]
    pub x: f32,
    #[doc = " Scale ratio along the y-axis."]
    pub y: f32,
    #[doc = " Scale factor along the z-axis (not effective for the current 2D graphics)."]
    pub z: f32,
    #[doc = " X coordinate of the center point."]
    pub centerX: f32,
    #[doc = " Y coordinate of the center point."]
    pub centerY: f32,
}
#[doc = " @brief Defines the rotation options for component transition.\n\n @since 12"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_RotationOptions {
    #[doc = " X-component of the rotation vector."]
    pub x: f32,
    #[doc = " Y-component of the rotation vector."]
    pub y: f32,
    #[doc = " Z-component of the rotation vector."]
    pub z: f32,
    #[doc = " Rotation angle."]
    pub angle: f32,
    #[doc = " X coordinate of the center point."]
    pub centerX: f32,
    #[doc = " Y coordinate of the center point."]
    pub centerY: f32,
    #[doc = " Z-axis anchor, that is, the z-component of the 3D rotation center point."]
    pub centerZ: f32,
    #[doc = " Distance from the user to the z=0 plane."]
    pub perspective: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_CustomSpanMeasureInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_CustomSpanMetrics {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_CustomSpanDrawInfo {
    _unused: [u8; 0],
}
#[doc = " The NavDestination show."]
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_SHOW: ArkUI_NavDestinationState =
    0;
#[doc = " The NavDestination hide."]
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_HIDE: ArkUI_NavDestinationState =
    1;
#[doc = " The NavDestination is mounted to the component tree."]
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_APPEAR:
    ArkUI_NavDestinationState = 2;
#[doc = " The NavDestination removed from the component tree."]
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_DISAPPEAR:
    ArkUI_NavDestinationState = 3;
#[doc = " Before the NavDestination show."]
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_WILL_SHOW:
    ArkUI_NavDestinationState = 4;
#[doc = " Before the NavDestination hide."]
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_WILL_HIDE:
    ArkUI_NavDestinationState = 5;
#[doc = " Before the NavDestination mount to the component tree."]
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_WILL_APPEAR:
    ArkUI_NavDestinationState = 6;
#[doc = " Before the NavDestination removed from the component tree."]
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_WILL_DISAPPEAR:
    ArkUI_NavDestinationState = 7;
#[doc = " The NavDestination returns from the component."]
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_BACK_PRESS:
    ArkUI_NavDestinationState = 100;
#[doc = " @brief Defines the state of the NavDestination component.\n\n @since 12"]
pub type ArkUI_NavDestinationState = ::std::os::raw::c_uint;
#[doc = " The Router Page is about to be created."]
pub const ArkUI_RouterPageState_ARKUI_ROUTER_PAGE_STATE_ABOUT_TO_APPEAR: ArkUI_RouterPageState = 0;
#[doc = " The Router Page is about to be destroyed."]
pub const ArkUI_RouterPageState_ARKUI_ROUTER_PAGE_STATE_ABOUT_TO_DISAPPEAR: ArkUI_RouterPageState =
    1;
#[doc = " The Router Page show."]
pub const ArkUI_RouterPageState_ARKUI_ROUTER_PAGE_STATE_ON_SHOW: ArkUI_RouterPageState = 2;
#[doc = " The Router Page hide."]
pub const ArkUI_RouterPageState_ARKUI_ROUTER_PAGE_STATE_ON_HIDE: ArkUI_RouterPageState = 3;
#[doc = " The Router Page returns."]
pub const ArkUI_RouterPageState_ARKUI_ROUTER_PAGE_STATE_ON_BACK_PRESS: ArkUI_RouterPageState = 4;
#[doc = " @brief Define the state of Router Page.\n\n @since 12"]
pub type ArkUI_RouterPageState = ::std::os::raw::c_uint;
#[doc = " The default security zone includes the status bar and navigation bar."]
pub const ArkUI_SafeAreaType_ARKUI_SAFE_AREA_TYPE_SYSTEM: ArkUI_SafeAreaType = 1;
#[doc = " Non-secure areas of the device, such as bangs or hole holes."]
pub const ArkUI_SafeAreaType_ARKUI_SAFE_AREA_TYPE_CUTOUT: ArkUI_SafeAreaType = 2;
#[doc = " Soft keyboard area."]
pub const ArkUI_SafeAreaType_ARKUI_SAFE_AREA_TYPE_KEYBOARD: ArkUI_SafeAreaType = 4;
#[doc = " @brief defines the enumerated value of the extended security zone.\n\n @since 12"]
pub type ArkUI_SafeAreaType = ::std::os::raw::c_uint;
#[doc = " Outside the area of the <b>ListItemGroup</b> component."]
pub const ArkUI_ListItemGroupArea_ARKUI_LIST_ITEM_GROUP_AREA_OUTSIDE: ArkUI_ListItemGroupArea = 0;
#[doc = " Area when the <b>ListItemGroup</b> component does not have the header, footer, or list item."]
pub const ArkUI_ListItemGroupArea_ARKUI_LIST_ITEM_SWIPE_AREA_NONE: ArkUI_ListItemGroupArea = 1;
#[doc = " List item area of the <b>ListItemGroup</b> component."]
pub const ArkUI_ListItemGroupArea_ARKUI_LIST_ITEM_SWIPE_AREA_ITEM: ArkUI_ListItemGroupArea = 2;
#[doc = " Header area of the <b>ListItemGroup</b> component."]
pub const ArkUI_ListItemGroupArea_ARKUI_LIST_ITEM_SWIPE_AREA_HEADER: ArkUI_ListItemGroupArea = 3;
#[doc = " Footer area of the <b>ListItemGroup</b> component."]
pub const ArkUI_ListItemGroupArea_ARKUI_LIST_ITEM_SWIPE_AREA_FOOTER: ArkUI_ListItemGroupArea = 4;
#[doc = " @brief Define an enum for the areas of the <b>ListItemGroup</b> component.\n\n @since 15"]
pub type ArkUI_ListItemGroupArea = ::std::os::raw::c_uint;
#[doc = " Upper area."]
pub const ArkUI_SafeAreaEdge_ARKUI_SAFE_AREA_EDGE_TOP: ArkUI_SafeAreaEdge = 1;
#[doc = " Lower area."]
pub const ArkUI_SafeAreaEdge_ARKUI_SAFE_AREA_EDGE_BOTTOM: ArkUI_SafeAreaEdge = 2;
#[doc = " Front area."]
pub const ArkUI_SafeAreaEdge_ARKUI_SAFE_AREA_EDGE_START: ArkUI_SafeAreaEdge = 4;
#[doc = " Tail area."]
pub const ArkUI_SafeAreaEdge_ARKUI_SAFE_AREA_EDGE_END: ArkUI_SafeAreaEdge = 8;
#[doc = " @brief defines the enumerated value of the direction of the extended security zone.\n\n @since 12"]
pub type ArkUI_SafeAreaEdge = ::std::os::raw::c_uint;
#[doc = " Defines avoid keyboard when keyboard shows."]
pub const ArkUI_KeyboardAvoidMode_ARKUI_KEYBOARD_AVOID_MODE_DEFAULT: ArkUI_KeyboardAvoidMode = 0;
#[doc = " Defines not avoid keyboard when keyboard shows."]
pub const ArkUI_KeyboardAvoidMode_ARKUI_KEYBOARD_AVOID_MODE_NONE: ArkUI_KeyboardAvoidMode = 1;
#[doc = " @brief defines the enumerated value of the customDialog's keyboard avoid mode.\n\n @since 15"]
pub type ArkUI_KeyboardAvoidMode = ::std::os::raw::c_uint;
#[doc = " Layout top half screen when the phone in hover mode."]
pub const ArkUI_HoverModeAreaType_ARKUI_HOVER_MODE_AREA_TYPE_TOP: ArkUI_HoverModeAreaType = 0;
#[doc = " Layout bottom half screen when the phone in hover mode."]
pub const ArkUI_HoverModeAreaType_ARKUI_HOVER_MODE_AREA_TYPE_BOTTOM: ArkUI_HoverModeAreaType = 1;
#[doc = " @brief defines the enumerated value of area in hover mode.\n\n @since 15"]
pub type ArkUI_HoverModeAreaType = ::std::os::raw::c_uint;
#[doc = " Not expand."]
pub const ArkUI_ExpandMode_ARKUI_NOT_EXPAND: ArkUI_ExpandMode = 0;
#[doc = " Expand."]
pub const ArkUI_ExpandMode_ARKUI_EXPAND: ArkUI_ExpandMode = 1;
#[doc = " Lazy expand. Expand the children of node if needed."]
pub const ArkUI_ExpandMode_ARKUI_LAZY_EXPAND: ArkUI_ExpandMode = 2;
#[doc = " @brief Enumerates the expand modes.\n\n @since 15"]
pub type ArkUI_ExpandMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_SystemFontStyleEvent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_SnapshotOptions {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " @brief Creates a size constraint.\n\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_Create() -> *mut ArkUI_LayoutConstraint;
}
extern "C" {
    #[doc = " @brief Creates a deep copy of a size constraint.\n\n @param Constraint Indicates the pointer to the size constraint.\n @return Returns the pointer to the new size constraint.\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_Copy(
        Constraint: *const ArkUI_LayoutConstraint,
    ) -> *mut ArkUI_LayoutConstraint;
}
extern "C" {
    #[doc = " @brief Destroys the pointer to a size constraint.\n\n @param Constraint Indicates the pointer to the size constraint.\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_Dispose(
        Constraint: *mut ArkUI_LayoutConstraint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " @brief Obtains the maximum width for a size constraint, in px.\n\n @param Constraint Indicates the pointer to the size constraint.\n @return Returns the maximum width.\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_GetMaxWidth(Constraint: *const ArkUI_LayoutConstraint) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the minimum width for a size constraint, in px.\n\n @param Constraint Indicates the pointer to the size constraint.\n @return Returns the minimum width.\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_GetMinWidth(Constraint: *const ArkUI_LayoutConstraint) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the maximum height for a size constraint, in px.\n\n @param Constraint Indicates the pointer to the size constraint.\n @return Returns the maximum height.\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_GetMaxHeight(Constraint: *const ArkUI_LayoutConstraint)
        -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the minimum height for a size constraint, in px.\n\n @param Constraint Indicates the pointer to the size constraint.\n @return Returns the minimum height.\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_GetMinHeight(Constraint: *const ArkUI_LayoutConstraint)
        -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the width percentage reference for a size constraint, in px.\n\n @param Constraint Indicates the pointer to the size constraint.\n @return Returns the width percentage reference.\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_GetPercentReferenceWidth(
        Constraint: *const ArkUI_LayoutConstraint,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the height percentage reference for a size constraint, in px.\n\n @param Constraint Indicates the pointer to the size constraint.\n @return Returns the height percentage reference.\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_GetPercentReferenceHeight(
        Constraint: *const ArkUI_LayoutConstraint,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Sets the maximum width.\n\n @param Constraint Indicates the pointer to the size constraint.\n @param value Indicates the maximum width, in px.\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_SetMaxWidth(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    #[doc = " @brief Sets the minimum width.\n\n @param Constraint Indicates the pointer to the size constraint.\n @param value Indicates the minimum width, in px.\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_SetMinWidth(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    #[doc = " @brief Sets the maximum height.\n\n @param Constraint Indicates the pointer to the size constraint.\n @param value Indicates the maximum height, in px.\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_SetMaxHeight(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    #[doc = " @brief Sets the minimum height.\n\n @param Constraint Indicates the pointer to the size constraint.\n @param value Indicates the minimum height, in px.\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_SetMinHeight(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    #[doc = " @brief Sets the width percentage reference.\n\n @param Constraint Indicates the pointer to the size constraint.\n @param value Indicates the width percentage reference, in px.\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_SetPercentReferenceWidth(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    #[doc = " @brief Sets the height percentage reference.\n\n @param Constraint Indicates the pointer to the size constraint.\n @param value Indicates the height percentage reference, in px.\n @since 12"]
    pub fn OH_ArkUI_LayoutConstraint_SetPercentReferenceHeight(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    #[doc = " @brief Obtains the pointer to a canvas for drawing, which can be converted into the <b>OH_Drawing_Canvas</b> pointer\n in the <b>Drawing</b> module.\n\n @param context Indicates the pointer to the drawing context.\n @return Returns the pointer to the canvas for drawing.\n @since 12"]
    pub fn OH_ArkUI_DrawContext_GetCanvas(
        context: *mut ArkUI_DrawContext,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " @brief Obtains the size of a drawing area.\n\n @param context Indicates the pointer to the drawing context.\n @return Returns the size of the drawing area.\n @since 12"]
    pub fn OH_ArkUI_DrawContext_GetSize(context: *mut ArkUI_DrawContext) -> ArkUI_IntSize;
}
extern "C" {
    #[doc = " @brief Creates water flow section configuration.\n\n @return Returns the water flow section configuration.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_Create() -> *mut ArkUI_WaterFlowSectionOption;
}
extern "C" {
    #[doc = " @brief Destroys the pointer to a water flow section configuration.\n\n @param option Indicates the pointer to a water flow section configuration.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_Dispose(option: *mut ArkUI_WaterFlowSectionOption);
}
extern "C" {
    #[doc = " @brief Sets the FlowItem block configuration information array length.\n\n @param option FlowItem Indicates the packet configuration.\n @param size Array Length.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_SetSize(
        option: *mut ArkUI_WaterFlowSectionOption,
        size: i32,
    );
}
extern "C" {
    #[doc = " @brief Gets the FlowItem grouping configuration information array length.\n\n @param option FlowItem Indicates the packet configuration.\n @return Array size. If -1 is returned, the return fails.\n         The possible cause of the failure is that the option parameter is abnormal, such as a null pointer.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_GetSize(
        option: *mut ArkUI_WaterFlowSectionOption,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Sets the number of items in a water flow section.\n\n @param option Indicates the pointer to a water flow section configuration.\n @param index Indicates the index of the target water flow section.\n @param itemCount Indicates the number of items in the water flow section.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_SetItemCount(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        itemCount: i32,
    );
}
extern "C" {
    #[doc = " @brief Obtains the number of items in the water flow section that matches the specified index.\n\n @param option Indicates the pointer to a water flow section configuration.\n @param index Indicates the index of the target water flow section.\n @return Returns the number of items in the water flow section.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_GetItemCount(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief The FlowItem grouping configuration information getsthe spindle size of\n the specified Item based on flowItemIndex.\n\n @param option Indicates the pointer to a water flow section configuration.\n @param index Indicates the index of the target water flow section.\n @param callback Gets the spindle size of the specified Item based on index.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_RegisterGetItemMainSizeCallbackByIndex(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        callback: ::std::option::Option<unsafe extern "C" fn(itemIndex: i32) -> f32>,
    );
}
extern "C" {
    #[doc = " @brief The FlowItem grouping configuration information getsthe spindle size of\n the specified Item based on flowItemIndex.\n\n @param option Indicates the pointer to a water flow section configuration.\n @param index Indicates the index of the target water flow section.\n @param userData FlowItem Custom data.\n @param callback Gets the spindle size of the specified Item based on index.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_RegisterGetItemMainSizeCallbackByIndexWithUserData(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(itemIndex: i32, userData: *mut ::std::os::raw::c_void) -> f32,
        >,
    );
}
extern "C" {
    #[doc = " @brief Sets the number of columns (in a vertical layout) or rows (in a horizontal layout) of a water flow.\n\n @param option Indicates the pointer to a water flow section configuration.\n @param index Indicates the index of the target water flow section.\n @param crossCount Indicates the number of columns or rows, depending on the layout direction.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_SetCrossCount(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        crossCount: i32,
    );
}
extern "C" {
    #[doc = " @brief Obtains the number of columns (in a vertical layout) or rows (in a horizontal layout) in the water flow section\n that matches the specified index.\n\n @param option Indicates the pointer to a water flow section configuration.\n @param index Indicates the index of the target water flow section.\n @return Returns the number of columns or rows.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_GetCrossCount(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Sets the gap between columns in the specified water flow section.\n\n @param option Indicates the pointer to a water flow section configuration.\n @param index Indicates the index of the target water flow section.\n @param columnGap Indicates the gap between columns to set.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_SetColumnGap(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        columnGap: f32,
    );
}
extern "C" {
    #[doc = " @brief Obtains the gap between columns in the water flow section that matches the specified index.\n\n @param option Indicates the pointer to a water flow section configuration.\n @param index Indicates the index of the target water flow section.\n @return Returns the gap between columns.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_GetColumnGap(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Sets the gap between rows in the specified water flow section.\n\n @param option Indicates the pointer to a water flow section configuration.\n @param index Indicates the index of the target water flow section.\n @param rowGap Indicates the gap between rows to set.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_SetRowGap(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        rowGap: f32,
    );
}
extern "C" {
    #[doc = " @brief Obtains the gap between rows in the water flow section that matches the specified index.\n\n @param option Indicates the pointer to a water flow section configuration.\n @param index Indicates the index of the target water flow section.\n @return Returns the gap between rows.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_GetRowGap(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Sets the margins for the specified water flow section.\n\n @param option Indicates the pointer to a water flow section configuration.\n @param index Indicates the index of the target water flow section.\n @param marginTop Indicates the top margin of the water flow section.\n @param marginRight Indicates the right margin of the water flow section.\n @param marginBottom Indicates the bottom margin of the water flow section.\n @param marginLeft Indicates the left margin of the water flow section.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_SetMargin(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        marginTop: f32,
        marginRight: f32,
        marginBottom: f32,
        marginLeft: f32,
    );
}
extern "C" {
    #[doc = " @brief Obtains the margins of the water flow section that matches the specified index.\n\n @param option Indicates the pointer to a water flow section configuration.\n @param index Indicates the index of the target water flow section.\n @return Returns the margins.\n @since 12"]
    pub fn OH_ArkUI_WaterFlowSectionOption_GetMargin(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> ArkUI_Margin;
}
extern "C" {
    #[doc = " @brief Creates a navigation indicator.\n\n @param type Indicates the type of the indicator.\n @return Returns the pointer to the new indicator.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_Create(
        type_: ArkUI_SwiperIndicatorType,
    ) -> *mut ArkUI_SwiperIndicator;
}
extern "C" {
    #[doc = " @brief Destroys the pointer to the indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_Dispose(indicator: *mut ArkUI_SwiperIndicator);
}
extern "C" {
    #[doc = " @brief Sets the distance between the navigation point and the start of the swiper.\n\n @param indicator Indicates the pointer to the indicator.\n @param value Indicates the distance between the navigation point and the start of the swiper.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_SetStartPosition(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    #[doc = " @brief Obtains the distance between the navigation point and the start of the swiper.\n\n @param indicator Indicates the pointer to the indicator.\n @return Returns the distance between the navigation point and the start of the swiper.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_GetStartPosition(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    #[doc = " @brief Sets the distance between the navigation point and the top of the swiper.\n\n @param indicator Indicates the pointer to the indicator.\n @param value Indicates the distance between the navigation point and the top of the swiper.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_SetTopPosition(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    #[doc = " @brief Obtains the distance between the navigation point and the top of the swiper.\n\n @param indicator Indicates the pointer to the indicator.\n @return Returns the distance between the navigation point and the top of the swiper.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_GetTopPosition(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    #[doc = " @brief Sets the distance between the navigation point and the right of the swiper.\n\n @param indicator Indicates the pointer to the indicator.\n @param value Indicates the distance between the navigation point and the right of the swiper.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_SetEndPosition(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    #[doc = " @brief Obtains the distance between the navigation point and the end of the swiper.\n\n @param indicator Indicates the pointer to the indicator.\n @return Returns the distance between the navigation point and the end of the swiper.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_GetEndPosition(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    #[doc = " @brief Sets the distance between the navigation point and the bottom of the swiper.\n\n @param indicator Indicates the pointer to the indicator.\n @param value Indicates the distance between the navigation point and the bottom of the swiper.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_SetBottomPosition(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    #[doc = " @brief Obtains the distance between the navigation point and the bottom of the swiper.\n\n @param indicator Indicates the pointer to the indicator.\n @return Returns the distance between the navigation point and the bottom of the swiper.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_GetBottomPosition(indicator: *mut ArkUI_SwiperIndicator)
        -> f32;
}
extern "C" {
    #[doc = " @brief Sets the width of the dot for the dot indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @param value Indicates the width of the dot for the dot indicator.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_SetItemWidth(indicator: *mut ArkUI_SwiperIndicator, value: f32);
}
extern "C" {
    #[doc = " @brief Obtains the width of the dot for the dot indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @return Returns the width of the dot for the dot indicator.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_GetItemWidth(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    #[doc = " @brief Sets the height of the dot for the dot indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @param value Indicates the height of the dot for the dot indicator.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_SetItemHeight(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    #[doc = " @brief  Obtains the height of the dot for the dot indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @return Returns the height of the dot for the dot indicator.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_GetItemHeight(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    #[doc = " @brief Sets the width of the selected dot for the dot indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @param value Indicates the width of the selected dot for the dot indicator.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_SetSelectedItemWidth(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    #[doc = " @brief  Obtains the width of the selected dot for the dot indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @return Returns the width of the selected dot for the dot indicator.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_GetSelectedItemWidth(
        indicator: *mut ArkUI_SwiperIndicator,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Sets the height of the selected dot for the dot indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @param value Indicates the height of the selected dot for the dot indicator.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_SetSelectedItemHeight(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    #[doc = " @brief  Obtains the height of the selected dot for the dot indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @return Returns the height of the selected dot for the dot indicator.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_GetSelectedItemHeight(
        indicator: *mut ArkUI_SwiperIndicator,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Sets whether to display the mask style of the dot navigation indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @param mask Whether to display the mask style. True means to display.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_SetMask(indicator: *mut ArkUI_SwiperIndicator, mask: i32);
}
extern "C" {
    #[doc = " @brief Obtains whether to display the mask style of the dot navigation indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @return Returns whether to display the mask style. True means to display.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_GetMask(indicator: *mut ArkUI_SwiperIndicator) -> i32;
}
extern "C" {
    #[doc = " @brief Sets the color of the dot navigation indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @param color the color of the dot navigation indicator, in 0xARGB format.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_SetColor(indicator: *mut ArkUI_SwiperIndicator, color: u32);
}
extern "C" {
    #[doc = " @brief Obtains the color of the dot navigation indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @return Returns the color of the dot navigation indicator, in 0xARGB format.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_GetColor(indicator: *mut ArkUI_SwiperIndicator) -> u32;
}
extern "C" {
    #[doc = " @brief Sets the color of the selected dot for the navigation indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @param color the color of the selected dot, in 0xARGB format.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_SetSelectedColor(
        indicator: *mut ArkUI_SwiperIndicator,
        selectedColor: u32,
    );
}
extern "C" {
    #[doc = " @brief Obtains the color of the selected dot for the dot navigation indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @return Returns the color of the selected dot, in 0xARGB format.\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_GetSelectedColor(indicator: *mut ArkUI_SwiperIndicator) -> u32;
}
extern "C" {
    #[doc = " @brief Sets the number of maxDisplayCount for the dot navigation indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @param maxDisplayCount the maxDisplayCount of the navigation dot, span is 6-9.\n @return {@link ARKUI_ERROR_CODE_NO_ERROR} Success.\n         {@link ARKUI_ERROR_CODE_PARAM_INVALID} indicator is null or maxDisplayCount less then 6 or\n         maxDisplayCount more then 9\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_SetMaxDisplayCount(
        indicator: *mut ArkUI_SwiperIndicator,
        maxDisplayCount: i32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the number of maxDisplayCount for the dot navigation indicator.\n\n @param indicator Indicates the pointer to the indicator.\n @return Returns the number of the maxDisplayCount, span is 6-9.\n         0 - indicator is null\n @since 12"]
    pub fn OH_ArkUI_SwiperIndicator_GetMaxDisplayCount(
        indicator: *mut ArkUI_SwiperIndicator,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Create auxiliary line information in the RelativeContaine container.\n\n @param size The number of auxiliary lines.\n @return auxiliary line information.\n @since 12"]
    pub fn OH_ArkUI_GuidelineOption_Create(size: i32) -> *mut ArkUI_GuidelineOption;
}
extern "C" {
    #[doc = " @brief Destroy auxiliary line information.\n\n @param guideline auxiliary line information.\n @since 12"]
    pub fn OH_ArkUI_GuidelineOption_Dispose(guideline: *mut ArkUI_GuidelineOption);
}
extern "C" {
    #[doc = " @brief Set the Id of the auxiliary line.\n\n @param guideline auxiliary line information.\n @param value id, must be unique and cannot have the same name as the component in the container.\n @param index auxiliary line index value.\n @since 12"]
    pub fn OH_ArkUI_GuidelineOption_SetId(
        guideline: *mut ArkUI_GuidelineOption,
        value: *const ::std::os::raw::c_char,
        index: i32,
    );
}
extern "C" {
    #[doc = " @brief Set the direction of the auxiliary line.\n\n @param guideline auxiliary line information.\n @param value direction.\n @param index auxiliary line index value.\n @since 12"]
    pub fn OH_ArkUI_GuidelineOption_SetDirection(
        guideline: *mut ArkUI_GuidelineOption,
        value: ArkUI_Axis,
        index: i32,
    );
}
extern "C" {
    #[doc = " @brief Set the distance from the left or top of the container.\n\n @param guideline auxiliary line information.\n @param value The distance from the left or top of the container.\n @param index auxiliary line index value.\n @since 12"]
    pub fn OH_ArkUI_GuidelineOption_SetPositionStart(
        guideline: *mut ArkUI_GuidelineOption,
        value: f32,
        index: i32,
    );
}
extern "C" {
    #[doc = " @brief Set the distance from the right or bottom of the container.\n\n @param guideline auxiliary line information.\n @param value The distance from the right side or bottom of the container.\n @param index auxiliary line index value.\n @since 12"]
    pub fn OH_ArkUI_GuidelineOption_SetPositionEnd(
        guideline: *mut ArkUI_GuidelineOption,
        value: f32,
        index: i32,
    );
}
extern "C" {
    #[doc = " @brief Get the Id of the auxiliary line.\n\n @param guideline auxiliary line information.\n @param index auxiliary line index value.\n @return Id.\n @since 12"]
    pub fn OH_ArkUI_GuidelineOption_GetId(
        guideline: *mut ArkUI_GuidelineOption,
        index: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Get the direction of the auxiliary line.\n\n @param guideline auxiliary line information.\n @param index auxiliary line index value.\n @return direction.\n @since 12"]
    pub fn OH_ArkUI_GuidelineOption_GetDirection(
        guideline: *mut ArkUI_GuidelineOption,
        index: i32,
    ) -> ArkUI_Axis;
}
extern "C" {
    #[doc = " @brief Get the distance from the left or top of the container.\n\n @param guideline auxiliary line information.\n @param index auxiliary line index value.\n @return The distance from the left or top of the container.\n @since 12"]
    pub fn OH_ArkUI_GuidelineOption_GetPositionStart(
        guideline: *mut ArkUI_GuidelineOption,
        index: i32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Get the distance from the right side or bottom of the container.\n\n @param guideline auxiliary line information.\n @param index auxiliary line index value.\n @return The distance from the right side or bottom of the container.\n @since 12"]
    pub fn OH_ArkUI_GuidelineOption_GetPositionEnd(
        guideline: *mut ArkUI_GuidelineOption,
        index: i32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief creates barrier information within the RelativeContaine container.\n\n @param size Number of barriers.\n @return barrier information.\n @since 12"]
    pub fn OH_ArkUI_BarrierOption_Create(size: i32) -> *mut ArkUI_BarrierOption;
}
extern "C" {
    #[doc = " @brief Destroy barrier information.\n\n @param barrierStyle barrier information.\n @since 12"]
    pub fn OH_ArkUI_BarrierOption_Dispose(barrierStyle: *mut ArkUI_BarrierOption);
}
extern "C" {
    #[doc = " @brief Set the Id of the barrier.\n\n @param barrierStyle barrier information.\n @param value id, must be unique and cannot have the same name as the component in the container.\n @param index Barrier index value.\n @since 12"]
    pub fn OH_ArkUI_BarrierOption_SetId(
        barrierStyle: *mut ArkUI_BarrierOption,
        value: *const ::std::os::raw::c_char,
        index: i32,
    );
}
extern "C" {
    #[doc = " @brief Set the direction of the barrier.\n\n @param barrierStyle barrier information.\n @param value direction.\n @param index Barrier index value.\n @since 12"]
    pub fn OH_ArkUI_BarrierOption_SetDirection(
        barrierStyle: *mut ArkUI_BarrierOption,
        value: ArkUI_BarrierDirection,
        index: i32,
    );
}
extern "C" {
    #[doc = " @brief Sets the dependent component of the barrier.\n\n @param barrierStyle barrier information.\n @param value The ID of the dependent component.\n @param index Barrier index value.\n @since 12"]
    pub fn OH_ArkUI_BarrierOption_SetReferencedId(
        barrierStyle: *mut ArkUI_BarrierOption,
        value: *const ::std::os::raw::c_char,
        index: i32,
    );
}
extern "C" {
    #[doc = " @brief Get the Id of the barrier.\n\n @param barrierStyle auxiliary line information.\n @param index auxiliary line index value.\n @return The Id of the barrier.\n @since 12"]
    pub fn OH_ArkUI_BarrierOption_GetId(
        barrierStyle: *mut ArkUI_BarrierOption,
        index: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Gets the direction of the barrier.\n\n @param barrierStyle auxiliary line information.\n @param index auxiliary line index value.\n @return The direction of the barrier.\n @since 12"]
    pub fn OH_ArkUI_BarrierOption_GetDirection(
        barrierStyle: *mut ArkUI_BarrierOption,
        index: i32,
    ) -> ArkUI_BarrierDirection;
}
extern "C" {
    #[doc = " @brief Get the dependent components of the barrier.\n\n @param barrierStyle auxiliary line information.\n @param index auxiliary line index value.\n @param referencedIndex dependent component Id index value.\n @return The barrier's dependent components.\n @since 12"]
    pub fn OH_ArkUI_BarrierOption_GetReferencedId(
        barrierStyle: *mut ArkUI_BarrierOption,
        index: i32,
        referencedIndex: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Gets the number of dependent components of the barrier.\n\n @param barrierStyle auxiliary line information.\n @param index auxiliary line index value.\n @return The number of dependent components of the barrier.\n @since 12"]
    pub fn OH_ArkUI_BarrierOption_GetReferencedIdSize(
        barrierStyle: *mut ArkUI_BarrierOption,
        index: i32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief creates alignment rule information for subcomponents in relative containers.\n\n @return Alignment rule information.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_Create() -> *mut ArkUI_AlignmentRuleOption;
}
extern "C" {
    #[doc = " @brief Destroys the alignment rule information of subcomponents in relative containers.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_Dispose(option: *mut ArkUI_AlignmentRuleOption);
}
extern "C" {
    #[doc = " @brief Set the start alignment parameter.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @param id The id value of the anchor component.\n @param value Alignment relative to the anchor component.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_SetStart(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_HorizontalAlignment,
    );
}
extern "C" {
    #[doc = " @brief Set the end alignment parameter.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @param id The id value of the anchor component.\n @param value Alignment relative to the anchor component.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_SetEnd(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_HorizontalAlignment,
    );
}
extern "C" {
    #[doc = " @brief Set the parameters for horizontal center alignment.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @param id The id value of the anchor component.\n @param value Alignment relative to anchor component\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_SetCenterHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_HorizontalAlignment,
    );
}
extern "C" {
    #[doc = " @brief Set the parameters for top alignment.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @param id The id value of the anchor component.\n @param value Alignment relative to anchor component\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_SetTop(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_VerticalAlignment,
    );
}
extern "C" {
    #[doc = " @brief Set the bottom alignment parameters.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @param id The id value of the anchor component.\n @param value Alignment relative to anchor component\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_SetBottom(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_VerticalAlignment,
    );
}
extern "C" {
    #[doc = " @brief Set the parameters for vertical center alignment.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @param id The id value of the anchor component.\n @param value Alignment relative to the anchor component.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_SetCenterVertical(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_VerticalAlignment,
    );
}
extern "C" {
    #[doc = " @brief Sets the horizontal offset parameter of the component under the anchor point constraint.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @param horizontal bias value in the horizontal direction.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_SetBiasHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
        horizontal: f32,
    );
}
extern "C" {
    #[doc = " @brief Set the vertical offset parameter of the component under the anchor point constraint.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @param horizontal bias value in the vertical direction.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_SetBiasVertical(
        option: *mut ArkUI_AlignmentRuleOption,
        vertical: f32,
    );
}
extern "C" {
    #[doc = " @brief Get the Id of the start-aligned parameter.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @return The id value of the anchor component.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_GetStartId(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Gets the alignment of the start-aligned parameter.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @return The alignment of the parameters.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_GetStartAlignment(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_HorizontalAlignment;
}
extern "C" {
    #[doc = " @brief Get the end alignment parameter.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @return End-aligned parameter id.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_GetEndId(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Get the end alignment parameter.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @return The alignment of the end-aligned parameter.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_GetEndAlignment(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_HorizontalAlignment;
}
extern "C" {
    #[doc = " @brief Gets the parameters of horizontal center alignment.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @return The id of the parameter of horizontal center alignment.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_GetCenterIdHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Gets the parameters of horizontal center alignment.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @return The alignment of the horizontally centered alignment parameter.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_GetCenterAlignmentHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_HorizontalAlignment;
}
extern "C" {
    #[doc = " @brief Get the top-aligned parameters.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @return Top aligned parameter id.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_GetTopId(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Get the top-aligned parameters.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @return The alignment of the top-aligned parameter.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_GetTopAlignment(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_VerticalAlignment;
}
extern "C" {
    #[doc = " @brief Get the bottom alignment parameters.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @return The id of the bottom-aligned parameter.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_GetBottomId(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Get the bottom alignment parameters.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @return The alignment of the bottom-aligned parameter.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_GetBottomAlignment(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_VerticalAlignment;
}
extern "C" {
    #[doc = " @brief Gets the parameters of vertical center alignment.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @return The id of the vertical center alignment parameter.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_GetCenterIdVertical(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Gets the parameters of vertical center alignment.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @return The alignment of the vertical center alignment parameter.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_GetCenterAlignmentVertical(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_VerticalAlignment;
}
extern "C" {
    #[doc = " @brief Get the bias value in the horizontal direction.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @return The bias value in the horizontal direction.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_GetBiasHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Get the bias value in the vertical direction.\n\n @param option Alignment rule information of subcomponents in the relative container.\n @return bias value in vertical direction.\n @since 12"]
    pub fn OH_ArkUI_AlignmentRuleOption_GetBiasVertical(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Create a configuration item for the ListitemSwipeActionItem interface settings.\n\n @return List Item SwipeActionItem configuration item instance. If the object returns a null pointer,\n         it indicates creation failure, and the reason for the failure may be that the address space is full.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionItem_Create() -> *mut ArkUI_ListItemSwipeActionItem;
}
extern "C" {
    #[doc = " @brief Destroy the ListitemSwipeActionItem instance.\n\n @param option List Item SwipeActionItem instance to be destroyed.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionItem_Dispose(item: *mut ArkUI_ListItemSwipeActionItem);
}
extern "C" {
    #[doc = " @brief Set the layout content of ListItem SwipeActionItem.\n\n @param option List Item SwipeActionItem instance.\n @param builder Layout information.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetContent(
        item: *mut ArkUI_ListItemSwipeActionItem,
        node: ArkUI_NodeHandle,
    );
}
extern "C" {
    #[doc = " @brief Set the threshold for long-distance sliding deletion distance of components.\n\n @param option List Item SwipeActionItem instance.\n @param distance Component long-distance sliding deletion distance threshold.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetActionAreaDistance(
        item: *mut ArkUI_ListItemSwipeActionItem,
        distance: f32,
    );
}
extern "C" {
    #[doc = " @brief Obtain the threshold for long-distance sliding deletion distance of components.\n\n @param option List Item SwipeActionItem instance.\n @return Component long-distance sliding deletion distance threshold. If -1.0f is returned, the return fails.\n         The possible cause of the failure is that the item parameter is abnormal, such as a null pointer.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionItem_GetActionAreaDistance(
        item: *mut ArkUI_ListItemSwipeActionItem,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Set the event to be called when a sliding entry enters the deletion area.\n\n @param option List Item SwipeActionItem instance.\n @param callback Callback Events.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnEnterActionArea(
        item: *mut ArkUI_ListItemSwipeActionItem,
        callback: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    #[doc = " @brief Set the event triggered when a sliding entry enters the deletion area.\n\n @param option List Item SwipeActionItem instance.\n @param userData User defined data.\n @param callback Callback Events.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnEnterActionAreaWithUserData(
        item: *mut ArkUI_ListItemSwipeActionItem,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    #[doc = " @brief Set the event to be called when a component enters the long-range deletion area and deletes a ListItem.\n\n @param option List Item SwipeActionItem instance.\n @param callback Callback Events.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnAction(
        item: *mut ArkUI_ListItemSwipeActionItem,
        callback: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    #[doc = " @brief Set the event triggered when a component enters the long-range deletion area and deletes a ListItem.\n\n @param option List Item SwipeActionItem instance.\n @param userData User defined data.\n @param callback Callback Events.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnActionWithUserData(
        item: *mut ArkUI_ListItemSwipeActionItem,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    #[doc = " @brief Set the event to be called when a sliding entry exits the deletion area.\n\n @param option List Item SwipeActionItem instance.\n @param callback Callback Events.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnExitActionArea(
        item: *mut ArkUI_ListItemSwipeActionItem,
        callback: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    #[doc = " @brief Set the event triggered when a sliding entry exits the deletion area.\n\n @param option List Item SwipeActionItem instance.\n @param userData User defined data.\n @param callback Callback Events.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnExitActionAreaWithUserData(
        item: *mut ArkUI_ListItemSwipeActionItem,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    #[doc = " @brief Set the event triggered when the sliding state of a list item changes.\n\n @param option List Item SwipeActionItem instance.\n @param callback Callback Events.\n        swipeActionState The changed state.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnStateChange(
        item: *mut ArkUI_ListItemSwipeActionItem,
        callback: ::std::option::Option<
            unsafe extern "C" fn(swipeActionState: ArkUI_ListItemSwipeActionState),
        >,
    );
}
extern "C" {
    #[doc = " @brief Set the event triggered when the sliding state of a list item changes.\n\n @param option List Item SwipeActionItem instance.\n @param userData User defined data.\n @param callback Callback Events.\n        swipeActionState The changed state.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnStateChangeWithUserData(
        item: *mut ArkUI_ListItemSwipeActionItem,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                swipeActionState: ArkUI_ListItemSwipeActionState,
                userData: *mut ::std::os::raw::c_void,
            ),
        >,
    );
}
extern "C" {
    #[doc = " @brief Create a configuration item for the ListitemSwipeActionOption interface settings.\n\n @return List Item SwipeActionOption configuration item instance.If the object returns a null pointer,\n         it indicates a creation failure, and the reason for the failure may be that the address space is full.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionOption_Create() -> *mut ArkUI_ListItemSwipeActionOption;
}
extern "C" {
    #[doc = " @brief Destroy the ListitemSwipeActionOption instance.\n\n @param option List Item SwipeActionOption instance to be destroyed.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionOption_Dispose(option: *mut ArkUI_ListItemSwipeActionOption);
}
extern "C" {
    #[doc = " @brief Set the layout content on the left (vertical layout) or top (horizontal layout)\n of the ListItem SwipeActionItem.\n\n @param option List Item SwipeActionItem instance.\n @param builder Layout information.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetStart(
        option: *mut ArkUI_ListItemSwipeActionOption,
        item: *mut ArkUI_ListItemSwipeActionItem,
    );
}
extern "C" {
    #[doc = " @brief Set the layout content on the right (vertical layout) or bottom (horizontal layout)\n of the ListItem SwipeActionItem.\n\n @param option List Item SwipeActionItem instance.\n @param builder Layout information.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetEnd(
        option: *mut ArkUI_ListItemSwipeActionOption,
        item: *mut ArkUI_ListItemSwipeActionItem,
    );
}
extern "C" {
    #[doc = " @brief Set the sliding effect.\n\n @param option List Item SwipeActionItem instance.\n @param edgeEffect Sliding effect.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetEdgeEffect(
        option: *mut ArkUI_ListItemSwipeActionOption,
        edgeEffect: ArkUI_ListItemSwipeEdgeEffect,
    );
}
extern "C" {
    #[doc = " @brief Get the sliding effect.\n\n @param option List Item SwipeActionItem instance.\n @return Sliding effect. The default return value is 0. If -1 is returned, the return fails.\n         The possible cause of the failure is that the option parameter is abnormal, such as a null pointer.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionOption_GetEdgeEffect(
        option: *mut ArkUI_ListItemSwipeActionOption,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief The event called when the sliding operation offset changes.\n\n @param option List Item SwipeActionItem instance.\n @param callback Callback Events.\n        offset Slide offset.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetOnOffsetChange(
        option: *mut ArkUI_ListItemSwipeActionOption,
        callback: ::std::option::Option<unsafe extern "C" fn(offset: f32)>,
    );
}
extern "C" {
    #[doc = " @brief Set the event triggered when the sliding operation offset changes.\n\n @param option List Item SwipeActionItem instance.\n @param userData User defined data.\n @param callback Callback Events.\n        offset Slide offset.\n @since 12"]
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetOnOffsetChangeWithUserData(
        option: *mut ArkUI_ListItemSwipeActionOption,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(offset: f32, userData: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    #[doc = " @brief Create configuration items for the ListChildrenMainSize interface settings.\n\n @return ListChildrenMainSize configuration item instance.If the object returns a null pointer,\n         it indicates a creation failure, and the reason for the failure may be that the address space is full.\n @since 12"]
    pub fn OH_ArkUI_ListChildrenMainSizeOption_Create() -> *mut ArkUI_ListChildrenMainSize;
}
extern "C" {
    #[doc = " @brief Destroy the ListChildrenMainSize instance.\n\n @param option The ListChildrenMainSize instance to be destroyed.\n @since 12"]
    pub fn OH_ArkUI_ListChildrenMainSizeOption_Dispose(option: *mut ArkUI_ListChildrenMainSize);
}
extern "C" {
    #[doc = " @brief Set the default size of ChildrenMainSizeOption for the List component.\n\n @param option ListChildrenMainSize instance.\n @param defaultMainSize The default size of the ListItem under the List, measured in vp.\n @return 0 represents success. If defaultMainSize is less than 0 or option is a null pointer, return 401.\n @since 12"]
    pub fn OH_ArkUI_ListChildrenMainSizeOption_SetDefaultMainSize(
        option: *mut ArkUI_ListChildrenMainSize,
        defaultMainSize: f32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Get the default size of ChildrenMainSizeOption for the List component.\n\n @param option ListChildrenMainSize instance.\n @return The default size of the ListItem under the List is 0, measured in vp.\n         When the option is a null pointer, it returns -1.\n @since 12"]
    pub fn OH_ArkUI_ListChildrenMainSizeOption_GetDefaultMainSize(
        option: *mut ArkUI_ListChildrenMainSize,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Reset the array size of ChildrenMainSizeOption for the List component.\n\n @param option ListChildrenMainSize instance.\n @param totalSize Array size.\n @since 12"]
    pub fn OH_ArkUI_ListChildrenMainSizeOption_Resize(
        option: *mut ArkUI_ListChildrenMainSize,
        totalSize: i32,
    );
}
extern "C" {
    #[doc = " @brief Resize the ChildrenMainSizeOption array operation on the List component.\n\n @param option ListChildrenMainSize instance.\n @param index To modify the starting position of the MainSize array.\n @param deleteCount The number of MainSize arrays to be deleted starting from index.\n @param addCount The number of MainSize arrays to be added starting from index.\n @return 0 represents success. If the function parameter is abnormal, return 401.\n @since 12"]
    pub fn OH_ArkUI_ListChildrenMainSizeOption_Splice(
        option: *mut ArkUI_ListChildrenMainSize,
        index: i32,
        deleteCount: i32,
        addCount: i32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Update the value of the ChildrenMainSizeOption array in the List component.\n\n @param option ListChildrenMainSize instance.\n @param index To modify the starting position of the MainSize array.\n @param mainSize The actual modified value.\n @return 0 represents success. If the function parameter is abnormal, return 401.\n @since 12"]
    pub fn OH_ArkUI_ListChildrenMainSizeOption_UpdateSize(
        option: *mut ArkUI_ListChildrenMainSize,
        index: i32,
        mainSize: f32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Get the value of the ChildrenMainSizeOption array for the List component.\n\n @param option ListChildrenMainSize instance.\n @param index The index position of the value to be obtained.\n @return The value of the specific position of the array. If the function parameter is abnormal, return -1.\n @since 12"]
    pub fn OH_ArkUI_ListChildrenMainSizeOption_GetMainSize(
        option: *mut ArkUI_ListChildrenMainSize,
        index: i32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Creates measurement information for this custom span.\n\n @return Returns a <b>CustomSpanMeasureInfo</b> instance.\n <br> If the result returns nullptr, there may be out of memory.\n @since 12"]
    pub fn OH_ArkUI_CustomSpanMeasureInfo_Create() -> *mut ArkUI_CustomSpanMeasureInfo;
}
extern "C" {
    #[doc = " @brief Disposes of measurement information of this custom span.\n\n @param info The CustomSpanMeasureInfo instance to be destroyed.\n @since 12"]
    pub fn OH_ArkUI_CustomSpanMeasureInfo_Dispose(info: *mut ArkUI_CustomSpanMeasureInfo);
}
extern "C" {
    #[doc = " @brief Obtains the font size of a custom span.\n\n @param info Indicates the pointer to the measurement information of a custom span.\n @return Returns the font size. If a parameter error occurs, <b>0.0f</b> is returned.\n <br> Possible causes: Parameter verification failed, the parameter should not be nullptr.\n @since 12"]
    pub fn OH_ArkUI_CustomSpanMeasureInfo_GetFontSize(
        info: *mut ArkUI_CustomSpanMeasureInfo,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Creates measurement metrics for this custom span.\n\n @return Returns a <b>CustomSpanMetrics</b> instance.\n <br> If the result returns nullptr, there may be out of memory.\n @since 12"]
    pub fn OH_ArkUI_CustomSpanMetrics_Create() -> *mut ArkUI_CustomSpanMetrics;
}
extern "C" {
    #[doc = " @brief Disposes of measurement metrics of this custom span.\n\n @param info The CustomSpanMetrics instance to be destroyed.\n @since 12"]
    pub fn OH_ArkUI_CustomSpanMetrics_Dispose(metrics: *mut ArkUI_CustomSpanMetrics);
}
extern "C" {
    #[doc = " @brief Sets the width for a custom span.\n\n @param metrics Indicates the pointer to a <b>CustomSpanMetrics</b> instance.\n @param width Indicates the width, in px. The width should be greater than 0.\n @return Returns the result code.\n         Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n         Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n         <br> Possible causes: Parameter verification failed, the parameter should not be nullptr.\n @since 12"]
    pub fn OH_ArkUI_CustomSpanMetrics_SetWidth(
        metrics: *mut ArkUI_CustomSpanMetrics,
        width: f32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Sets the height for a custom span.\n\n @param metrics Indicates the pointer to a <b>CustomSpanMetrics</b> instance.\n @param width Indicates the height, in px. The width should be greater than 0.\n @return Returns the result code.\n         Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n         Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n         <br> Possible causes: Parameter verification failed, the parameter should not be nullptr.\n @since 12"]
    pub fn OH_ArkUI_CustomSpanMetrics_SetHeight(
        metrics: *mut ArkUI_CustomSpanMetrics,
        height: f32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Creates drawing information for this custom span.\n\n @return Returns a <b>CustomSpanDrawInfo</b> instance.\n <br> If the result returns nullptr, there may be out of memory.\n @since 12"]
    pub fn OH_ArkUI_CustomSpanDrawInfo_Create() -> *mut ArkUI_CustomSpanDrawInfo;
}
extern "C" {
    #[doc = " @brief Disposes of drawing information for this custom span.\n\n @param info The CustomSpanDrawInfo instance to be destroyed.\n @since 12"]
    pub fn OH_ArkUI_CustomSpanDrawInfo_Dispose(info: *mut ArkUI_CustomSpanDrawInfo);
}
extern "C" {
    #[doc = " @brief Obtains the x-axis offset of the custom span relative to the mounted component.\n\n @param info Indicates the pointer to the drawing information of a custom span.\n @return Returns the x-axis offset. If a parameter error occurs, <b>0.0f</b> is returned.\n <br> Possible causes: Parameter verification failed, the parameter should not be nullptr.\n @since 12"]
    pub fn OH_ArkUI_CustomSpanDrawInfo_GetXOffset(info: *mut ArkUI_CustomSpanDrawInfo) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the top margin of the custom span relative to the mounted component.\n\n @param info Indicates the pointer to the drawing information of a custom span.\n @return Returns the top margin. If a parameter error occurs, <b>0.0f</b> is returned.\n <br> Possible causes: Parameter verification failed, the parameter should not be nullptr.\n @since 12"]
    pub fn OH_ArkUI_CustomSpanDrawInfo_GetLineTop(info: *mut ArkUI_CustomSpanDrawInfo) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the bottom margin of the custom span relative to the mounted component.\n\n @param info Indicates the pointer to the drawing information of a custom span.\n @return Returns the bottom margin. If a parameter error occurs, <b>0.0f</b> is returned.\n <br> Possible causes: Parameter verification failed, the parameter should not be nullptr.\n @since 12"]
    pub fn OH_ArkUI_CustomSpanDrawInfo_GetLineBottom(info: *mut ArkUI_CustomSpanDrawInfo) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the baseline offset of the custom span relative to the mounted component.\n\n @param info Indicates the pointer to the drawing information of a custom span.\n @return Returns the baseline offset. If a parameter error occurs, <b>0.0f</b> is returned.\n <br> Possible causes: Parameter verification failed, the parameter should not be nullptr.\n @since 12"]
    pub fn OH_ArkUI_CustomSpanDrawInfo_GetBaseline(info: *mut ArkUI_CustomSpanDrawInfo) -> f32;
}
extern "C" {
    #[doc = " @brief Create a image frame from the image path.\n @param src Indicates the image path.\n @return Returns the pointer to the image frame object.\n If a null pointer is returned, the object fails to be created. The possible cause is that\n the src parameter is abnormal, for example, the pointer is null.\n @since 12"]
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_CreateFromString(
        src: *mut ::std::os::raw::c_char,
    ) -> *mut ArkUI_ImageAnimatorFrameInfo;
}
extern "C" {
    #[doc = " @brief Create a image frame from the drawable descriptor.\n\n @param drawable Indicates the pointer to the drawable descriptor.\n @return Returns the pointer to the image frame object.\n If a null pointer is returned, the object fails to be created. The possible cause is that\n the drawable parameter is abnormal, for example, the pointer is null.\n @since 12"]
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_CreateFromDrawableDescriptor(
        drawable: *mut ArkUI_DrawableDescriptor,
    ) -> *mut ArkUI_ImageAnimatorFrameInfo;
}
extern "C" {
    #[doc = " @brief Destroy the pointer to the image frame.\n\n @param imageInfo Indicates the pointer to the image frame.\n @since 12"]
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_Dispose(imageInfo: *mut ArkUI_ImageAnimatorFrameInfo);
}
extern "C" {
    #[doc = " @brief Set the width of the image frame.\n\n @param imageInfo Indicates the pointer to the image frame.\n @param width Indicates the width of the image frame, and the unit is PX.\n @since 12"]
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetWidth(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        width: i32,
    );
}
extern "C" {
    #[doc = " @brief Get the width of the image frame.\n\n @param imageInfo Indicates the pointer to the image frame.\n @return Return the width of the image frame, and the unit is PX. Return 0 when the imageInfo is null.\n @since 12"]
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetWidth(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Set the height of the image frame.\n\n @param imageInfo Indicates the pointer to the image frame.\n @param height Indicates the height of the image frame, and the unit is PX.\n @since 12"]
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetHeight(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        height: i32,
    );
}
extern "C" {
    #[doc = " @brief Get the height of the image frame.\n\n @param imageInfo Indicates the pointer to the image frame.\n @return Return the height of the image frame, and the unit is PX. Return 0 when the imageInfo is null.\n @since 12"]
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetHeight(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Set the vertical coordinate of the image relative to the upper left corner of the widget.\n\n @param imageInfo Indicates the pointer to the image frame.\n @param top Indicates the vertical coordinate of the image relative to the upper left corner of the widget,\n and the unit is PX.\n @since 12"]
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetTop(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        top: i32,
    );
}
extern "C" {
    #[doc = " @brief Get the vertical coordinate of the image relative to the upper left corner of the widget.\n\n @param imageInfo Indicates the pointer to the image frame.\n @return Returns the vertical coordinate of the image relative to the upper left corner of the widget,\n and the unit is PX. Return 0 when the imageInfo is null.\n @since 12"]
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetTop(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Set the horizontal coordinate of the image relative to the upper left corner of the widget.\n\n @param imageInfo Indicates the pointer to the image frame.\n @param left Indicates the horizontal coordinate of the image relative to the upper left corner of the widget,\n and the unit is PX.\n @since 12"]
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetLeft(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        left: i32,
    );
}
extern "C" {
    #[doc = " @brief Get the horizontal coordinate of the image relative to the upper left corner of the widget.\n\n @param imageInfo Indicates the pointer to the image frame.\n @return Returns the horizontal coordinate of the image relative to the upper left corner of the widget,\n and the unit is PX. Return 0 when the imageInfo is null.\n @since 12"]
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetLeft(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Set the playback duration of the image frame.\n\n @param imageInfo Indicates the pointer to the image frame.\n @param duration Indicates the playback duration of each image frame, and the unit is milliseconds.\n @since 12"]
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetDuration(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        duration: i32,
    );
}
extern "C" {
    #[doc = " @brief Get the playback duration of the image frame.\n\n @param imageInfo Indicates the pointer to the image frame.\n @return Returns the playback duration of the image frame, and the unit is milliseconds.\n Return 0 when the imageInfo is null.\n @since 12"]
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetDuration(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Create accessibility state.\n\n @return Returns the pointer to the accessibility state object.\n If a null pointer is returned, the object fails to be created. The possible cause is that the address space is full.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityState_Create() -> *mut ArkUI_AccessibilityState;
}
extern "C" {
    #[doc = " @brief Dispose accessibility state.\n\n @param state accessibility state object.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityState_Dispose(state: *mut ArkUI_AccessibilityState);
}
extern "C" {
    #[doc = " @brief Set accessibility state disabled.\n\n @param state accessibility state object.\n @param isDisabled accessibility state disabled, Value 1 indicates disabled and 0 indicates enbled.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityState_SetDisabled(
        state: *mut ArkUI_AccessibilityState,
        isDisabled: i32,
    );
}
extern "C" {
    #[doc = " @brief Get accessibility state disabled.\n\n @param state accessibility state object.\n @return accessibility state disabled, Value 1 indicates disabled and 0 indicates enbled. The default value is 0.\n         If the function parameter is abnormal, return the default value.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityState_IsDisabled(state: *mut ArkUI_AccessibilityState) -> i32;
}
extern "C" {
    #[doc = " @brief Set accessibility state selected.\n\n @param state accessibility state object.\n @param isSelected accessibility state selected, Value 1 indicates selected, and 0 indicates not selected.\n        The default value is 0.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityState_SetSelected(
        state: *mut ArkUI_AccessibilityState,
        isSelected: i32,
    );
}
extern "C" {
    #[doc = " @brief Get accessibility state selected.\n\n @param state accessibility state object.\n @return accessibility state selected, Value 1 indicates selected, and 0 indicates not selected.\n         The default value is 0.\n         If the function parameter is abnormal, return the default value.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityState_IsSelected(state: *mut ArkUI_AccessibilityState) -> i32;
}
extern "C" {
    #[doc = " @brief Set accessibility checked state.\n\n @param state accessibility state object.\n @param checkedState checked state, and uses the {@link ArkUI_AccessibilityCheckedState} enumeration value,\n        The default value is ARKUI_ACCESSIBILITY_UNCHECKED.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityState_SetCheckedState(
        state: *mut ArkUI_AccessibilityState,
        checkedState: i32,
    );
}
extern "C" {
    #[doc = " @brief Get accessibility checked state.\n\n @param state accessibility state object.\n @return checked state, and uses the {@link ArkUI_AccessibilityCheckedState} enumeration value,\n         The default value is ARKUI_ACCESSIBILITY_UNCHECKED.\n         If the function parameter is abnormal, return the default value.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityState_GetCheckedState(state: *mut ArkUI_AccessibilityState)
        -> i32;
}
extern "C" {
    #[doc = " @brief Create accessibility value.\n\n @return Returns the pointer to the accessibility state object.\n If a null pointer is returned, the object fails to be created. The possible cause is that the address space is full.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityValue_Create() -> *mut ArkUI_AccessibilityValue;
}
extern "C" {
    #[doc = " @brief Dispose accessibility value.\n\n @param value accessibility value object.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityValue_Dispose(value: *mut ArkUI_AccessibilityValue);
}
extern "C" {
    #[doc = " @brief Set accessibility minimum value.\n\n @param value accessibility value object.\n @param min minimum value based on range components, The default value is -1.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityValue_SetMin(value: *mut ArkUI_AccessibilityValue, min: i32);
}
extern "C" {
    #[doc = " @brief Get accessibility minimum value.\n\n @param value accessibility value object.\n @return minimum value based on range components, The default value is -1.\n         If the function parameter is abnormal, return -1.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityValue_GetMin(value: *mut ArkUI_AccessibilityValue) -> i32;
}
extern "C" {
    #[doc = " @brief Set accessibility minimum value.\n\n @param value accessibility value object.\n @param max maximum value based on range components, The default value is -1.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityValue_SetMax(value: *mut ArkUI_AccessibilityValue, max: i32);
}
extern "C" {
    #[doc = " @brief Get accessibility minimum value.\n\n @param value accessibility value object.\n @return maximum value based on range components, The default value is -1.\n         If the function parameter is abnormal, return -1.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityValue_GetMax(value: *mut ArkUI_AccessibilityValue) -> i32;
}
extern "C" {
    #[doc = " @brief Set accessibility current value.\n\n @param value accessibility value object.\n @param current value based on range components, The default value is -1.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityValue_SetCurrent(
        value: *mut ArkUI_AccessibilityValue,
        current: i32,
    );
}
extern "C" {
    #[doc = " @brief Get accessibility current value.\n\n @param value accessibility value object.\n @return current value based on range components, The default value is -1.\n         If the function parameter is abnormal, return -1.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityValue_GetCurrent(value: *mut ArkUI_AccessibilityValue) -> i32;
}
extern "C" {
    #[doc = " @brief Set accessibility text value.\n\n @param value accessibility value object.\n @param text The textual description information of the component, which defaults to an empty string.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityValue_SetText(
        value: *mut ArkUI_AccessibilityValue,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[doc = " @brief Get accessibility text value.\n\n @param value accessibility value object.\n @return The textual description information of the component, which defaults to an empty string;\n         If the function parameter is abnormal, return null.\n @since 12"]
    pub fn OH_ArkUI_AccessibilityValue_GetText(
        value: *mut ArkUI_AccessibilityValue,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Destroy the instance of Customs Property.\n\n @param handle The instance of Customs Property to be destroyed.\n @since 14"]
    pub fn OH_ArkUI_CustomProperty_Destroy(handle: *mut ArkUI_CustomProperty);
}
extern "C" {
    #[doc = " @brief Get custom attribute value information.\n\n @param handle Custom attribute object pointer.\n @return Customize the value information within the attribute structure.\n @since 14"]
    pub fn OH_ArkUI_CustomProperty_GetStringValue(
        handle: *mut ArkUI_CustomProperty,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Get window name from HostWindowInfo.\n\n @param info HostWindowInfo object pointer.\n @return Window name in HostWindowInfo.\n @since 15"]
    pub fn OH_ArkUI_HostWindowInfo_GetName(
        info: *mut ArkUI_HostWindowInfo,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Destroy the instance of HostWindowInfo.\n\n @param info Instance of HostWindowInfo to be destroyed.\n @since 15"]
    pub fn OH_ArkUI_HostWindowInfo_Destroy(info: *mut ArkUI_HostWindowInfo);
}
extern "C" {
    #[doc = " @brief Destroy ActiveChildenInfo instance.\n\n @param handle ActiveChild instance to be destroyed.\n @since 14"]
    pub fn OH_ArkUI_ActiveChildrenInfo_Destroy(handle: *mut ArkUI_ActiveChildrenInfo);
}
extern "C" {
    #[doc = " @brief Retrieve the child nodes of ActiveChildenInfo with the structure index.\n\n @param handle The ActiveChildenInfo instance for obtaining information.\n @param index The index of child nodes.\n @return The child node pointer corresponding to the index. Return nullptr in case of exception.\n @since 14"]
    pub fn OH_ArkUI_ActiveChildrenInfo_GetNodeByIndex(
        handle: *mut ArkUI_ActiveChildrenInfo,
        index: i32,
    ) -> ArkUI_NodeHandle;
}
extern "C" {
    #[doc = " @brief Retrieve the number of nodes within the structure of ActiveChildenInfo.\n\n @param handle The ActiveChildenInfo instance for obtaining information.\n @return Number of child nodes. Default value: 0.\n @since 14"]
    pub fn OH_ArkUI_ActiveChildrenInfo_GetCount(handle: *mut ArkUI_ActiveChildrenInfo) -> i32;
}
extern "C" {
    #[doc = " @brief Create linear progress indicator style information.\n\n @return Returns a <b>ProgressLinearStyleOption</b> instance.\n <br> If the result returns nullptr, there may be out of memory.\n @since 15"]
    pub fn OH_ArkUI_ProgressLinearStyleOption_Create() -> *mut ArkUI_ProgressLinearStyleOption;
}
extern "C" {
    #[doc = " @brief Destroy linear progress indicator style information.\n\n @param option Linear progress indicator style information.\n @since 15"]
    pub fn OH_ArkUI_ProgressLinearStyleOption_Destroy(option: *mut ArkUI_ProgressLinearStyleOption);
}
extern "C" {
    #[doc = " @brief Set whether the scan effect is enabled.\n\n @param option Linear progress indicator style information.\n @param enabled Whether to enable the scan effect. Default value: false.\n @since 15"]
    pub fn OH_ArkUI_ProgressLinearStyleOption_SetScanEffectEnabled(
        option: *mut ArkUI_ProgressLinearStyleOption,
        enabled: bool,
    );
}
extern "C" {
    #[doc = " @brief Set whether smoothing effect is enabled.\n\n @param option Linear progress indicator style information.\n @param enabled Whether to enable the smooth effect. When this effect is enabled, the progress change to\n the set value takes place gradually. Otherwise, it takes place immediately. Default value: true.\n @since 15"]
    pub fn OH_ArkUI_ProgressLinearStyleOption_SetSmoothEffectEnabled(
        option: *mut ArkUI_ProgressLinearStyleOption,
        enabled: bool,
    );
}
extern "C" {
    #[doc = " @brief Set linear progress indicator stroke width.\n\n @param option Linear progress indicator style information.\n @param strokeWidth Stroke width of the progress indicator. It cannot be set in percentage.\n Default value: 4.0vp.\n @since 15"]
    pub fn OH_ArkUI_ProgressLinearStyleOption_SetStrokeWidth(
        option: *mut ArkUI_ProgressLinearStyleOption,
        strokeWidth: f32,
    );
}
extern "C" {
    #[doc = " @brief Set linear progress indicator stroke radius.\n\n @param option Linear progress indicator style information.\n @param strokeRadius Rounded corner radius of the progress indicator. Value range: [0, strokeWidth/2].\n Default value: strokeWidth/2.\n @since 15"]
    pub fn OH_ArkUI_ProgressLinearStyleOption_SetStrokeRadius(
        option: *mut ArkUI_ProgressLinearStyleOption,
        strokeRadius: f32,
    );
}
extern "C" {
    #[doc = " @brief Get whether scan effect is enable.\n\n @param option Linear progress indicator style information.\n @return Whether to enable the scan effect.\n @since 15"]
    pub fn OH_ArkUI_ProgressLinearStyleOption_GetScanEffectEnabled(
        option: *mut ArkUI_ProgressLinearStyleOption,
    ) -> bool;
}
extern "C" {
    #[doc = " @brief Get whether smoothing effect is enabled.\n\n @param option Linear progress indicator style information.\n @return Whether to enable the smooth effect.\n @since 15"]
    pub fn OH_ArkUI_ProgressLinearStyleOption_GetSmoothEffectEnabled(
        option: *mut ArkUI_ProgressLinearStyleOption,
    ) -> bool;
}
extern "C" {
    #[doc = " @brief Get linear progress indicator stroke width.\n\n @param option Linear progress indicator style information.\n @return Stroke width of the progress indicator.\n @since 15"]
    pub fn OH_ArkUI_ProgressLinearStyleOption_GetStrokeWidth(
        option: *mut ArkUI_ProgressLinearStyleOption,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Get linear progress indicator stroke radius.\n\n @param option Linear progress indicator style information.\n @return Rounded corner radius of the progress indicator.\n @since 15"]
    pub fn OH_ArkUI_ProgressLinearStyleOption_GetStrokeRadius(
        option: *mut ArkUI_ProgressLinearStyleOption,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Creates an option for taking snapshot, the returned value must be released through\n        {@link OH_ArkUI_DestroySnapshotOptions} when it's not used anymore.\n\n @return Returns the pointer to the created snapshot options object.If the object returns a null pointer,\n         it indicates a creation failure, and the reason for the failure may be that the address space is full.\n @since 15"]
    pub fn OH_ArkUI_CreateSnapshotOptions() -> *mut ArkUI_SnapshotOptions;
}
extern "C" {
    #[doc = " @brief Dispose a snapshot option object.\n\n @param snapshotOptions Indicates the pointer to the snapshot option.\n @since 15"]
    pub fn OH_ArkUI_DestroySnapshotOptions(snapshotOptions: *mut ArkUI_SnapshotOptions);
}
extern "C" {
    #[doc = " @brief Config the snapshot option with scale.\n\n @param snapshotOptions Indicates the pointer to the snapshot option.\n @param scale Indicates the scale property to take the snapshot.\n @return Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n         Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n @since 15"]
    pub fn OH_ArkUI_SnapshotOptions_SetScale(
        snapshotOptions: *mut ArkUI_SnapshotOptions,
        scale: f32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Create a cross-language option instance.\n\n @return Returns a cross-language option instance. If the result is a null pointer, it may be out of memory.\n @since 15"]
    pub fn OH_ArkUI_CrossLanguageOption_Create() -> *mut ArkUI_CrossLanguageOption;
}
extern "C" {
    #[doc = " @brief Destroy the cross-language option instance.\n\n @param option The cross-language option instance.\n @since 15"]
    pub fn OH_ArkUI_CrossLanguageOption_Destroy(option: *mut ArkUI_CrossLanguageOption);
}
extern "C" {
    #[doc = " @brief Enable the attribute setting in the cross-language option.\n\n @param option The cross-language option.\n @param enabled The attribute setting in the cross-language option.\n Default value: false.\n @since 15"]
    pub fn OH_ArkUI_CrossLanguageOption_SetAttributeSettingStatus(
        option: *mut ArkUI_CrossLanguageOption,
        enabled: bool,
    );
}
extern "C" {
    #[doc = " @brief Get the attribute setting enable of the cross-language option.\n\n @param option The cross-language option.\n @return The attribute setting enable of the cross-language option.\n @since 15"]
    pub fn OH_ArkUI_CrossLanguageOption_GetAttributeSettingStatus(
        option: *mut ArkUI_CrossLanguageOption,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_UIInputEvent {
    _unused: [u8; 0],
}
pub const ArkUI_UIInputEvent_Type_ARKUI_UIINPUTEVENT_TYPE_UNKNOWN: ArkUI_UIInputEvent_Type = 0;
pub const ArkUI_UIInputEvent_Type_ARKUI_UIINPUTEVENT_TYPE_TOUCH: ArkUI_UIInputEvent_Type = 1;
pub const ArkUI_UIInputEvent_Type_ARKUI_UIINPUTEVENT_TYPE_AXIS: ArkUI_UIInputEvent_Type = 2;
#[doc = " Mouse event."]
pub const ArkUI_UIInputEvent_Type_ARKUI_UIINPUTEVENT_TYPE_MOUSE: ArkUI_UIInputEvent_Type = 3;
#[doc = " @brief Enumerates the UI input event types.\n\n @since 12"]
pub type ArkUI_UIInputEvent_Type = ::std::os::raw::c_uint;
#[doc = " Cancellation of touch."]
pub const UI_TOUCH_EVENT_ACTION_CANCEL: _bindgen_ty_1 = 0;
#[doc = " Pressing of a touch point."]
pub const UI_TOUCH_EVENT_ACTION_DOWN: _bindgen_ty_1 = 1;
#[doc = " Moving of a touch point."]
pub const UI_TOUCH_EVENT_ACTION_MOVE: _bindgen_ty_1 = 2;
#[doc = " Lifting of a touch point."]
pub const UI_TOUCH_EVENT_ACTION_UP: _bindgen_ty_1 = 3;
#[doc = " @brief Defines the action code of the input event.\n\n @since 12"]
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[doc = " Unknown tool type."]
pub const UI_INPUT_EVENT_TOOL_TYPE_UNKNOWN: _bindgen_ty_2 = 0;
#[doc = " Finger."]
pub const UI_INPUT_EVENT_TOOL_TYPE_FINGER: _bindgen_ty_2 = 1;
#[doc = " Pen."]
pub const UI_INPUT_EVENT_TOOL_TYPE_PEN: _bindgen_ty_2 = 2;
#[doc = " Mouse."]
pub const UI_INPUT_EVENT_TOOL_TYPE_MOUSE: _bindgen_ty_2 = 3;
#[doc = " TouchPad."]
pub const UI_INPUT_EVENT_TOOL_TYPE_TOUCHPAD: _bindgen_ty_2 = 4;
#[doc = " JoyStick."]
pub const UI_INPUT_EVENT_TOOL_TYPE_JOYSTICK: _bindgen_ty_2 = 5;
#[doc = " @brief Defines the tool type of the touch event.\n\n @since 12"]
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[doc = " Unknown source type."]
pub const UI_INPUT_EVENT_SOURCE_TYPE_UNKNOWN: _bindgen_ty_3 = 0;
#[doc = " Mouse."]
pub const UI_INPUT_EVENT_SOURCE_TYPE_MOUSE: _bindgen_ty_3 = 1;
#[doc = " Touchscreen."]
pub const UI_INPUT_EVENT_SOURCE_TYPE_TOUCH_SCREEN: _bindgen_ty_3 = 2;
#[doc = " @brief Defines the source type of the touch event.\n\n @since 12"]
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[doc = " Both the node and its child node respond to the hit test of a touch event, but its sibling node is blocked from\n  the hit test."]
pub const HitTestMode_HTM_DEFAULT: HitTestMode = 0;
#[doc = " The node responds to the hit test of a touch event, but its child node and sibling node are blocked from the hit\n  test."]
pub const HitTestMode_HTM_BLOCK: HitTestMode = 1;
#[doc = " Both the node and its child node respond to the hit test of a touch event, and its sibling node is also\n  considered during the hit test."]
pub const HitTestMode_HTM_TRANSPARENT: HitTestMode = 2;
#[doc = " The node does not respond to the hit test of a touch event, but its child node and sibling node are considered\n  during the hit test."]
pub const HitTestMode_HTM_NONE: HitTestMode = 3;
#[doc = " @brief Enumerates the hit test modes.\n\n @since 12"]
pub type HitTestMode = ::std::os::raw::c_uint;
#[doc = " Invalid."]
pub const UI_MOUSE_EVENT_ACTION_UNKNOWN: _bindgen_ty_4 = 0;
#[doc = " Press."]
pub const UI_MOUSE_EVENT_ACTION_PRESS: _bindgen_ty_4 = 1;
#[doc = " Release."]
pub const UI_MOUSE_EVENT_ACTION_RELEASE: _bindgen_ty_4 = 2;
#[doc = " Move."]
pub const UI_MOUSE_EVENT_ACTION_MOVE: _bindgen_ty_4 = 3;
#[doc = " @brief Define the Action Code for mouse events.\n\n @since 12"]
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
#[doc = " None."]
pub const UI_MOUSE_EVENT_BUTTON_NONE: _bindgen_ty_5 = 0;
#[doc = " Left."]
pub const UI_MOUSE_EVENT_BUTTON_LEFT: _bindgen_ty_5 = 1;
#[doc = " Right."]
pub const UI_MOUSE_EVENT_BUTTON_RIGHT: _bindgen_ty_5 = 2;
#[doc = " Middle."]
pub const UI_MOUSE_EVENT_BUTTON_MIDDLE: _bindgen_ty_5 = 3;
#[doc = " Back."]
pub const UI_MOUSE_EVENT_BUTTON_BACK: _bindgen_ty_5 = 4;
#[doc = " Forward."]
pub const UI_MOUSE_EVENT_BUTTON_FORWARD: _bindgen_ty_5 = 5;
#[doc = " @brief Define the button type for mouse events.\n\n @since 12"]
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
#[doc = " Ctrl."]
pub const ArkUI_ModifierKeyName_ARKUI_MODIFIER_KEY_CTRL: ArkUI_ModifierKeyName = 1;
#[doc = " Shift."]
pub const ArkUI_ModifierKeyName_ARKUI_MODIFIER_KEY_SHIFT: ArkUI_ModifierKeyName = 2;
#[doc = " Alt."]
pub const ArkUI_ModifierKeyName_ARKUI_MODIFIER_KEY_ALT: ArkUI_ModifierKeyName = 4;
#[doc = " Fn."]
pub const ArkUI_ModifierKeyName_ARKUI_MODIFIER_KEY_FN: ArkUI_ModifierKeyName = 8;
#[doc = " @brief Defines an enum for modifier keys.\n\n @since 12"]
pub type ArkUI_ModifierKeyName = ::std::os::raw::c_uint;
#[doc = " Unknown."]
pub const ArkUI_InteractionHand_ARKUI_EVENT_HAND_NONE: ArkUI_InteractionHand = 0;
#[doc = " Left hand."]
pub const ArkUI_InteractionHand_ARKUI_EVENT_HAND_LEFT: ArkUI_InteractionHand = 1;
#[doc = " Right hand."]
pub const ArkUI_InteractionHand_ARKUI_EVENT_HAND_RIGHT: ArkUI_InteractionHand = 2;
#[doc = " @brief Defines whether the touch event is from the left or right hand.\n\n @since 15"]
pub type ArkUI_InteractionHand = ::std::os::raw::c_uint;
#[doc = " ABS_X."]
pub const UI_FOCUS_AXIS_EVENT_ABS_X: _bindgen_ty_6 = 0;
#[doc = " ABS_Y."]
pub const UI_FOCUS_AXIS_EVENT_ABS_Y: _bindgen_ty_6 = 1;
#[doc = " ABS_Z."]
pub const UI_FOCUS_AXIS_EVENT_ABS_Z: _bindgen_ty_6 = 2;
#[doc = " ABS_RZ."]
pub const UI_FOCUS_AXIS_EVENT_ABS_RZ: _bindgen_ty_6 = 3;
#[doc = " ABS_GAS."]
pub const UI_FOCUS_AXIS_EVENT_ABS_GAS: _bindgen_ty_6 = 4;
#[doc = " ABS_BRAKE."]
pub const UI_FOCUS_AXIS_EVENT_ABS_BRAKE: _bindgen_ty_6 = 5;
#[doc = " ABS_HAT0X."]
pub const UI_FOCUS_AXIS_EVENT_ABS_HAT0X: _bindgen_ty_6 = 6;
#[doc = " ABS_HAT0Y."]
pub const UI_FOCUS_AXIS_EVENT_ABS_HAT0Y: _bindgen_ty_6 = 7;
#[doc = " @brief Defines an enum for the axis types for focus axis events.\n\n @since 15"]
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[doc = " The axis event is abnormal."]
pub const UI_AXIS_EVENT_ACTION_NONE: _bindgen_ty_7 = 0;
#[doc = " The axis event begins."]
pub const UI_AXIS_EVENT_ACTION_BEGIN: _bindgen_ty_7 = 1;
#[doc = " The axis event is updated."]
pub const UI_AXIS_EVENT_ACTION_UPDATE: _bindgen_ty_7 = 2;
#[doc = " The axis event ends."]
pub const UI_AXIS_EVENT_ACTION_END: _bindgen_ty_7 = 3;
#[doc = " The axis event is canceled."]
pub const UI_AXIS_EVENT_ACTION_CANCEL: _bindgen_ty_7 = 4;
#[doc = " @brief Enumerates the action types for axis events.\n\n @since 15"]
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " @brief Obtains the type of this UI input event.\n\n @param event Indicates the pointer to the current UI input event.\n @return Returns the type of the current UI input event; returns <b>0</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_UIInputEvent_GetType(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the action type of this UI input event.\n\n @param event Indicates the pointer to the current UI input event.\n @return Returns the action type of the current UI input event; returns <b>0</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_UIInputEvent_GetAction(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the source type of this UI input event.\n\n @param event Indicates the pointer to the current UI input event.\n @return Returns the source type of the current UI input event.\n @since 12"]
    pub fn OH_ArkUI_UIInputEvent_GetSourceType(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the tool type of this UI input event.\n\n @param event Indicates the pointer to the current UI input event.\n @return Returns the tool type of the current UI input event.\n @since 12"]
    pub fn OH_ArkUI_UIInputEvent_GetToolType(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the time when this UI input event occurs.\n\n @param event Indicates the pointer to the current UI input event.\n @return Returns the time when the UI input event occurs; returns <b>0</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_UIInputEvent_GetEventTime(event: *const ArkUI_UIInputEvent) -> i64;
}
extern "C" {
    #[doc = " @brief Obtains the number of touch points from a directional input event (such as a touch event, mouse event,\n or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @return Returns the number of touch points for the directional input event.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetPointerCount(event: *const ArkUI_UIInputEvent) -> u32;
}
extern "C" {
    #[doc = " @brief Obtains the ID of a touch point from a directional input event (such as a touch event, mouse event,\n or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @return Returns the ID of the corresponding touch point.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetPointerId(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the ID of the touch pointer that triggers the current touch event.\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @return Returns the result code.\n         Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n         Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n @since 15"]
    pub fn OH_ArkUI_PointerEvent_GetChangedPointerId(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: *mut u32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the X coordinate relative to the upper left corner of the current component from a directional\n input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the directional input event.\n @return Returns the X coordinate relative to the upper left corner of the current component;\n returns <b>0</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetX(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the X coordinate of a specific touch point relative to the upper left corner of the current component\n from a directional input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @return Returns the X coordinate relative to the upper left corner of the current component;\n returns <b>0.0f</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetXByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the Y coordinate relative to the upper left corner of the current component from a directional\n input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the UI input event.\n @return Returns the Y coordinate relative to the upper left corner of the current component;\n returns <b>0</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetY(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the Y coordinate of a specific touch point relative to the upper left corner of the current component\n from a directional input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @return Returns the Y coordinate relative to the upper left corner of the current component;\n returns <b>0.0f</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetYByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the X coordinate relative to the upper left corner of the current application window from a\n directional input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the UI input event.\n @return Returns the X coordinate relative to the upper left corner of the current application window;\n returns <b>0</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetWindowX(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the X coordinate of a specific touch point relative to the upper left corner of the current\n application window from a directional input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @return Returns the X coordinate relative to the upper left corner of the current application window;\n returns <b>0.0f</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetWindowXByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the Y coordinate relative to the upper left corner of the current application window from a\n directional input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the UI input event.\n @return Returns the Y coordinate relative to the upper left corner of the current application window;\n returns <b>0</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetWindowY(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the Y coordinate of a specific touch point relative to the upper left corner of the current\n application window from a directional input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @return Returns the Y coordinate relative to the upper left corner of the current application window;\n returns <b>0.0f</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetWindowYByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the X coordinate relative to the upper left corner of the current screen from a directional input\n event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the UI input event.\n @return Returns the X coordinate relative to the upper left corner of the current screen;\n returns <b>0</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetDisplayX(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the X coordinate of a specific touch point relative to the upper left corner of the current screen\n from a directional input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @return Returns the X coordinate relative to the upper left corner of the current screen;\n returns <b>0.0f</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetDisplayXByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the Y coordinate relative to the upper left corner of the current screen from a directional input\n event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the UI input event.\n @return Returns the Y coordinate relative to the upper left corner of the current screen;\n returns <b>0</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetDisplayY(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the Y coordinate of a specific touch point relative to the upper left corner of the current screen\n from a directional input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @return Returns the Y coordinate relative to the upper left corner of the current screen;\n returns <b>0.0f</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetDisplayYByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the pressure applied to the touchscreen from a directional input event (for example, a touch event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @return Returns the pressure applied to the touchscreen; returns <b>0.0f</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetPressure(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the angle relative to the YZ plane from a directional input event (for example, a touch event).\n The value range is [-90, 90]. A positive value indicates a rightward tilt.\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @return Returns the angle relative to the YZ plane.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetTiltX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the angle relative to the XZ plane from a directional input event (for example, a touch event).\n The value range is [-90, 90]. A positive value indicates a downward tilt.\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @return Returns the angle relative to the XZ plane.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetTiltY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the width of the touch area from a directional input event (for example, a touch event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @return Returns the width of the touch area.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetTouchAreaWidth(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the height of the touch area from a directional input event (for example, a touch event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @return Returns the height of the touch area.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetTouchAreaHeight(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains whether the current touch event is from the left or right hand.\n\n @param event Pointer to the current UI input event.\n @param hand Whether the touch point is from the left or right hand.\n @return Returns the result code.\n         Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n         Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n @since 15"]
    pub fn OH_ArkUI_PointerEvent_GetInteractionHand(
        event: *const ArkUI_UIInputEvent,
        hand: *mut ArkUI_InteractionHand,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains whether the current touch event is from the left or right hand.\n\n @param event Pointer to the current UI input event.\n @param pointerIndex Index of the target touch point in the multi-touch data list.\n @param hand Whether the touch point is from the left or right hand.\n @return Returns the result code.\n         Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n         Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n @since 15"]
    pub fn OH_ArkUI_PointerEvent_GetInteractionHandByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: i32,
        hand: *mut ArkUI_InteractionHand,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the number of historical events from a directional input event (such as a touch event, mouse event,\n or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @return Returns the number of historical events.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistorySize(event: *const ArkUI_UIInputEvent) -> u32;
}
extern "C" {
    #[doc = " @brief Obtains the occurrence time of a historical event from a directional input event (such as a touch event,\n mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param historyIndex Indicates the index of the target historical event.\n @return Returns the time when the UI input event occurs; returns <b>0</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistoryEventTime(
        event: *const ArkUI_UIInputEvent,
        historyIndex: u32,
    ) -> i64;
}
extern "C" {
    #[doc = " @brief Obtains the number of touch points in a specific historical event from a directional input event (such as\n a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param historyIndex Indicates the index of the target historical event.\n @return Returns the number of touch points in the specified historical event\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistoryPointerCount(
        event: *const ArkUI_UIInputEvent,
        historyIndex: u32,
    ) -> u32;
}
extern "C" {
    #[doc = " @brief Obtains the ID of a touch point in a specific historical event from a directional input event (such as\n a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @param historyIndex Indicates the index of the target historical event.\n @return Returns the ID of the corresponding touch point in the specified historical event.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistoryPointerId(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the X coordinate of a specific touch point in a historical event relative to the upper left corner\n of the current component from a directional input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @param historyIndex Indicates the index of the target historical event.\n @return Returns the X coordinate relative to the upper left corner of the current component;\n returns <b>0.0f</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistoryX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the Y coordinate of a specific touch point in a historical event relative to the upper left corner\n of the current component from a directional input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @param historyIndex Indicates the index of the target historical event.\n @return Returns the Y coordinate relative to the upper left corner of the current component;\n returns <b>0.0f</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistoryY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the X coordinate of a specific touch point in a historical event relative to the upper left corner\n of the current application window from a directional input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @param historyIndex Indicates the index of the target historical event.\n @return Returns the X coordinate relative to the upper left corner of the current application window;\n returns <b>0.0f</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistoryWindowX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the Y coordinate of a specific touch point in a historical event relative to the upper left corner\n of the current application window from a directional input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @param historyIndex Indicates the index of the target historical event.\n @return Returns the Y coordinate relative to the upper left corner of the current application window;\n returns <b>0.0f</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistoryWindowY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the X coordinate of a specific touch point in a historical event relative to the upper left corner\n of the current screen from a directional input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @param historyIndex Indicates the index of the target historical event.\n @return Returns the X coordinate relative to the upper left corner of the current screen;\n returns <b>0.0f</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistoryDisplayX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the Y coordinate of a specific touch point in a historical event relative to the upper left corner\n of the current screen from a directional input event (such as a touch event, mouse event, or axis event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @param historyIndex Indicates the index of the target historical event.\n @return Returns the Y coordinate relative to the upper left corner of the current screen;\n returns <b>0.0f</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistoryDisplayY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the pressure applied to the touchscreen in a specific historical event from a directional input event\n (for example, a touch event)..\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @param historyIndex Indicates the index of the target historical event.\n @return Returns the pressure applied to the touchscreen; returns <b>0.0f</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistoryPressure(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the angle relative to the YZ plane in a specific historical event from a directional input event\n (for example, a touch event). The value range is [-90, 90]. A positive value indicates a rightward tilt.\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @param historyIndex Indicates the index of the target historical event.\n @return Returns the angle relative to the YZ plane.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistoryTiltX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the angle relative to the XZ plane in a specific historical event from a directional input event\n (for example, a touch event). The value range is [-90, 90]. A positive value indicates a downward tilt.\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @param historyIndex Indicates the index of the target historical event.\n @return Returns the angle relative to the XZ plane.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistoryTiltY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the width of the touch area in a specific historical event from a directional input event\n (for example, a touch event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @param historyIndex Indicates the index of the target historical event.\n @return Returns the width of the touch area.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistoryTouchAreaWidth(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the height of the touch area in a specific historical event from a directional input event\n (for example, a touch event).\n\n @param event Indicates the pointer to the current UI input event.\n @param pointerIndex Indicates the index of the target touch point in the multi-touch data list.\n @param historyIndex Indicates the index of the target historical event.\n @return Returns the height of the touch area.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_GetHistoryTouchAreaHeight(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the value of the vertical scroll axis for this axis event.\n\n @param event Indicates the pointer to the UI input event.\n @return Returns the value of the vertical scroll axis of the current axis event;\n returns <b>0</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_AxisEvent_GetVerticalAxisValue(event: *const ArkUI_UIInputEvent) -> f64;
}
extern "C" {
    #[doc = " @brief Obtains the value of the horizontal scroll axis for this axis event.\n\n @param event Indicates the pointer to the UI input event.\n @return Returns the value of the horizontal scroll axis of the current axis event;\n returns <b>0</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_AxisEvent_GetHorizontalAxisValue(event: *const ArkUI_UIInputEvent) -> f64;
}
extern "C" {
    #[doc = " @brief Obtains the scale value of the pinch axis for this axis event.\n\n @param event Indicates the pointer to the UI input event.\n @return Returns the scale value of the pinch axis of the current axis event;\n returns <b>0</b> if any parameter error occurs.\n @since 12"]
    pub fn OH_ArkUI_AxisEvent_GetPinchAxisScaleValue(event: *const ArkUI_UIInputEvent) -> f64;
}
extern "C" {
    #[doc = " @brief Obtains the action type of the current axis event.\n\n @param event Indicates the pointer to the current UI input event.\n @return Returns the action type of the current axis event.\n @since 15"]
    pub fn OH_ArkUI_AxisEvent_GetAxisAction(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    #[doc = " @brief Sets how the component behaves during hit testing.\n\n @param event Indicates the pointer to the current UI input event.\n @param mode Indicates how the component behaves during hit testing. The parameter type is {@link HitTestMode}.\n @return Returns the status code of the execution.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_SetInterceptHitTestMode(
        event: *const ArkUI_UIInputEvent,
        mode: HitTestMode,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Get the value of the button type for mouse events.\n\n @param event Represents a pointer to the current UI input event.\n @return Return to the mouse button type, where <b>1</b> is the left button, <b>2</b> is the right button,\n <b>3</b> is the middle button, <b>4</b> is the back button, and <b>5</b> is the forward button.\n @since 12"]
    pub fn OH_ArkUI_MouseEvent_GetMouseButton(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    #[doc = " @brief Get the value of the mouse action type for mouse events.\n\n @param event Represents a pointer to the current UI input event.\n @return Returns the type of mouse action, where <b>1</b> represents button pressed,\n <b>2</b> represents button released, and <b>3</b> represents mouse movement.\n @since 12"]
    pub fn OH_ArkUI_MouseEvent_GetMouseAction(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    #[doc = " @brief Sets whether to prevent event bubbling.\n\n @param event Indicates the pointer to the current UI input event.\n @param stopPropagation Indicates whether the event is prevented from bubbling.\n @return Returns the status code of the execution. If 0 is returned, the setting is successful.\n         If 401 is returned, the execution fails.\n         The possible cause of the failure is that the event parameter is abnormal, such as a null pointer.\n @since 12"]
    pub fn OH_ArkUI_PointerEvent_SetStopPropagation(
        event: *const ArkUI_UIInputEvent,
        stopPropagation: bool,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the ID of device that triggers UI input event.\n\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @return Returns the device ID.\n @since 14"]
    pub fn OH_ArkUI_UIInputEvent_GetDeviceId(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the pressed status of modifier keys from UI input event.\n The following modifier keys are supported: Ctrl, Alt, Shift, Fn. However, the <b>Fn</b> key on external keyboards\n is not supported.\n\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @param pressedKeyCodes Array of all keys that are pressed. You need to allocate the memory space.\n @param length Length of the passed pressedKeyCodes array (when used as an input parameter);\n               number of the keys pressed (when used as an output parameter).\n @return Returns the result code.\n         Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n         Returns {@link ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR} if the giving buffer is not enough.\n         Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n @since 14"]
    pub fn OH_ArkUI_UIInputEvent_GetPressedKeys(
        event: *const ArkUI_UIInputEvent,
        pressedKeyCodes: *mut i32,
        length: *mut i32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the axis value of a focus axis event.\n\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @param axis Axis type of the focus axis event.\n @return Returns the axis value of the focus axis event; returns <b>0.0</b> if any parameter error occurs.\n @since 15"]
    pub fn OH_ArkUI_FocusAxisEvent_GetAxisValue(event: *const ArkUI_UIInputEvent, axis: i32)
        -> f64;
}
extern "C" {
    #[doc = " @brief Sets whether to prevent a focus axis event from bubbling up.\n\n @param event Indicates the pointer to the current UI input event.\n @param stopPropagation Indicates whether to stop event propagation.\n @return Returns the result code.\n         Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n         Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n @since 15"]
    pub fn OH_ArkUI_FocusAxisEvent_SetStopPropagation(
        event: *const ArkUI_UIInputEvent,
        stopPropagation: bool,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the press time of a specific touch point.\n\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @param pointerIndex Index of the target touch point in the multi-touch data list.\n @return Returns the press time of the specific touch point; returns <b>0</b> if any parameter error occurs.\n @since 15"]
    pub fn OH_ArkUI_PointerEvent_GetPressedTimeByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> i64;
}
extern "C" {
    #[doc = " @brief Obtains the x-axis offset of the mouse pointer position relative to the position in the previously reported\n mouse event. This value may be less than the difference between the two reported X coordinates when the mouse pointer\n is near the screen edge.\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @return Returns the x-axis offset of the mouse pointer position relative to the position in the previously reported\n mouse event; returns <b>0.0f</b> if any parameter error occurs.\n @since 15"]
    pub fn OH_ArkUI_MouseEvent_GetRawDeltaX(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the y-axis offset of the mouse pointer position relative to the position in the previously reported\n mouse event. This value may be less than the difference between the two reported Y coordinates when the mouse pointer\n is near the screen edge.\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @return Returns the y-axis offset of the mouse pointer position relative to the position in the previously reported\n mouse event; returns <b>0.0f</b> if any parameter error occurs.\n @since 15"]
    pub fn OH_ArkUI_MouseEvent_GetRawDeltaY(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    #[doc = " @brief Obtains the pressed buttons from a mouse event.\n\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @param pressedButtons Array of the pressed buttons. An int array must be created beforehand to store the pressed\n                       buttons.\n @param length Length of the passed pressedButtons array (when used as an input parameter);\n               number of the buttons pressed (when used as an output parameter).\n @return Returns the result code.\n          Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n          Returns {@link ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR} if the given buffer size is insufficient.\n @since 15"]
    pub fn OH_ArkUI_MouseEvent_GetPressedButtons(
        event: *const ArkUI_UIInputEvent,
        pressedButtons: *mut i32,
        length: *mut i32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the ID of the screen where the UI input event occurs.\n\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @return Returns the screen ID; returns <b>0</b> if any parameter error occurs.\n @since 15"]
    pub fn OH_ArkUI_UIInputEvent_GetTargetDisplayId(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    #[doc = " @brief Creates a cloned event pointer based on an event pointer.\n\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @param clonedEvent Pointer to the cloned <b>ArkUI_UIInputEvent</b> object.\n @return Returns the result code.\n          Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n          Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n @since 15"]
    pub fn OH_ArkUI_PointerEvent_CreateClonedEvent(
        event: *const ArkUI_UIInputEvent,
        clonedEvent: *mut *mut ArkUI_UIInputEvent,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Destroys a cloned event pointer.\n\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @return Returns the result code.\n          Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n          Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n          Returns {@link ARKUI_ERROR_CODE_NON_CLONED_POINTER_EVENT} if the input event pointer is not a\n          cloned event pointer.\n @since 15"]
    pub fn OH_ArkUI_PointerEvent_DestroyClonedEvent(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    #[doc = " @brief Sets the X and Y coordinates of a cloned event relative to the upper left corner of the current component.\n\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @param x X coordinate of the event relative to the upper left corner of the current component.\n @param y Y coordinate of the event relative to the upper left corner of the current component.\n @return Returns the result code.\n          Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n          Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n          Returns {@link ARKUI_ERROR_CODE_NON_CLONED_POINTER_EVENT} if the input event pointer is not a\n          cloned event pointer.\n @since 15"]
    pub fn OH_ArkUI_PointerEvent_SetClonedEventLocalPosition(
        event: *const ArkUI_UIInputEvent,
        x: f32,
        y: f32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Sets the X and Y coordinates of a specific contact point of a cloned event relative to the upper left corner\n of the current component.\n\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @param x X coordinate of the event relative to the upper left corner of the current component.\n @param y Y coordinate of the event relative to the upper left corner of the current component.\n @param pointerIndex Index of the target touch point in the multi-touch data list.\n @return Returns the result code.\n          Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n          Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n          Returns {@link ARKUI_ERROR_CODE_NON_CLONED_POINTER_EVENT} if the input event pointer is not a\n          cloned event pointer.\n @since 15"]
    pub fn OH_ArkUI_PointerEvent_SetClonedEventLocalPositionByIndex(
        event: *const ArkUI_UIInputEvent,
        x: f32,
        y: f32,
        pointerIndex: i32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Sets the action type of a cloned event.\n\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @param actionType Action type of the cloned event.\n @return Returns the result code.\n          Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n          Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n          Returns {@link ARKUI_ERROR_CODE_NON_CLONED_POINTER_EVENT} if the input event pointer is not a\n          cloned event pointer.\n @since 15"]
    pub fn OH_ArkUI_PointerEvent_SetClonedEventActionType(
        event: *const ArkUI_UIInputEvent,
        actionType: i32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Sets the touch point ID of a cloned pointer event.\n\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @param fingerId ID of the touch point that triggers the event.\n @return Returns the result code.\n          Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n          Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n          Returns {@link ARKUI_ERROR_CODE_NON_CLONED_POINTER_EVENT} if the input event pointer is not a\n          cloned event pointer.\n @since 15"]
    pub fn OH_ArkUI_PointerEvent_SetClonedEventChangedFingerId(
        event: *const ArkUI_UIInputEvent,
        fingerId: i32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Sets the touch point ID of a specific contact point of a cloned event.\n\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @param fingerId Touch point ID of the specific contact point.\n @param pointerIndex Index of the target touch point in the multi-touch data list.\n @return Returns the result code.\n          Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n          Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n          Returns {@link ARKUI_ERROR_CODE_NON_CLONED_POINTER_EVENT} if the input event pointer is not a\n          cloned event pointer.\n @since 15"]
    pub fn OH_ArkUI_PointerEvent_SetClonedEventFingerIdByIndex(
        event: *const ArkUI_UIInputEvent,
        fingerId: i32,
        pointerIndex: i32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Posts a cloned event to a specific node.\n\n @param node Target node.\n @param event Pointer to an <b>ArkUI_UIInputEvent</b> object.\n @return Returns the result code.\n         Returns {@link ARKUI_ERROR_CODE_NO_ERROR} if the operation is successful.\n         Returns {@link ARKUI_ERROR_CODE_PARAM_INVALID} if a parameter error occurs.\n         Returns {@link ARKUI_ERROR_CODE_NON_CLONED_POINTER_EVENT} if the input event pointer is not a\n         cloned event pointer.\n         Returns {@link ARKUI_ERROR_CODE_POST_CLONED_COMPONENT_STATUS_ABNORMAL}\n         if the component status abnormal.\n         Returns {@link ARKUI_ERROR_CODE_POST_CLONED_NO_COMPONENT_HIT_TO_RESPOND_TO_THE_EVENT}\n         if no component hit to response to the event.\n @since 15"]
    pub fn OH_ArkUI_PointerEvent_PostClonedEvent(
        node: ArkUI_NodeHandle,
        event: *const ArkUI_UIInputEvent,
    ) -> i32;
}
