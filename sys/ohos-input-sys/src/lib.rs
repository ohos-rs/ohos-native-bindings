/* automatically generated by rust-bindgen 0.65.1 */

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]

pub const InputEvent_AxisType_AXIS_TYPE_UNKNOWN: InputEvent_AxisType = 0;
pub const InputEvent_AxisType_AXIS_TYPE_SCROLL_VERTICAL: InputEvent_AxisType = 1;
pub const InputEvent_AxisType_AXIS_TYPE_SCROLL_HORIZONTAL: InputEvent_AxisType = 2;
pub const InputEvent_AxisType_AXIS_TYPE_PINCH: InputEvent_AxisType = 3;
pub const InputEvent_AxisType_AXIS_TYPE_ROTATE: InputEvent_AxisType = 4;
pub type InputEvent_AxisType = ::std::os::raw::c_uint;
pub const InputEvent_AxisEventType_AXIS_EVENT_TYPE_PINCH: InputEvent_AxisEventType = 1;
pub const InputEvent_AxisEventType_AXIS_EVENT_TYPE_SCROLL: InputEvent_AxisEventType = 2;
pub type InputEvent_AxisEventType = ::std::os::raw::c_uint;
pub const InputEvent_AxisAction_AXIS_ACTION_CANCEL: InputEvent_AxisAction = 0;
pub const InputEvent_AxisAction_AXIS_ACTION_BEGIN: InputEvent_AxisAction = 1;
pub const InputEvent_AxisAction_AXIS_ACTION_UPDATE: InputEvent_AxisAction = 2;
pub const InputEvent_AxisAction_AXIS_ACTION_END: InputEvent_AxisAction = 3;
pub type InputEvent_AxisAction = ::std::os::raw::c_uint;
pub const Input_KeyCode_KEYCODE_UNKNOWN: Input_KeyCode = -1;
pub const Input_KeyCode_KEYCODE_FN: Input_KeyCode = 0;
pub const Input_KeyCode_KEYCODE_VOLUME_UP: Input_KeyCode = 16;
pub const Input_KeyCode_KEYCODE_VOLUME_DOWN: Input_KeyCode = 17;
pub const Input_KeyCode_KEYCODE_POWER: Input_KeyCode = 18;
pub const Input_KeyCode_KEYCODE_CAMERA: Input_KeyCode = 19;
pub const Input_KeyCode_KEYCODE_VOLUME_MUTE: Input_KeyCode = 22;
pub const Input_KeyCode_KEYCODE_MUTE: Input_KeyCode = 23;
pub const Input_KeyCode_KEYCODE_BRIGHTNESS_UP: Input_KeyCode = 40;
pub const Input_KeyCode_KEYCODE_BRIGHTNESS_DOWN: Input_KeyCode = 41;
pub const Input_KeyCode_KEYCODE_0: Input_KeyCode = 2000;
pub const Input_KeyCode_KEYCODE_1: Input_KeyCode = 2001;
pub const Input_KeyCode_KEYCODE_2: Input_KeyCode = 2002;
pub const Input_KeyCode_KEYCODE_3: Input_KeyCode = 2003;
pub const Input_KeyCode_KEYCODE_4: Input_KeyCode = 2004;
pub const Input_KeyCode_KEYCODE_5: Input_KeyCode = 2005;
pub const Input_KeyCode_KEYCODE_6: Input_KeyCode = 2006;
pub const Input_KeyCode_KEYCODE_7: Input_KeyCode = 2007;
pub const Input_KeyCode_KEYCODE_8: Input_KeyCode = 2008;
pub const Input_KeyCode_KEYCODE_9: Input_KeyCode = 2009;
pub const Input_KeyCode_KEYCODE_STAR: Input_KeyCode = 2010;
pub const Input_KeyCode_KEYCODE_POUND: Input_KeyCode = 2011;
pub const Input_KeyCode_KEYCODE_DPAD_UP: Input_KeyCode = 2012;
pub const Input_KeyCode_KEYCODE_DPAD_DOWN: Input_KeyCode = 2013;
pub const Input_KeyCode_KEYCODE_DPAD_LEFT: Input_KeyCode = 2014;
pub const Input_KeyCode_KEYCODE_DPAD_RIGHT: Input_KeyCode = 2015;
pub const Input_KeyCode_KEYCODE_DPAD_CENTER: Input_KeyCode = 2016;
pub const Input_KeyCode_KEYCODE_A: Input_KeyCode = 2017;
pub const Input_KeyCode_KEYCODE_B: Input_KeyCode = 2018;
pub const Input_KeyCode_KEYCODE_C: Input_KeyCode = 2019;
pub const Input_KeyCode_KEYCODE_D: Input_KeyCode = 2020;
pub const Input_KeyCode_KEYCODE_E: Input_KeyCode = 2021;
pub const Input_KeyCode_KEYCODE_F: Input_KeyCode = 2022;
pub const Input_KeyCode_KEYCODE_G: Input_KeyCode = 2023;
pub const Input_KeyCode_KEYCODE_H: Input_KeyCode = 2024;
pub const Input_KeyCode_KEYCODE_I: Input_KeyCode = 2025;
pub const Input_KeyCode_KEYCODE_J: Input_KeyCode = 2026;
pub const Input_KeyCode_KEYCODE_K: Input_KeyCode = 2027;
pub const Input_KeyCode_KEYCODE_L: Input_KeyCode = 2028;
pub const Input_KeyCode_KEYCODE_M: Input_KeyCode = 2029;
pub const Input_KeyCode_KEYCODE_N: Input_KeyCode = 2030;
pub const Input_KeyCode_KEYCODE_O: Input_KeyCode = 2031;
pub const Input_KeyCode_KEYCODE_P: Input_KeyCode = 2032;
pub const Input_KeyCode_KEYCODE_Q: Input_KeyCode = 2033;
pub const Input_KeyCode_KEYCODE_R: Input_KeyCode = 2034;
pub const Input_KeyCode_KEYCODE_S: Input_KeyCode = 2035;
pub const Input_KeyCode_KEYCODE_T: Input_KeyCode = 2036;
pub const Input_KeyCode_KEYCODE_U: Input_KeyCode = 2037;
pub const Input_KeyCode_KEYCODE_V: Input_KeyCode = 2038;
pub const Input_KeyCode_KEYCODE_W: Input_KeyCode = 2039;
pub const Input_KeyCode_KEYCODE_X: Input_KeyCode = 2040;
pub const Input_KeyCode_KEYCODE_Y: Input_KeyCode = 2041;
pub const Input_KeyCode_KEYCODE_Z: Input_KeyCode = 2042;
pub const Input_KeyCode_KEYCODE_COMMA: Input_KeyCode = 2043;
pub const Input_KeyCode_KEYCODE_PERIOD: Input_KeyCode = 2044;
pub const Input_KeyCode_KEYCODE_ALT_LEFT: Input_KeyCode = 2045;
pub const Input_KeyCode_KEYCODE_ALT_RIGHT: Input_KeyCode = 2046;
pub const Input_KeyCode_KEYCODE_SHIFT_LEFT: Input_KeyCode = 2047;
pub const Input_KeyCode_KEYCODE_SHIFT_RIGHT: Input_KeyCode = 2048;
pub const Input_KeyCode_KEYCODE_TAB: Input_KeyCode = 2049;
pub const Input_KeyCode_KEYCODE_SPACE: Input_KeyCode = 2050;
pub const Input_KeyCode_KEYCODE_SYM: Input_KeyCode = 2051;
pub const Input_KeyCode_KEYCODE_EXPLORER: Input_KeyCode = 2052;
pub const Input_KeyCode_KEYCODE_ENVELOPE: Input_KeyCode = 2053;
pub const Input_KeyCode_KEYCODE_ENTER: Input_KeyCode = 2054;
pub const Input_KeyCode_KEYCODE_DEL: Input_KeyCode = 2055;
pub const Input_KeyCode_KEYCODE_GRAVE: Input_KeyCode = 2056;
pub const Input_KeyCode_KEYCODE_MINUS: Input_KeyCode = 2057;
pub const Input_KeyCode_KEYCODE_EQUALS: Input_KeyCode = 2058;
pub const Input_KeyCode_KEYCODE_LEFT_BRACKET: Input_KeyCode = 2059;
pub const Input_KeyCode_KEYCODE_RIGHT_BRACKET: Input_KeyCode = 2060;
pub const Input_KeyCode_KEYCODE_BACKSLASH: Input_KeyCode = 2061;
pub const Input_KeyCode_KEYCODE_SEMICOLON: Input_KeyCode = 2062;
pub const Input_KeyCode_KEYCODE_APOSTROPHE: Input_KeyCode = 2063;
pub const Input_KeyCode_KEYCODE_SLASH: Input_KeyCode = 2064;
pub const Input_KeyCode_KEYCODE_AT: Input_KeyCode = 2065;
pub const Input_KeyCode_KEYCODE_PLUS: Input_KeyCode = 2066;
pub const Input_KeyCode_KEYCODE_MENU: Input_KeyCode = 2067;
pub const Input_KeyCode_KEYCODE_PAGE_UP: Input_KeyCode = 2068;
pub const Input_KeyCode_KEYCODE_PAGE_DOWN: Input_KeyCode = 2069;
pub const Input_KeyCode_KEYCODE_ESCAPE: Input_KeyCode = 2070;
pub const Input_KeyCode_KEYCODE_FORWARD_DEL: Input_KeyCode = 2071;
pub const Input_KeyCode_KEYCODE_CTRL_LEFT: Input_KeyCode = 2072;
pub const Input_KeyCode_KEYCODE_CTRL_RIGHT: Input_KeyCode = 2073;
pub const Input_KeyCode_KEYCODE_CAPS_LOCK: Input_KeyCode = 2074;
pub const Input_KeyCode_KEYCODE_SCROLL_LOCK: Input_KeyCode = 2075;
pub const Input_KeyCode_KEYCODE_META_LEFT: Input_KeyCode = 2076;
pub const Input_KeyCode_KEYCODE_META_RIGHT: Input_KeyCode = 2077;
pub const Input_KeyCode_KEYCODE_FUNCTION: Input_KeyCode = 2078;
pub const Input_KeyCode_KEYCODE_SYSRQ: Input_KeyCode = 2079;
pub const Input_KeyCode_KEYCODE_BREAK: Input_KeyCode = 2080;
pub const Input_KeyCode_KEYCODE_MOVE_HOME: Input_KeyCode = 2081;
pub const Input_KeyCode_KEYCODE_MOVE_END: Input_KeyCode = 2082;
pub const Input_KeyCode_KEYCODE_INSERT: Input_KeyCode = 2083;
pub const Input_KeyCode_KEYCODE_FORWARD: Input_KeyCode = 2084;
pub const Input_KeyCode_KEYCODE_MEDIA_PLAY: Input_KeyCode = 2085;
pub const Input_KeyCode_KEYCODE_MEDIA_PAUSE: Input_KeyCode = 2086;
pub const Input_KeyCode_KEYCODE_MEDIA_CLOSE: Input_KeyCode = 2087;
pub const Input_KeyCode_KEYCODE_MEDIA_EJECT: Input_KeyCode = 2088;
pub const Input_KeyCode_KEYCODE_MEDIA_RECORD: Input_KeyCode = 2089;
pub const Input_KeyCode_KEYCODE_F1: Input_KeyCode = 2090;
pub const Input_KeyCode_KEYCODE_F2: Input_KeyCode = 2091;
pub const Input_KeyCode_KEYCODE_F3: Input_KeyCode = 2092;
pub const Input_KeyCode_KEYCODE_F4: Input_KeyCode = 2093;
pub const Input_KeyCode_KEYCODE_F5: Input_KeyCode = 2094;
pub const Input_KeyCode_KEYCODE_F6: Input_KeyCode = 2095;
pub const Input_KeyCode_KEYCODE_F7: Input_KeyCode = 2096;
pub const Input_KeyCode_KEYCODE_F8: Input_KeyCode = 2097;
pub const Input_KeyCode_KEYCODE_F9: Input_KeyCode = 2098;
pub const Input_KeyCode_KEYCODE_F10: Input_KeyCode = 2099;
pub const Input_KeyCode_KEYCODE_F11: Input_KeyCode = 2100;
pub const Input_KeyCode_KEYCODE_F12: Input_KeyCode = 2101;
pub const Input_KeyCode_KEYCODE_NUM_LOCK: Input_KeyCode = 2102;
pub const Input_KeyCode_KEYCODE_NUMPAD_0: Input_KeyCode = 2103;
pub const Input_KeyCode_KEYCODE_NUMPAD_1: Input_KeyCode = 2104;
pub const Input_KeyCode_KEYCODE_NUMPAD_2: Input_KeyCode = 2105;
pub const Input_KeyCode_KEYCODE_NUMPAD_3: Input_KeyCode = 2106;
pub const Input_KeyCode_KEYCODE_NUMPAD_4: Input_KeyCode = 2107;
pub const Input_KeyCode_KEYCODE_NUMPAD_5: Input_KeyCode = 2108;
pub const Input_KeyCode_KEYCODE_NUMPAD_6: Input_KeyCode = 2109;
pub const Input_KeyCode_KEYCODE_NUMPAD_7: Input_KeyCode = 2110;
pub const Input_KeyCode_KEYCODE_NUMPAD_8: Input_KeyCode = 2111;
pub const Input_KeyCode_KEYCODE_NUMPAD_9: Input_KeyCode = 2112;
pub const Input_KeyCode_KEYCODE_NUMPAD_DIVIDE: Input_KeyCode = 2113;
pub const Input_KeyCode_KEYCODE_NUMPAD_MULTIPLY: Input_KeyCode = 2114;
pub const Input_KeyCode_KEYCODE_NUMPAD_SUBTRACT: Input_KeyCode = 2115;
pub const Input_KeyCode_KEYCODE_NUMPAD_ADD: Input_KeyCode = 2116;
pub const Input_KeyCode_KEYCODE_NUMPAD_DOT: Input_KeyCode = 2117;
pub const Input_KeyCode_KEYCODE_NUMPAD_COMMA: Input_KeyCode = 2118;
pub const Input_KeyCode_KEYCODE_NUMPAD_ENTER: Input_KeyCode = 2119;
pub const Input_KeyCode_KEYCODE_NUMPAD_EQUALS: Input_KeyCode = 2120;
pub const Input_KeyCode_KEYCODE_NUMPAD_LEFT_PAREN: Input_KeyCode = 2121;
pub const Input_KeyCode_KEYCODE_NUMPAD_RIGHT_PAREN: Input_KeyCode = 2122;
pub type Input_KeyCode = ::std::os::raw::c_int;
pub const Input_KeyStateAction_KEY_DEFAULT: Input_KeyStateAction = -1;
pub const Input_KeyStateAction_KEY_PRESSED: Input_KeyStateAction = 0;
pub const Input_KeyStateAction_KEY_RELEASED: Input_KeyStateAction = 1;
pub const Input_KeyStateAction_KEY_SWITCH_ON: Input_KeyStateAction = 2;
pub const Input_KeyStateAction_KEY_SWITCH_OFF: Input_KeyStateAction = 3;
pub type Input_KeyStateAction = ::std::os::raw::c_int;
pub const Input_KeyEventAction_KEY_ACTION_CANCEL: Input_KeyEventAction = 0;
pub const Input_KeyEventAction_KEY_ACTION_DOWN: Input_KeyEventAction = 1;
pub const Input_KeyEventAction_KEY_ACTION_UP: Input_KeyEventAction = 2;
pub type Input_KeyEventAction = ::std::os::raw::c_uint;
pub const Input_MouseEventAction_MOUSE_ACTION_CANCEL: Input_MouseEventAction = 0;
pub const Input_MouseEventAction_MOUSE_ACTION_MOVE: Input_MouseEventAction = 1;
pub const Input_MouseEventAction_MOUSE_ACTION_BUTTON_DOWN: Input_MouseEventAction = 2;
pub const Input_MouseEventAction_MOUSE_ACTION_BUTTON_UP: Input_MouseEventAction = 3;
pub const Input_MouseEventAction_MOUSE_ACTION_AXIS_BEGIN: Input_MouseEventAction = 4;
pub const Input_MouseEventAction_MOUSE_ACTION_AXIS_UPDATE: Input_MouseEventAction = 5;
pub const Input_MouseEventAction_MOUSE_ACTION_AXIS_END: Input_MouseEventAction = 6;
pub type Input_MouseEventAction = ::std::os::raw::c_uint;
pub const InputEvent_MouseAxis_MOUSE_AXIS_SCROLL_VERTICAL: InputEvent_MouseAxis = 0;
pub const InputEvent_MouseAxis_MOUSE_AXIS_SCROLL_HORIZONTAL: InputEvent_MouseAxis = 1;
pub type InputEvent_MouseAxis = ::std::os::raw::c_uint;
pub const Input_MouseEventButton_MOUSE_BUTTON_NONE: Input_MouseEventButton = -1;
pub const Input_MouseEventButton_MOUSE_BUTTON_LEFT: Input_MouseEventButton = 0;
pub const Input_MouseEventButton_MOUSE_BUTTON_MIDDLE: Input_MouseEventButton = 1;
pub const Input_MouseEventButton_MOUSE_BUTTON_RIGHT: Input_MouseEventButton = 2;
pub const Input_MouseEventButton_MOUSE_BUTTON_FORWARD: Input_MouseEventButton = 3;
pub const Input_MouseEventButton_MOUSE_BUTTON_BACK: Input_MouseEventButton = 4;
pub type Input_MouseEventButton = ::std::os::raw::c_int;
pub const Input_TouchEventAction_TOUCH_ACTION_CANCEL: Input_TouchEventAction = 0;
pub const Input_TouchEventAction_TOUCH_ACTION_DOWN: Input_TouchEventAction = 1;
pub const Input_TouchEventAction_TOUCH_ACTION_MOVE: Input_TouchEventAction = 2;
pub const Input_TouchEventAction_TOUCH_ACTION_UP: Input_TouchEventAction = 3;
pub type Input_TouchEventAction = ::std::os::raw::c_uint;
pub const InputEvent_SourceType_SOURCE_TYPE_MOUSE: InputEvent_SourceType = 1;
pub const InputEvent_SourceType_SOURCE_TYPE_TOUCHSCREEN: InputEvent_SourceType = 2;
pub const InputEvent_SourceType_SOURCE_TYPE_TOUCHPAD: InputEvent_SourceType = 3;
pub type InputEvent_SourceType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Input_KeyState {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Input_KeyEvent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Input_MouseEvent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Input_TouchEvent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Input_AxisEvent {
    _unused: [u8; 0],
}
pub const Input_Result_INPUT_SUCCESS: Input_Result = 0;
pub const Input_Result_INPUT_PERMISSION_DENIED: Input_Result = 201;
pub const Input_Result_INPUT_NOT_SYSTEM_APPLICATION: Input_Result = 202;
pub const Input_Result_INPUT_PARAMETER_ERROR: Input_Result = 401;
pub const Input_Result_INPUT_SERVICE_EXCEPTION: Input_Result = 3800001;
pub const Input_Result_INPUT_REPEAT_INTERCEPTOR: Input_Result = 4200001;
pub type Input_Result = ::std::os::raw::c_uint;
pub type Input_KeyEventCallback =
    ::std::option::Option<unsafe extern "C" fn(keyEvent: *const Input_KeyEvent)>;
pub type Input_MouseEventCallback =
    ::std::option::Option<unsafe extern "C" fn(mouseEvent: *const Input_MouseEvent)>;
pub type Input_TouchEventCallback =
    ::std::option::Option<unsafe extern "C" fn(touchEvent: *const Input_TouchEvent)>;
pub type Input_AxisEventCallback =
    ::std::option::Option<unsafe extern "C" fn(axisEvent: *const Input_AxisEvent)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Input_InterceptorEventCallback {
    pub mouseCallback: Input_MouseEventCallback,
    pub touchCallback: Input_TouchEventCallback,
    pub axisCallback: Input_AxisEventCallback,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Input_InterceptorOptions {
    _unused: [u8; 0],
}
extern "C" {
    pub fn OH_Input_GetKeyState(keyState: *mut Input_KeyState) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_CreateKeyState() -> *mut Input_KeyState;
}
extern "C" {
    pub fn OH_Input_DestroyKeyState(keyState: *mut *mut Input_KeyState);
}
extern "C" {
    pub fn OH_Input_SetKeyCode(keyState: *mut Input_KeyState, keyCode: i32);
}
extern "C" {
    pub fn OH_Input_GetKeyCode(keyState: *const Input_KeyState) -> i32;
}
extern "C" {
    pub fn OH_Input_SetKeyPressed(keyState: *mut Input_KeyState, keyAction: i32);
}
extern "C" {
    pub fn OH_Input_GetKeyPressed(keyState: *const Input_KeyState) -> i32;
}
extern "C" {
    pub fn OH_Input_SetKeySwitch(keyState: *mut Input_KeyState, keySwitch: i32);
}
extern "C" {
    pub fn OH_Input_GetKeySwitch(keyState: *const Input_KeyState) -> i32;
}
extern "C" {
    pub fn OH_Input_InjectKeyEvent(keyEvent: *const Input_KeyEvent) -> i32;
}
extern "C" {
    pub fn OH_Input_CreateKeyEvent() -> *mut Input_KeyEvent;
}
extern "C" {
    pub fn OH_Input_DestroyKeyEvent(keyEvent: *mut *mut Input_KeyEvent);
}
extern "C" {
    pub fn OH_Input_SetKeyEventAction(keyEvent: *mut Input_KeyEvent, action: i32);
}
extern "C" {
    pub fn OH_Input_GetKeyEventAction(keyEvent: *const Input_KeyEvent) -> i32;
}
extern "C" {
    pub fn OH_Input_SetKeyEventKeyCode(keyEvent: *mut Input_KeyEvent, keyCode: i32);
}
extern "C" {
    pub fn OH_Input_GetKeyEventKeyCode(keyEvent: *const Input_KeyEvent) -> i32;
}
extern "C" {
    pub fn OH_Input_SetKeyEventActionTime(keyEvent: *mut Input_KeyEvent, actionTime: i64);
}
extern "C" {
    pub fn OH_Input_GetKeyEventActionTime(keyEvent: *const Input_KeyEvent) -> i64;
}
extern "C" {
    pub fn OH_Input_InjectMouseEvent(mouseEvent: *const Input_MouseEvent) -> i32;
}
extern "C" {
    pub fn OH_Input_CreateMouseEvent() -> *mut Input_MouseEvent;
}
extern "C" {
    pub fn OH_Input_DestroyMouseEvent(mouseEvent: *mut *mut Input_MouseEvent);
}
extern "C" {
    pub fn OH_Input_SetMouseEventAction(mouseEvent: *mut Input_MouseEvent, action: i32);
}
extern "C" {
    pub fn OH_Input_GetMouseEventAction(mouseEvent: *const Input_MouseEvent) -> i32;
}
extern "C" {
    pub fn OH_Input_SetMouseEventDisplayX(mouseEvent: *mut Input_MouseEvent, displayX: i32);
}
extern "C" {
    pub fn OH_Input_GetMouseEventDisplayX(mouseEvent: *const Input_MouseEvent) -> i32;
}
extern "C" {
    pub fn OH_Input_SetMouseEventDisplayY(mouseEvent: *mut Input_MouseEvent, displayY: i32);
}
extern "C" {
    pub fn OH_Input_GetMouseEventDisplayY(mouseEvent: *const Input_MouseEvent) -> i32;
}
extern "C" {
    pub fn OH_Input_SetMouseEventButton(mouseEvent: *mut Input_MouseEvent, button: i32);
}
extern "C" {
    pub fn OH_Input_GetMouseEventButton(mouseEvent: *const Input_MouseEvent) -> i32;
}
extern "C" {
    pub fn OH_Input_SetMouseEventAxisType(mouseEvent: *mut Input_MouseEvent, axisType: i32);
}
extern "C" {
    pub fn OH_Input_GetMouseEventAxisType(mouseEvent: *const Input_MouseEvent) -> i32;
}
extern "C" {
    pub fn OH_Input_SetMouseEventAxisValue(mouseEvent: *mut Input_MouseEvent, axisValue: f32);
}
extern "C" {
    pub fn OH_Input_GetMouseEventAxisValue(mouseEvent: *const Input_MouseEvent) -> f32;
}
extern "C" {
    pub fn OH_Input_SetMouseEventActionTime(mouseEvent: *mut Input_MouseEvent, actionTime: i64);
}
extern "C" {
    pub fn OH_Input_GetMouseEventActionTime(mouseEvent: *const Input_MouseEvent) -> i64;
}
extern "C" {
    pub fn OH_Input_InjectTouchEvent(touchEvent: *const Input_TouchEvent) -> i32;
}
extern "C" {
    pub fn OH_Input_CreateTouchEvent() -> *mut Input_TouchEvent;
}
extern "C" {
    pub fn OH_Input_DestroyTouchEvent(touchEvent: *mut *mut Input_TouchEvent);
}
extern "C" {
    pub fn OH_Input_SetTouchEventAction(touchEvent: *mut Input_TouchEvent, action: i32);
}
extern "C" {
    pub fn OH_Input_GetTouchEventAction(touchEvent: *const Input_TouchEvent) -> i32;
}
extern "C" {
    pub fn OH_Input_SetTouchEventFingerId(touchEvent: *mut Input_TouchEvent, id: i32);
}
extern "C" {
    pub fn OH_Input_GetTouchEventFingerId(touchEvent: *const Input_TouchEvent) -> i32;
}
extern "C" {
    pub fn OH_Input_SetTouchEventDisplayX(touchEvent: *mut Input_TouchEvent, displayX: i32);
}
extern "C" {
    pub fn OH_Input_GetTouchEventDisplayX(touchEvent: *const Input_TouchEvent) -> i32;
}
extern "C" {
    pub fn OH_Input_SetTouchEventDisplayY(touchEvent: *mut Input_TouchEvent, displayY: i32);
}
extern "C" {
    pub fn OH_Input_GetTouchEventDisplayY(touchEvent: *const Input_TouchEvent) -> i32;
}
extern "C" {
    pub fn OH_Input_SetTouchEventActionTime(touchEvent: *mut Input_TouchEvent, actionTime: i64);
}
extern "C" {
    pub fn OH_Input_GetTouchEventActionTime(touchEvent: *const Input_TouchEvent) -> i64;
}
extern "C" {
    pub fn OH_Input_CancelInjection();
}
extern "C" {
    pub fn OH_Input_CreateAxisEvent() -> *mut Input_AxisEvent;
}
extern "C" {
    pub fn OH_Input_DestroyAxisEvent(axisEvent: *mut *mut Input_AxisEvent) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_SetAxisEventAction(
        axisEvent: *mut Input_AxisEvent,
        action: InputEvent_AxisAction,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_GetAxisEventAction(
        axisEvent: *const Input_AxisEvent,
        action: *mut InputEvent_AxisAction,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_SetAxisEventDisplayX(
        axisEvent: *mut Input_AxisEvent,
        displayX: f32,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_GetAxisEventDisplayX(
        axisEvent: *const Input_AxisEvent,
        displayX: *mut f32,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_SetAxisEventDisplayY(
        axisEvent: *mut Input_AxisEvent,
        displayY: f32,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_GetAxisEventDisplayY(
        axisEvent: *const Input_AxisEvent,
        displayY: *mut f32,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_SetAxisEventAxisValue(
        axisEvent: *mut Input_AxisEvent,
        axisType: InputEvent_AxisType,
        axisValue: f64,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_GetAxisEventAxisValue(
        axisEvent: *const Input_AxisEvent,
        axisType: InputEvent_AxisType,
        axisValue: *mut f64,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_SetAxisEventActionTime(
        axisEvent: *mut Input_AxisEvent,
        actionTime: i64,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_GetAxisEventActionTime(
        axisEvent: *const Input_AxisEvent,
        actionTime: *mut i64,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_SetAxisEventType(
        axisEvent: *mut Input_AxisEvent,
        axisEventType: InputEvent_AxisEventType,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_GetAxisEventType(
        axisEvent: *const Input_AxisEvent,
        axisEventType: *mut InputEvent_AxisEventType,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_SetAxisEventSourceType(
        axisEvent: *mut Input_AxisEvent,
        sourceType: InputEvent_SourceType,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_GetAxisEventSourceType(
        axisEvent: *const Input_AxisEvent,
        sourceType: *mut InputEvent_SourceType,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_AddKeyEventMonitor(callback: Input_KeyEventCallback) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_AddMouseEventMonitor(callback: Input_MouseEventCallback) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_AddTouchEventMonitor(callback: Input_TouchEventCallback) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_AddAxisEventMonitorForAll(callback: Input_AxisEventCallback) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_AddAxisEventMonitor(
        axisEventType: InputEvent_AxisEventType,
        callback: Input_AxisEventCallback,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_RemoveKeyEventMonitor(callback: Input_KeyEventCallback) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_RemoveMouseEventMonitor(callback: Input_MouseEventCallback) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_RemoveTouchEventMonitor(callback: Input_TouchEventCallback) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_RemoveAxisEventMonitorForAll(callback: Input_AxisEventCallback)
        -> Input_Result;
}
extern "C" {
    pub fn OH_Input_RemoveAxisEventMonitor(
        axisEventType: InputEvent_AxisEventType,
        callback: Input_AxisEventCallback,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_AddKeyEventInterceptor(
        callback: Input_KeyEventCallback,
        option: *mut Input_InterceptorOptions,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_AddInputEventInterceptor(
        callback: *mut Input_InterceptorEventCallback,
        option: *mut Input_InterceptorOptions,
    ) -> Input_Result;
}
extern "C" {
    pub fn OH_Input_RemoveKeyEventInterceptor() -> Input_Result;
}
extern "C" {
    pub fn OH_Input_RemoveInputEventInterceptor() -> Input_Result;
}
