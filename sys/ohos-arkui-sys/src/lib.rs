/* automatically generated by rust-bindgen 0.65.1 */

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]

use napi_sys_ohos::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_DrawableDescriptor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_PixelmapNative {
    _unused: [u8; 0],
}
pub type OH_PixelmapNativeHandle = *mut OH_PixelmapNative;
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_CreateFromPixelMap(
        pixelMap: OH_PixelmapNativeHandle,
    ) -> *mut ArkUI_DrawableDescriptor;
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_CreateFromAnimatedPixelMap(
        array: *mut OH_PixelmapNativeHandle,
        size: i32,
    ) -> *mut ArkUI_DrawableDescriptor;
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_Dispose(drawableDescriptor: *mut ArkUI_DrawableDescriptor);
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_GetStaticPixelMap(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> OH_PixelmapNativeHandle;
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_GetAnimatedPixelMapArray(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> *mut OH_PixelmapNativeHandle;
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_GetAnimatedPixelMapArraySize(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_SetAnimationDuration(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
        duration: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_GetAnimationDuration(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_SetAnimationIteration(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
        iteration: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_DrawableDescriptor_GetAnimationIteration(
        drawableDescriptor: *mut ArkUI_DrawableDescriptor,
    ) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_Node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_NodeContent {
    _unused: [u8; 0],
}
pub type ArkUI_NodeContentHandle = *mut ArkUI_NodeContent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_NativeDialog {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_LayoutConstraint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_DrawContext {
    _unused: [u8; 0],
}
pub type ArkUI_NodeHandle = *mut ArkUI_Node;
pub type ArkUI_NativeDialogHandle = *mut ArkUI_NativeDialog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_WaterFlowSectionOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ListItemSwipeActionItem {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ListItemSwipeActionOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_Context {
    _unused: [u8; 0],
}
pub type ArkUI_ContextHandle = *mut ArkUI_Context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_SwiperIndicator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AlignmentRuleOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_GuidelineOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_BarrierOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ListChildrenMainSize {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ImageAnimatorFrameInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibilityState {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibilityValue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ContextCallback {
    pub userData: *mut ::std::os::raw::c_void,
    pub callback:
        ::std::option::Option<unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void)>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ArkUI_NumberValue {
    pub f32_: f32,
    pub i32_: i32,
    pub u32_: u32,
}
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_TOP_START: ArkUI_Alignment = 0;
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_TOP: ArkUI_Alignment = 1;
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_TOP_END: ArkUI_Alignment = 2;
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_START: ArkUI_Alignment = 3;
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_CENTER: ArkUI_Alignment = 4;
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_END: ArkUI_Alignment = 5;
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_BOTTOM_START: ArkUI_Alignment = 6;
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_BOTTOM: ArkUI_Alignment = 7;
pub const ArkUI_Alignment_ARKUI_ALIGNMENT_BOTTOM_END: ArkUI_Alignment = 8;
pub type ArkUI_Alignment = ::std::os::raw::c_uint;
pub const ArkUI_ImageRepeat_ARKUI_IMAGE_REPEAT_NONE: ArkUI_ImageRepeat = 0;
pub const ArkUI_ImageRepeat_ARKUI_IMAGE_REPEAT_X: ArkUI_ImageRepeat = 1;
pub const ArkUI_ImageRepeat_ARKUI_IMAGE_REPEAT_Y: ArkUI_ImageRepeat = 2;
pub const ArkUI_ImageRepeat_ARKUI_IMAGE_REPEAT_XY: ArkUI_ImageRepeat = 3;
pub type ArkUI_ImageRepeat = ::std::os::raw::c_uint;
pub const ArkUI_FontStyle_ARKUI_FONT_STYLE_NORMAL: ArkUI_FontStyle = 0;
pub const ArkUI_FontStyle_ARKUI_FONT_STYLE_ITALIC: ArkUI_FontStyle = 1;
pub type ArkUI_FontStyle = ::std::os::raw::c_uint;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W100: ArkUI_FontWeight = 0;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W200: ArkUI_FontWeight = 1;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W300: ArkUI_FontWeight = 2;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W400: ArkUI_FontWeight = 3;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W500: ArkUI_FontWeight = 4;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W600: ArkUI_FontWeight = 5;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W700: ArkUI_FontWeight = 6;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W800: ArkUI_FontWeight = 7;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_W900: ArkUI_FontWeight = 8;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_BOLD: ArkUI_FontWeight = 9;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_NORMAL: ArkUI_FontWeight = 10;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_BOLDER: ArkUI_FontWeight = 11;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_LIGHTER: ArkUI_FontWeight = 12;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_MEDIUM: ArkUI_FontWeight = 13;
pub const ArkUI_FontWeight_ARKUI_FONT_WEIGHT_REGULAR: ArkUI_FontWeight = 14;
pub type ArkUI_FontWeight = ::std::os::raw::c_uint;
pub const ArkUI_TextAlignment_ARKUI_TEXT_ALIGNMENT_START: ArkUI_TextAlignment = 0;
pub const ArkUI_TextAlignment_ARKUI_TEXT_ALIGNMENT_CENTER: ArkUI_TextAlignment = 1;
pub const ArkUI_TextAlignment_ARKUI_TEXT_ALIGNMENT_END: ArkUI_TextAlignment = 2;
pub const ArkUI_TextAlignment_ARKUI_TEXT_ALIGNMENT_JUSTIFY: ArkUI_TextAlignment = 3;
pub type ArkUI_TextAlignment = ::std::os::raw::c_uint;
pub const ArkUI_EnterKeyType_ARKUI_ENTER_KEY_TYPE_GO: ArkUI_EnterKeyType = 2;
pub const ArkUI_EnterKeyType_ARKUI_ENTER_KEY_TYPE_SEARCH: ArkUI_EnterKeyType = 3;
pub const ArkUI_EnterKeyType_ARKUI_ENTER_KEY_TYPE_SEND: ArkUI_EnterKeyType = 4;
pub const ArkUI_EnterKeyType_ARKUI_ENTER_KEY_TYPE_NEXT: ArkUI_EnterKeyType = 5;
pub const ArkUI_EnterKeyType_ARKUI_ENTER_KEY_TYPE_DONE: ArkUI_EnterKeyType = 6;
pub const ArkUI_EnterKeyType_ARKUI_ENTER_KEY_TYPE_PREVIOUS: ArkUI_EnterKeyType = 7;
pub const ArkUI_EnterKeyType_ARKUI_ENTER_KEY_TYPE_NEW_LINE: ArkUI_EnterKeyType = 8;
pub type ArkUI_EnterKeyType = ::std::os::raw::c_uint;
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_NORMAL: ArkUI_TextInputType = 0;
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_NUMBER: ArkUI_TextInputType = 2;
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_PHONE_NUMBER: ArkUI_TextInputType = 3;
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_EMAIL: ArkUI_TextInputType = 5;
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_PASSWORD: ArkUI_TextInputType = 7;
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_NUMBER_PASSWORD: ArkUI_TextInputType = 8;
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_SCREEN_LOCK_PASSWORD: ArkUI_TextInputType = 9;
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_USER_NAME: ArkUI_TextInputType = 10;
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_NEW_PASSWORD: ArkUI_TextInputType = 11;
pub const ArkUI_TextInputType_ARKUI_TEXTINPUT_TYPE_NUMBER_DECIMAL: ArkUI_TextInputType = 12;
pub type ArkUI_TextInputType = ::std::os::raw::c_uint;
pub const ArkUI_TextAreaType_ARKUI_TEXTAREA_TYPE_NORMAL: ArkUI_TextAreaType = 0;
pub const ArkUI_TextAreaType_ARKUI_TEXTAREA_TYPE_NUMBER: ArkUI_TextAreaType = 2;
pub const ArkUI_TextAreaType_ARKUI_TEXTAREA_TYPE_PHONE_NUMBER: ArkUI_TextAreaType = 3;
pub const ArkUI_TextAreaType_ARKUI_TEXTAREA_TYPE_EMAIL: ArkUI_TextAreaType = 5;
pub type ArkUI_TextAreaType = ::std::os::raw::c_uint;
pub const ArkUI_CancelButtonStyle_ARKUI_CANCELBUTTON_STYLE_CONSTANT: ArkUI_CancelButtonStyle = 0;
pub const ArkUI_CancelButtonStyle_ARKUI_CANCELBUTTON_STYLE_INVISIBLE: ArkUI_CancelButtonStyle = 1;
pub const ArkUI_CancelButtonStyle_ARKUI_CANCELBUTTON_STYLE_INPUT: ArkUI_CancelButtonStyle = 2;
pub type ArkUI_CancelButtonStyle = ::std::os::raw::c_uint;
pub const ArkUI_XComponentType_ARKUI_XCOMPONENT_TYPE_SURFACE: ArkUI_XComponentType = 0;
pub const ArkUI_XComponentType_ARKUI_XCOMPONENT_TYPE_TEXTURE: ArkUI_XComponentType = 2;
pub type ArkUI_XComponentType = ::std::os::raw::c_uint;
pub const ArkUI_ProgressType_ARKUI_PROGRESS_TYPE_LINEAR: ArkUI_ProgressType = 0;
pub const ArkUI_ProgressType_ARKUI_PROGRESS_TYPE_RING: ArkUI_ProgressType = 1;
pub const ArkUI_ProgressType_ARKUI_PROGRESS_TYPE_ECLIPSE: ArkUI_ProgressType = 2;
pub const ArkUI_ProgressType_ARKUI_PROGRESS_TYPE_SCALE_RING: ArkUI_ProgressType = 3;
pub const ArkUI_ProgressType_ARKUI_PROGRESS_TYPE_CAPSULE: ArkUI_ProgressType = 4;
pub type ArkUI_ProgressType = ::std::os::raw::c_uint;
pub const ArkUI_TextDecorationType_ARKUI_TEXT_DECORATION_TYPE_NONE: ArkUI_TextDecorationType = 0;
pub const ArkUI_TextDecorationType_ARKUI_TEXT_DECORATION_TYPE_UNDERLINE: ArkUI_TextDecorationType =
    1;
pub const ArkUI_TextDecorationType_ARKUI_TEXT_DECORATION_TYPE_OVERLINE: ArkUI_TextDecorationType =
    2;
pub const ArkUI_TextDecorationType_ARKUI_TEXT_DECORATION_TYPE_LINE_THROUGH:
    ArkUI_TextDecorationType = 3;
pub type ArkUI_TextDecorationType = ::std::os::raw::c_uint;
pub const ArkUI_TextDecorationStyle_ARKUI_TEXT_DECORATION_STYLE_SOLID: ArkUI_TextDecorationStyle =
    0;
pub const ArkUI_TextDecorationStyle_ARKUI_TEXT_DECORATION_STYLE_DOUBLE: ArkUI_TextDecorationStyle =
    1;
pub const ArkUI_TextDecorationStyle_ARKUI_TEXT_DECORATION_STYLE_DOTTED: ArkUI_TextDecorationStyle =
    2;
pub const ArkUI_TextDecorationStyle_ARKUI_TEXT_DECORATION_STYLE_DASHED: ArkUI_TextDecorationStyle =
    3;
pub const ArkUI_TextDecorationStyle_ARKUI_TEXT_DECORATION_STYLE_WAVY: ArkUI_TextDecorationStyle = 4;
pub type ArkUI_TextDecorationStyle = ::std::os::raw::c_uint;
pub const ArkUI_TextCase_ARKUI_TEXT_CASE_NORMAL: ArkUI_TextCase = 0;
pub const ArkUI_TextCase_ARKUI_TEXT_CASE_LOWER: ArkUI_TextCase = 1;
pub const ArkUI_TextCase_ARKUI_TEXT_CASE_UPPER: ArkUI_TextCase = 2;
pub type ArkUI_TextCase = ::std::os::raw::c_uint;
pub const ArkUI_CopyOptions_ARKUI_COPY_OPTIONS_NONE: ArkUI_CopyOptions = 0;
pub const ArkUI_CopyOptions_ARKUI_COPY_OPTIONS_IN_APP: ArkUI_CopyOptions = 1;
pub const ArkUI_CopyOptions_ARKUI_COPY_OPTIONS_LOCAL_DEVICE: ArkUI_CopyOptions = 2;
pub const ArkUI_CopyOptions_ARKUI_COPY_OPTIONS_CROSS_DEVICE: ArkUI_CopyOptions = 3;
pub type ArkUI_CopyOptions = ::std::os::raw::c_uint;
pub const ArkUI_ShadowType_ARKUI_SHADOW_TYPE_COLOR: ArkUI_ShadowType = 0;
pub const ArkUI_ShadowType_ARKUI_SHADOW_TYPE_BLUR: ArkUI_ShadowType = 1;
pub type ArkUI_ShadowType = ::std::os::raw::c_uint;
pub const ArkUI_TextPickerRangeType_ARKUI_TEXTPICKER_RANGETYPE_SINGLE: ArkUI_TextPickerRangeType =
    0;
pub const ArkUI_TextPickerRangeType_ARKUI_TEXTPICKER_RANGETYPE_MULTI: ArkUI_TextPickerRangeType = 1;
pub const ArkUI_TextPickerRangeType_ARKUI_TEXTPICKER_RANGETYPE_RANGE_CONTENT:
    ArkUI_TextPickerRangeType = 2;
pub const ArkUI_TextPickerRangeType_ARKUI_TEXTPICKER_RANGETYPE_CASCADE_RANGE_CONTENT:
    ArkUI_TextPickerRangeType = 3;
pub type ArkUI_TextPickerRangeType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ARKUI_TextPickerRangeContent {
    pub icon: *const ::std::os::raw::c_char,
    pub text: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ARKUI_TextPickerCascadeRangeContent {
    pub text: *const ::std::os::raw::c_char,
    pub children: *const ARKUI_TextPickerRangeContent,
    pub size: i32,
}
pub const ArkUI_EdgeEffect_ARKUI_EDGE_EFFECT_SPRING: ArkUI_EdgeEffect = 0;
pub const ArkUI_EdgeEffect_ARKUI_EDGE_EFFECT_FADE: ArkUI_EdgeEffect = 1;
pub const ArkUI_EdgeEffect_ARKUI_EDGE_EFFECT_NONE: ArkUI_EdgeEffect = 2;
pub type ArkUI_EdgeEffect = ::std::os::raw::c_uint;
pub const ArkUI_ScrollDirection_ARKUI_SCROLL_DIRECTION_VERTICAL: ArkUI_ScrollDirection = 0;
pub const ArkUI_ScrollDirection_ARKUI_SCROLL_DIRECTION_HORIZONTAL: ArkUI_ScrollDirection = 1;
pub const ArkUI_ScrollDirection_ARKUI_SCROLL_DIRECTION_NONE: ArkUI_ScrollDirection = 3;
pub type ArkUI_ScrollDirection = ::std::os::raw::c_uint;
pub const ArkUI_ScrollSnapAlign_ARKUI_SCROLL_SNAP_ALIGN_NONE: ArkUI_ScrollSnapAlign = 0;
pub const ArkUI_ScrollSnapAlign_ARKUI_SCROLL_SNAP_ALIGN_START: ArkUI_ScrollSnapAlign = 1;
pub const ArkUI_ScrollSnapAlign_ARKUI_SCROLL_SNAP_ALIGN_CENTER: ArkUI_ScrollSnapAlign = 2;
pub const ArkUI_ScrollSnapAlign_ARKUI_SCROLL_SNAP_ALIGN_END: ArkUI_ScrollSnapAlign = 3;
pub type ArkUI_ScrollSnapAlign = ::std::os::raw::c_uint;
pub const ArkUI_ScrollBarDisplayMode_ARKUI_SCROLL_BAR_DISPLAY_MODE_OFF: ArkUI_ScrollBarDisplayMode =
    0;
pub const ArkUI_ScrollBarDisplayMode_ARKUI_SCROLL_BAR_DISPLAY_MODE_AUTO:
    ArkUI_ScrollBarDisplayMode = 1;
pub const ArkUI_ScrollBarDisplayMode_ARKUI_SCROLL_BAR_DISPLAY_MODE_ON: ArkUI_ScrollBarDisplayMode =
    2;
pub type ArkUI_ScrollBarDisplayMode = ::std::os::raw::c_uint;
pub const ArkUI_Axis_ARKUI_AXIS_VERTICAL: ArkUI_Axis = 0;
pub const ArkUI_Axis_ARKUI_AXIS_HORIZONTAL: ArkUI_Axis = 1;
pub type ArkUI_Axis = ::std::os::raw::c_uint;
pub const ArkUI_StickyStyle_ARKUI_STICKY_STYLE_NONE: ArkUI_StickyStyle = 0;
pub const ArkUI_StickyStyle_ARKUI_STICKY_STYLE_HEADER: ArkUI_StickyStyle = 1;
pub const ArkUI_StickyStyle_ARKUI_STICKY_STYLE_FOOTER: ArkUI_StickyStyle = 2;
pub const ArkUI_StickyStyle_ARKUI_STICKY_STYLE_BOTH: ArkUI_StickyStyle = 3;
pub type ArkUI_StickyStyle = ::std::os::raw::c_uint;
pub const ArkUI_BorderStyle_ARKUI_BORDER_STYLE_SOLID: ArkUI_BorderStyle = 0;
pub const ArkUI_BorderStyle_ARKUI_BORDER_STYLE_DASHED: ArkUI_BorderStyle = 1;
pub const ArkUI_BorderStyle_ARKUI_BORDER_STYLE_DOTTED: ArkUI_BorderStyle = 2;
pub type ArkUI_BorderStyle = ::std::os::raw::c_uint;
pub const ArkUI_HitTestMode_ARKUI_HIT_TEST_MODE_DEFAULT: ArkUI_HitTestMode = 0;
pub const ArkUI_HitTestMode_ARKUI_HIT_TEST_MODE_BLOCK: ArkUI_HitTestMode = 1;
pub const ArkUI_HitTestMode_ARKUI_HIT_TEST_MODE_TRANSPARENT: ArkUI_HitTestMode = 2;
pub const ArkUI_HitTestMode_ARKUI_HIT_TEST_MODE_NONE: ArkUI_HitTestMode = 3;
pub type ArkUI_HitTestMode = ::std::os::raw::c_uint;
pub const ArkUI_ShadowStyle_ARKUI_SHADOW_STYLE_OUTER_DEFAULT_XS: ArkUI_ShadowStyle = 0;
pub const ArkUI_ShadowStyle_ARKUI_SHADOW_STYLE_OUTER_DEFAULT_SM: ArkUI_ShadowStyle = 1;
pub const ArkUI_ShadowStyle_ARKUI_SHADOW_STYLE_OUTER_DEFAULT_MD: ArkUI_ShadowStyle = 2;
pub const ArkUI_ShadowStyle_ARKUI_SHADOW_STYLE_OUTER_DEFAULT_LG: ArkUI_ShadowStyle = 3;
pub const ArkUI_ShadowStyle_ARKUI_SHADOW_STYLE_OUTER_FLOATING_SM: ArkUI_ShadowStyle = 4;
pub const ArkUI_ShadowStyle_ARKUI_SHADOW_STYLE_OUTER_FLOATING_MD: ArkUI_ShadowStyle = 5;
pub type ArkUI_ShadowStyle = ::std::os::raw::c_uint;
pub const ArkUI_AnimationCurve_ARKUI_CURVE_LINEAR: ArkUI_AnimationCurve = 0;
pub const ArkUI_AnimationCurve_ARKUI_CURVE_EASE: ArkUI_AnimationCurve = 1;
pub const ArkUI_AnimationCurve_ARKUI_CURVE_EASE_IN: ArkUI_AnimationCurve = 2;
pub const ArkUI_AnimationCurve_ARKUI_CURVE_EASE_OUT: ArkUI_AnimationCurve = 3;
pub const ArkUI_AnimationCurve_ARKUI_CURVE_EASE_IN_OUT: ArkUI_AnimationCurve = 4;
pub const ArkUI_AnimationCurve_ARKUI_CURVE_FAST_OUT_SLOW_IN: ArkUI_AnimationCurve = 5;
pub const ArkUI_AnimationCurve_ARKUI_CURVE_LINEAR_OUT_SLOW_IN: ArkUI_AnimationCurve = 6;
pub const ArkUI_AnimationCurve_ARKUI_CURVE_FAST_OUT_LINEAR_IN: ArkUI_AnimationCurve = 7;
pub const ArkUI_AnimationCurve_ARKUI_CURVE_EXTREME_DECELERATION: ArkUI_AnimationCurve = 8;
pub const ArkUI_AnimationCurve_ARKUI_CURVE_SHARP: ArkUI_AnimationCurve = 9;
pub const ArkUI_AnimationCurve_ARKUI_CURVE_RHYTHM: ArkUI_AnimationCurve = 10;
pub const ArkUI_AnimationCurve_ARKUI_CURVE_SMOOTH: ArkUI_AnimationCurve = 11;
pub const ArkUI_AnimationCurve_ARKUI_CURVE_FRICTION: ArkUI_AnimationCurve = 12;
pub type ArkUI_AnimationCurve = ::std::os::raw::c_uint;
pub const ArkUI_SwiperArrow_ARKUI_SWIPER_ARROW_HIDE: ArkUI_SwiperArrow = 0;
pub const ArkUI_SwiperArrow_ARKUI_SWIPER_ARROW_SHOW: ArkUI_SwiperArrow = 1;
pub const ArkUI_SwiperArrow_ARKUI_SWIPER_ARROW_SHOW_ON_HOVER: ArkUI_SwiperArrow = 2;
pub type ArkUI_SwiperArrow = ::std::os::raw::c_uint;
pub const ArkUI_SwiperNestedScrollMode_ARKUI_SWIPER_NESTED_SRCOLL_SELF_ONLY:
    ArkUI_SwiperNestedScrollMode = 0;
pub const ArkUI_SwiperNestedScrollMode_ARKUI_SWIPER_NESTED_SRCOLL_SELF_FIRST:
    ArkUI_SwiperNestedScrollMode = 1;
pub type ArkUI_SwiperNestedScrollMode = ::std::os::raw::c_uint;
pub const ArkUI_AccessibilityMode_ARKUI_ACCESSIBILITY_MODE_AUTO: ArkUI_AccessibilityMode = 0;
pub const ArkUI_AccessibilityMode_ARKUI_ACCESSIBILITY_MODE_ENABLED: ArkUI_AccessibilityMode = 1;
pub const ArkUI_AccessibilityMode_ARKUI_ACCESSIBILITY_MODE_DISABLED: ArkUI_AccessibilityMode = 2;
pub const ArkUI_AccessibilityMode_ARKUI_ACCESSIBILITY_MODE_DISABLED_FOR_DESCENDANTS:
    ArkUI_AccessibilityMode = 3;
pub type ArkUI_AccessibilityMode = ::std::os::raw::c_uint;
pub const ArkUI_TextCopyOptions_ARKUI_TEXT_COPY_OPTIONS_NONE: ArkUI_TextCopyOptions = 0;
pub const ArkUI_TextCopyOptions_ARKUI_TEXT_COPY_OPTIONS_IN_APP: ArkUI_TextCopyOptions = 1;
pub const ArkUI_TextCopyOptions_ARKUI_TEXT_COPY_OPTIONS_LOCAL_DEVICE: ArkUI_TextCopyOptions = 2;
pub const ArkUI_TextCopyOptions_ARKUI_TEXT_COPY_OPTIONS_CROSS_DEVICE: ArkUI_TextCopyOptions = 3;
pub type ArkUI_TextCopyOptions = ::std::os::raw::c_uint;
pub const ArkUI_TextHeightAdaptivePolicy_ARKUI_TEXT_HEIGHT_ADAPTIVE_POLICY_MAX_LINES_FIRST:
    ArkUI_TextHeightAdaptivePolicy = 0;
pub const ArkUI_TextHeightAdaptivePolicy_ARKUI_TEXT_HEIGHT_ADAPTIVE_POLICY_MIN_FONT_SIZE_FIRST:
    ArkUI_TextHeightAdaptivePolicy = 1;
pub const ArkUI_TextHeightAdaptivePolicy_ARKUI_TEXT_HEIGHT_ADAPTIVE_POLICY_LAYOUT_CONSTRAINT_FIRST : ArkUI_TextHeightAdaptivePolicy = 2 ;
pub type ArkUI_TextHeightAdaptivePolicy = ::std::os::raw::c_uint;
pub const ArkUI_ScrollNestedMode_ARKUI_SCROLL_NESTED_MODE_SELF_ONLY: ArkUI_ScrollNestedMode = 0;
pub const ArkUI_ScrollNestedMode_ARKUI_SCROLL_NESTED_MODE_SELF_FIRST: ArkUI_ScrollNestedMode = 1;
pub const ArkUI_ScrollNestedMode_ARKUI_SCROLL_NESTED_MODE_PARENT_FIRST: ArkUI_ScrollNestedMode = 2;
pub const ArkUI_ScrollNestedMode_ARKUI_SCROLL_NESTED_MODE_PARALLEL: ArkUI_ScrollNestedMode = 3;
pub type ArkUI_ScrollNestedMode = ::std::os::raw::c_uint;
pub const ArkUI_ScrollEdge_ARKUI_SCROLL_EDGE_TOP: ArkUI_ScrollEdge = 0;
pub const ArkUI_ScrollEdge_ARKUI_SCROLL_EDGE_BOTTOM: ArkUI_ScrollEdge = 1;
pub const ArkUI_ScrollEdge_ARKUI_SCROLL_EDGE_START: ArkUI_ScrollEdge = 2;
pub const ArkUI_ScrollEdge_ARKUI_SCROLL_EDGE_END: ArkUI_ScrollEdge = 3;
pub type ArkUI_ScrollEdge = ::std::os::raw::c_uint;
pub const ArkUI_ScrollAlignment_ARKUI_SCROLL_ALIGNMENT_START: ArkUI_ScrollAlignment = 0;
pub const ArkUI_ScrollAlignment_ARKUI_SCROLL_ALIGNMENT_CENTER: ArkUI_ScrollAlignment = 1;
pub const ArkUI_ScrollAlignment_ARKUI_SCROLL_ALIGNMENT_END: ArkUI_ScrollAlignment = 2;
pub const ArkUI_ScrollAlignment_ARKUI_SCROLL_ALIGNMENT_AUTO: ArkUI_ScrollAlignment = 3;
pub type ArkUI_ScrollAlignment = ::std::os::raw::c_uint;
pub const ArkUI_ScrollState_ARKUI_SCROLL_STATE_IDLE: ArkUI_ScrollState = 0;
pub const ArkUI_ScrollState_ARKUI_SCROLL_STATE_SCROLL: ArkUI_ScrollState = 1;
pub const ArkUI_ScrollState_ARKUI_SCROLL_STATE_FLING: ArkUI_ScrollState = 2;
pub type ArkUI_ScrollState = ::std::os::raw::c_uint;
pub const ArkUI_SliderBlockStyle_ARKUI_SLIDER_BLOCK_STYLE_DEFAULT: ArkUI_SliderBlockStyle = 0;
pub const ArkUI_SliderBlockStyle_ARKUI_SLIDER_BLOCK_STYLE_IMAGE: ArkUI_SliderBlockStyle = 1;
pub const ArkUI_SliderBlockStyle_ARKUI_SLIDER_BLOCK_STYLE_SHAPE: ArkUI_SliderBlockStyle = 2;
pub type ArkUI_SliderBlockStyle = ::std::os::raw::c_uint;
pub const ArkUI_SliderDirection_ARKUI_SLIDER_DIRECTION_VERTICAL: ArkUI_SliderDirection = 0;
pub const ArkUI_SliderDirection_ARKUI_SLIDER_DIRECTION_HORIZONTAL: ArkUI_SliderDirection = 1;
pub type ArkUI_SliderDirection = ::std::os::raw::c_uint;
pub const ArkUI_SliderStyle_ARKUI_SLIDER_STYLE_OUT_SET: ArkUI_SliderStyle = 0;
pub const ArkUI_SliderStyle_ARKUI_SLIDER_STYLE_IN_SET: ArkUI_SliderStyle = 1;
pub const ArkUI_SliderStyle_ARKUI_SLIDER_STYLE_NONE: ArkUI_SliderStyle = 2;
pub type ArkUI_SliderStyle = ::std::os::raw::c_uint;
pub const ArkUI_CheckboxShape_ArkUI_CHECKBOX_SHAPE_CIRCLE: ArkUI_CheckboxShape = 0;
pub const ArkUI_CheckboxShape_ArkUI_CHECKBOX_SHAPE_ROUNDED_SQUARE: ArkUI_CheckboxShape = 1;
pub type ArkUI_CheckboxShape = ::std::os::raw::c_uint;
pub const ArkUI_AnimationPlayMode_ARKUI_ANIMATION_PLAY_MODE_NORMAL: ArkUI_AnimationPlayMode = 0;
pub const ArkUI_AnimationPlayMode_ARKUI_ANIMATION_PLAY_MODE_REVERSE: ArkUI_AnimationPlayMode = 1;
pub const ArkUI_AnimationPlayMode_ARKUI_ANIMATION_PLAY_MODE_ALTERNATE: ArkUI_AnimationPlayMode = 2;
pub const ArkUI_AnimationPlayMode_ARKUI_ANIMATION_PLAY_MODE_ALTERNATE_REVERSE:
    ArkUI_AnimationPlayMode = 3;
pub type ArkUI_AnimationPlayMode = ::std::os::raw::c_uint;
pub const ArkUI_ImageSize_ARKUI_IMAGE_SIZE_AUTO: ArkUI_ImageSize = 0;
pub const ArkUI_ImageSize_ARKUI_IMAGE_SIZE_COVER: ArkUI_ImageSize = 1;
pub const ArkUI_ImageSize_ARKUI_IMAGE_SIZE_CONTAIN: ArkUI_ImageSize = 2;
pub type ArkUI_ImageSize = ::std::os::raw::c_uint;
pub const ArkUI_AdaptiveColor_ARKUI_ADAPTIVE_COLOR_DEFAULT: ArkUI_AdaptiveColor = 0;
pub const ArkUI_AdaptiveColor_ARKUI_ADAPTIVE_COLOR_AVERAGE: ArkUI_AdaptiveColor = 1;
pub type ArkUI_AdaptiveColor = ::std::os::raw::c_uint;
pub const ArkUI_ColorMode_ARKUI_COLOR_MODE_SYSTEM: ArkUI_ColorMode = 0;
pub const ArkUI_ColorMode_ARKUI_COLOR_MODE_LIGHT: ArkUI_ColorMode = 1;
pub const ArkUI_ColorMode_ARKUI_COLOR_MODE_DARK: ArkUI_ColorMode = 2;
pub type ArkUI_ColorMode = ::std::os::raw::c_uint;
pub const ArkUI_SystemColorMode_ARKUI_SYSTEM_COLOR_MODE_LIGHT: ArkUI_SystemColorMode = 0;
pub const ArkUI_SystemColorMode_ARKUI_SYSTEM_COLOR_MODE_DARK: ArkUI_SystemColorMode = 1;
pub type ArkUI_SystemColorMode = ::std::os::raw::c_uint;
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_THIN: ArkUI_BlurStyle = 0;
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_REGULAR: ArkUI_BlurStyle = 1;
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_THICK: ArkUI_BlurStyle = 2;
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_BACKGROUND_THIN: ArkUI_BlurStyle = 3;
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_BACKGROUND_REGULAR: ArkUI_BlurStyle = 4;
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_BACKGROUND_THICK: ArkUI_BlurStyle = 5;
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_BACKGROUND_ULTRA_THICK: ArkUI_BlurStyle = 6;
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_NONE: ArkUI_BlurStyle = 7;
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_COMPONENT_ULTRA_THIN: ArkUI_BlurStyle = 8;
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_COMPONENT_THIN: ArkUI_BlurStyle = 9;
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_COMPONENT_REGULAR: ArkUI_BlurStyle = 10;
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_COMPONENT_THICK: ArkUI_BlurStyle = 11;
pub const ArkUI_BlurStyle_ARKUI_BLUR_STYLE_COMPONENT_ULTRA_THICK: ArkUI_BlurStyle = 12;
pub type ArkUI_BlurStyle = ::std::os::raw::c_uint;
pub const ArkUI_VerticalAlignment_ARKUI_VERTICAL_ALIGNMENT_TOP: ArkUI_VerticalAlignment = 0;
pub const ArkUI_VerticalAlignment_ARKUI_VERTICAL_ALIGNMENT_CENTER: ArkUI_VerticalAlignment = 1;
pub const ArkUI_VerticalAlignment_ARKUI_VERTICAL_ALIGNMENT_BOTTOM: ArkUI_VerticalAlignment = 2;
pub type ArkUI_VerticalAlignment = ::std::os::raw::c_uint;
pub const ArkUI_HorizontalAlignment_ARKUI_HORIZONTAL_ALIGNMENT_START: ArkUI_HorizontalAlignment = 0;
pub const ArkUI_HorizontalAlignment_ARKUI_HORIZONTAL_ALIGNMENT_CENTER: ArkUI_HorizontalAlignment =
    1;
pub const ArkUI_HorizontalAlignment_ARKUI_HORIZONTAL_ALIGNMENT_END: ArkUI_HorizontalAlignment = 2;
pub type ArkUI_HorizontalAlignment = ::std::os::raw::c_uint;
pub const ArkUI_TextOverflow_ARKUI_TEXT_OVERFLOW_NONE: ArkUI_TextOverflow = 0;
pub const ArkUI_TextOverflow_ARKUI_TEXT_OVERFLOW_CLIP: ArkUI_TextOverflow = 1;
pub const ArkUI_TextOverflow_ARKUI_TEXT_OVERFLOW_ELLIPSIS: ArkUI_TextOverflow = 2;
pub const ArkUI_TextOverflow_ARKUI_TEXT_OVERFLOW_MARQUEE: ArkUI_TextOverflow = 3;
pub type ArkUI_TextOverflow = ::std::os::raw::c_uint;
pub const ArkUI_ImageSpanAlignment_ARKUI_IMAGE_SPAN_ALIGNMENT_BASELINE: ArkUI_ImageSpanAlignment =
    0;
pub const ArkUI_ImageSpanAlignment_ARKUI_IMAGE_SPAN_ALIGNMENT_BOTTOM: ArkUI_ImageSpanAlignment = 1;
pub const ArkUI_ImageSpanAlignment_ARKUI_IMAGE_SPAN_ALIGNMENT_CENTER: ArkUI_ImageSpanAlignment = 2;
pub const ArkUI_ImageSpanAlignment_ARKUI_IMAGE_SPAN_ALIGNMENT_TOP: ArkUI_ImageSpanAlignment = 3;
pub type ArkUI_ImageSpanAlignment = ::std::os::raw::c_uint;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_CONTAIN: ArkUI_ObjectFit = 0;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_COVER: ArkUI_ObjectFit = 1;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_AUTO: ArkUI_ObjectFit = 2;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_FILL: ArkUI_ObjectFit = 3;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_SCALE_DOWN: ArkUI_ObjectFit = 4;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE: ArkUI_ObjectFit = 5;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_TOP_START: ArkUI_ObjectFit = 6;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_TOP: ArkUI_ObjectFit = 7;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_TOP_END: ArkUI_ObjectFit = 8;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_START: ArkUI_ObjectFit = 9;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_CENTER: ArkUI_ObjectFit = 10;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_END: ArkUI_ObjectFit = 11;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_BOTTOM_START: ArkUI_ObjectFit = 12;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_BOTTOM: ArkUI_ObjectFit = 13;
pub const ArkUI_ObjectFit_ARKUI_OBJECT_FIT_NONE_AND_ALIGN_BOTTOM_END: ArkUI_ObjectFit = 14;
pub type ArkUI_ObjectFit = ::std::os::raw::c_uint;
pub const ArkUI_ImageInterpolation_ARKUI_IMAGE_INTERPOLATION_NONE: ArkUI_ImageInterpolation = 0;
pub const ArkUI_ImageInterpolation_ARKUI_IMAGE_INTERPOLATION_LOW: ArkUI_ImageInterpolation = 1;
pub const ArkUI_ImageInterpolation_ARKUI_IMAGE_INTERPOLATION_MEDIUM: ArkUI_ImageInterpolation = 2;
pub const ArkUI_ImageInterpolation_ARKUI_IMAGE_INTERPOLATION_HIGH: ArkUI_ImageInterpolation = 3;
pub type ArkUI_ImageInterpolation = ::std::os::raw::c_uint;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_NONE: ArkUI_BlendMode = 0;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_CLEAR: ArkUI_BlendMode = 1;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SRC: ArkUI_BlendMode = 2;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_DST: ArkUI_BlendMode = 3;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SRC_OVER: ArkUI_BlendMode = 4;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_DST_OVER: ArkUI_BlendMode = 5;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SRC_IN: ArkUI_BlendMode = 6;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_DST_IN: ArkUI_BlendMode = 7;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SRC_OUT: ArkUI_BlendMode = 8;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_DST_OUT: ArkUI_BlendMode = 9;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SRC_ATOP: ArkUI_BlendMode = 10;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_DST_ATOP: ArkUI_BlendMode = 11;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_XOR: ArkUI_BlendMode = 12;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_PLUS: ArkUI_BlendMode = 13;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_MODULATE: ArkUI_BlendMode = 14;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SCREEN: ArkUI_BlendMode = 15;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_OVERLAY: ArkUI_BlendMode = 16;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_DARKEN: ArkUI_BlendMode = 17;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_LIGHTEN: ArkUI_BlendMode = 18;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_COLOR_DODGE: ArkUI_BlendMode = 19;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_COLOR_BURN: ArkUI_BlendMode = 20;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_HARD_LIGHT: ArkUI_BlendMode = 21;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SOFT_LIGHT: ArkUI_BlendMode = 22;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_DIFFERENCE: ArkUI_BlendMode = 23;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_EXCLUSION: ArkUI_BlendMode = 24;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_MULTIPLY: ArkUI_BlendMode = 25;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_HUE: ArkUI_BlendMode = 26;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_SATURATION: ArkUI_BlendMode = 27;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_COLOR: ArkUI_BlendMode = 28;
pub const ArkUI_BlendMode_ARKUI_BLEND_MODE_LUMINOSITY: ArkUI_BlendMode = 29;
pub type ArkUI_BlendMode = ::std::os::raw::c_uint;
pub const ArkUI_Direction_ARKUI_DIRECTION_LTR: ArkUI_Direction = 0;
pub const ArkUI_Direction_ARKUI_DIRECTION_RTL: ArkUI_Direction = 1;
pub const ArkUI_Direction_ARKUI_DIRECTION_AUTO: ArkUI_Direction = 3;
pub type ArkUI_Direction = ::std::os::raw::c_uint;
pub const ArkUI_ItemAlignment_ARKUI_ITEM_ALIGNMENT_AUTO: ArkUI_ItemAlignment = 0;
pub const ArkUI_ItemAlignment_ARKUI_ITEM_ALIGNMENT_START: ArkUI_ItemAlignment = 1;
pub const ArkUI_ItemAlignment_ARKUI_ITEM_ALIGNMENT_CENTER: ArkUI_ItemAlignment = 2;
pub const ArkUI_ItemAlignment_ARKUI_ITEM_ALIGNMENT_END: ArkUI_ItemAlignment = 3;
pub const ArkUI_ItemAlignment_ARKUI_ITEM_ALIGNMENT_STRETCH: ArkUI_ItemAlignment = 4;
pub const ArkUI_ItemAlignment_ARKUI_ITEM_ALIGNMENT_BASELINE: ArkUI_ItemAlignment = 5;
pub type ArkUI_ItemAlignment = ::std::os::raw::c_uint;
pub const ArkUI_ColorStrategy_ARKUI_COLOR_STRATEGY_INVERT: ArkUI_ColorStrategy = 0;
pub const ArkUI_ColorStrategy_ARKUI_COLOR_STRATEGY_AVERAGE: ArkUI_ColorStrategy = 1;
pub const ArkUI_ColorStrategy_ARKUI_COLOR_STRATEGY_PRIMARY: ArkUI_ColorStrategy = 2;
pub type ArkUI_ColorStrategy = ::std::os::raw::c_uint;
pub const ArkUI_FlexAlignment_ARKUI_FLEX_ALIGNMENT_START: ArkUI_FlexAlignment = 1;
pub const ArkUI_FlexAlignment_ARKUI_FLEX_ALIGNMENT_CENTER: ArkUI_FlexAlignment = 2;
pub const ArkUI_FlexAlignment_ARKUI_FLEX_ALIGNMENT_END: ArkUI_FlexAlignment = 3;
pub const ArkUI_FlexAlignment_ARKUI_FLEX_ALIGNMENT_SPACE_BETWEEN: ArkUI_FlexAlignment = 6;
pub const ArkUI_FlexAlignment_ARKUI_FLEX_ALIGNMENT_SPACE_AROUND: ArkUI_FlexAlignment = 7;
pub const ArkUI_FlexAlignment_ARKUI_FLEX_ALIGNMENT_SPACE_EVENLY: ArkUI_FlexAlignment = 8;
pub type ArkUI_FlexAlignment = ::std::os::raw::c_uint;
pub const ArkUI_FlexDirection_ARKUI_FLEX_DIRECTION_ROW: ArkUI_FlexDirection = 0;
pub const ArkUI_FlexDirection_ARKUI_FLEX_DIRECTION_COLUMN: ArkUI_FlexDirection = 1;
pub const ArkUI_FlexDirection_ARKUI_FLEX_DIRECTION_ROW_REVERSE: ArkUI_FlexDirection = 2;
pub const ArkUI_FlexDirection_ARKUI_FLEX_DIRECTION_COLUMN_REVERSE: ArkUI_FlexDirection = 3;
pub type ArkUI_FlexDirection = ::std::os::raw::c_uint;
pub const ArkUI_FlexWrap_ARKUI_FLEX_WRAP_NO_WRAP: ArkUI_FlexWrap = 0;
pub const ArkUI_FlexWrap_ARKUI_FLEX_WRAP_WRAP: ArkUI_FlexWrap = 1;
pub const ArkUI_FlexWrap_ARKUI_FLEX_WRAP_WRAP_REVERSE: ArkUI_FlexWrap = 2;
pub type ArkUI_FlexWrap = ::std::os::raw::c_uint;
pub const ArkUI_Visibility_ARKUI_VISIBILITY_VISIBLE: ArkUI_Visibility = 0;
pub const ArkUI_Visibility_ARKUI_VISIBILITY_HIDDEN: ArkUI_Visibility = 1;
pub const ArkUI_Visibility_ARKUI_VISIBILITY_NONE: ArkUI_Visibility = 2;
pub type ArkUI_Visibility = ::std::os::raw::c_uint;
pub const ArkUI_CalendarAlignment_ARKUI_CALENDAR_ALIGNMENT_START: ArkUI_CalendarAlignment = 0;
pub const ArkUI_CalendarAlignment_ARKUI_CALENDAR_ALIGNMENT_CENTER: ArkUI_CalendarAlignment = 1;
pub const ArkUI_CalendarAlignment_ARKUI_CALENDAR_ALIGNMENT_END: ArkUI_CalendarAlignment = 2;
pub type ArkUI_CalendarAlignment = ::std::os::raw::c_uint;
pub const ArkUI_MaskType_ARKUI_MASK_TYPE_RECTANGLE: ArkUI_MaskType = 0;
pub const ArkUI_MaskType_ARKUI_MASK_TYPE_CIRCLE: ArkUI_MaskType = 1;
pub const ArkUI_MaskType_ARKUI_MASK_TYPE_ELLIPSE: ArkUI_MaskType = 2;
pub const ArkUI_MaskType_ARKUI_MASK_TYPE_PATH: ArkUI_MaskType = 3;
pub const ArkUI_MaskType_ARKUI_MASK_TYPE_PROGRESS: ArkUI_MaskType = 4;
pub type ArkUI_MaskType = ::std::os::raw::c_uint;
pub const ArkUI_ClipType_ARKUI_CLIP_TYPE_RECTANGLE: ArkUI_ClipType = 0;
pub const ArkUI_ClipType_ARKUI_CLIP_TYPE_CIRCLE: ArkUI_ClipType = 1;
pub const ArkUI_ClipType_ARKUI_CLIP_TYPE_ELLIPSE: ArkUI_ClipType = 2;
pub const ArkUI_ClipType_ARKUI_CLIP_TYPE_PATH: ArkUI_ClipType = 3;
pub type ArkUI_ClipType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ColorStop {
    pub colors: *const u32,
    pub stops: *mut f32,
    pub size: ::std::os::raw::c_int,
}
pub const ArkUI_ShapeType_ARKUI_SHAPE_TYPE_RECTANGLE: ArkUI_ShapeType = 0;
pub const ArkUI_ShapeType_ARKUI_SHAPE_TYPE_CIRCLE: ArkUI_ShapeType = 1;
pub const ArkUI_ShapeType_ARKUI_SHAPE_TYPE_ELLIPSE: ArkUI_ShapeType = 2;
pub const ArkUI_ShapeType_ARKUI_SHAPE_TYPE_PATH: ArkUI_ShapeType = 3;
pub type ArkUI_ShapeType = ::std::os::raw::c_uint;
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_LEFT:
    ArkUI_LinearGradientDirection = 0;
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_TOP:
    ArkUI_LinearGradientDirection = 1;
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_RIGHT:
    ArkUI_LinearGradientDirection = 2;
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_BOTTOM:
    ArkUI_LinearGradientDirection = 3;
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_LEFT_TOP:
    ArkUI_LinearGradientDirection = 4;
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_LEFT_BOTTOM:
    ArkUI_LinearGradientDirection = 5;
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_RIGHT_TOP:
    ArkUI_LinearGradientDirection = 6;
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_RIGHT_BOTTOM:
    ArkUI_LinearGradientDirection = 7;
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_NONE:
    ArkUI_LinearGradientDirection = 8;
pub const ArkUI_LinearGradientDirection_ARKUI_LINEAR_GRADIENT_DIRECTION_CUSTOM:
    ArkUI_LinearGradientDirection = 9;
pub type ArkUI_LinearGradientDirection = ::std::os::raw::c_uint;
pub const ArkUI_WordBreak_ARKUI_WORD_BREAK_NORMAL: ArkUI_WordBreak = 0;
pub const ArkUI_WordBreak_ARKUI_WORD_BREAK_BREAK_ALL: ArkUI_WordBreak = 1;
pub const ArkUI_WordBreak_ARKUI_WORD_BREAK_BREAK_WORD: ArkUI_WordBreak = 2;
pub type ArkUI_WordBreak = ::std::os::raw::c_uint;
pub const ArkUI_EllipsisMode_ARKUI_ELLIPSIS_MODE_START: ArkUI_EllipsisMode = 0;
pub const ArkUI_EllipsisMode_ARKUI_ELLIPSIS_MODE_CENTER: ArkUI_EllipsisMode = 1;
pub const ArkUI_EllipsisMode_ARKUI_ELLIPSIS_MODE_END: ArkUI_EllipsisMode = 2;
pub type ArkUI_EllipsisMode = ::std::os::raw::c_uint;
pub const ArkUI_ImageRenderMode_ARKUI_IMAGE_RENDER_MODE_ORIGINAL: ArkUI_ImageRenderMode = 0;
pub const ArkUI_ImageRenderMode_ARKUI_IMAGE_RENDER_MODE_TEMPLATE: ArkUI_ImageRenderMode = 1;
pub type ArkUI_ImageRenderMode = ::std::os::raw::c_uint;
pub const ArkUI_TransitionEdge_ARKUI_TRANSITION_EDGE_TOP: ArkUI_TransitionEdge = 0;
pub const ArkUI_TransitionEdge_ARKUI_TRANSITION_EDGE_BOTTOM: ArkUI_TransitionEdge = 1;
pub const ArkUI_TransitionEdge_ARKUI_TRANSITION_EDGE_START: ArkUI_TransitionEdge = 2;
pub const ArkUI_TransitionEdge_ARKUI_TRANSITION_EDGE_END: ArkUI_TransitionEdge = 3;
pub type ArkUI_TransitionEdge = ::std::os::raw::c_uint;
pub const ArkUI_BlendApplyType_BLEND_APPLY_TYPE_FAST: ArkUI_BlendApplyType = 0;
pub const ArkUI_BlendApplyType_BLEND_APPLY_TYPE_OFFSCREEN: ArkUI_BlendApplyType = 1;
pub type ArkUI_BlendApplyType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_Rect {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_IntSize {
    pub width: i32,
    pub height: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_IntOffset {
    pub x: i32,
    pub y: i32,
}
pub const ArkUI_FinishCallbackType_ARKUI_FINISH_CALLBACK_REMOVED: ArkUI_FinishCallbackType = 0;
pub const ArkUI_FinishCallbackType_ARKUI_FINISH_CALLBACK_LOGICALLY: ArkUI_FinishCallbackType = 1;
pub type ArkUI_FinishCallbackType = ::std::os::raw::c_uint;
pub const ArkUI_ListItemAlignment_ARKUI_LIST_ITEM_ALIGNMENT_START: ArkUI_ListItemAlignment = 0;
pub const ArkUI_ListItemAlignment_ARKUI_LIST_ITEM_ALIGNMENT_CENTER: ArkUI_ListItemAlignment = 1;
pub const ArkUI_ListItemAlignment_ARKUI_LIST_ITEM_ALIGNMENT_END: ArkUI_ListItemAlignment = 2;
pub type ArkUI_ListItemAlignment = ::std::os::raw::c_uint;
pub const ArkUI_BarrierDirection_ARKUI_BARRIER_DIRECTION_START: ArkUI_BarrierDirection = 0;
pub const ArkUI_BarrierDirection_ARKUI_BARRIER_DIRECTION_END: ArkUI_BarrierDirection = 1;
pub const ArkUI_BarrierDirection_ARKUI_BARRIER_DIRECTION_TOP: ArkUI_BarrierDirection = 2;
pub const ArkUI_BarrierDirection_ARKUI_BARRIER_DIRECTION_BOTTOM: ArkUI_BarrierDirection = 3;
pub type ArkUI_BarrierDirection = ::std::os::raw::c_uint;
pub const ArkUI_RelativeLayoutChainStyle_ARKUI_RELATIVE_LAYOUT_CHAIN_STYLE_SPREAD:
    ArkUI_RelativeLayoutChainStyle = 0;
pub const ArkUI_RelativeLayoutChainStyle_ARKUI_RELATIVE_LAYOUT_CHAIN_STYLE_SPREAD_INSIDE:
    ArkUI_RelativeLayoutChainStyle = 1;
pub const ArkUI_RelativeLayoutChainStyle_ARKUI_RELATIVE_LAYOUT_CHAIN_STYLE_PACKED:
    ArkUI_RelativeLayoutChainStyle = 2;
pub type ArkUI_RelativeLayoutChainStyle = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_Margin {
    pub top: f32,
    pub right: f32,
    pub bottom: f32,
    pub left: f32,
}
pub const ArkUI_LengthMetricUnit_ARKUI_LENGTH_METRIC_UNIT_DEFAULT: ArkUI_LengthMetricUnit = -1;
pub const ArkUI_LengthMetricUnit_ARKUI_LENGTH_METRIC_UNIT_PX: ArkUI_LengthMetricUnit = 0;
pub const ArkUI_LengthMetricUnit_ARKUI_LENGTH_METRIC_UNIT_VP: ArkUI_LengthMetricUnit = 1;
pub const ArkUI_LengthMetricUnit_ARKUI_LENGTH_METRIC_UNIT_FP: ArkUI_LengthMetricUnit = 2;
pub type ArkUI_LengthMetricUnit = ::std::os::raw::c_int;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_CENTER: ArkUI_RenderFit = 0;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_TOP: ArkUI_RenderFit = 1;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_BOTTOM: ArkUI_RenderFit = 2;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_LEFT: ArkUI_RenderFit = 3;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RIGHT: ArkUI_RenderFit = 4;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_TOP_LEFT: ArkUI_RenderFit = 5;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_TOP_RIGHT: ArkUI_RenderFit = 6;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_BOTTOM_LEFT: ArkUI_RenderFit = 7;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_BOTTOM_RIGHT: ArkUI_RenderFit = 8;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RESIZE_FILL: ArkUI_RenderFit = 9;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RESIZE_CONTAIN: ArkUI_RenderFit = 10;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RESIZE_CONTAIN_TOP_LEFT: ArkUI_RenderFit = 11;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RESIZE_CONTAIN_BOTTOM_RIGHT: ArkUI_RenderFit = 12;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RESIZE_COVER: ArkUI_RenderFit = 13;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RESIZE_COVER_TOP_LEFT: ArkUI_RenderFit = 14;
pub const ArkUI_RenderFit_ARKUI_RENDER_FIT_RESIZE_COVER_BOTTOM_RIGHT: ArkUI_RenderFit = 15;
pub type ArkUI_RenderFit = ::std::os::raw::c_uint;
pub const ArkUI_ButtonType_ARKUI_BUTTON_TYPE_NORMAL: ArkUI_ButtonType = 0;
pub const ArkUI_ButtonType_ARKUI_BUTTON_TYPE_CAPSULE: ArkUI_ButtonType = 1;
pub const ArkUI_ButtonType_ARKUI_BUTTON_TYPE_CIRCLE: ArkUI_ButtonType = 2;
pub type ArkUI_ButtonType = ::std::os::raw::c_uint;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_USER_NAME:
    ArkUI_TextInputContentType = 0;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_PASSWORD:
    ArkUI_TextInputContentType = 1;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_NEW_PASSWORD:
    ArkUI_TextInputContentType = 2;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_FULL_STREET_ADDRESS:
    ArkUI_TextInputContentType = 3;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_HOUSE_NUMBER:
    ArkUI_TextInputContentType = 4;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_DISTRICT_ADDRESS:
    ArkUI_TextInputContentType = 5;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_CITY_ADDRESS:
    ArkUI_TextInputContentType = 6;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_PROVINCE_ADDRESS:
    ArkUI_TextInputContentType = 7;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_COUNTRY_ADDRESS:
    ArkUI_TextInputContentType = 8;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_PERSON_FULL_NAME:
    ArkUI_TextInputContentType = 9;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_PERSON_LAST_NAME:
    ArkUI_TextInputContentType = 10;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_PERSON_FIRST_NAME:
    ArkUI_TextInputContentType = 11;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_PHONE_NUMBER:
    ArkUI_TextInputContentType = 12;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_PHONE_COUNTRY_CODE:
    ArkUI_TextInputContentType = 13;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_FULL_PHONE_NUMBER:
    ArkUI_TextInputContentType = 14;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_EMAIL_ADDRESS:
    ArkUI_TextInputContentType = 15;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_BANK_CARD_NUMBER:
    ArkUI_TextInputContentType = 16;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_ID_CARD_NUMBER:
    ArkUI_TextInputContentType = 17;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_NICKNAME:
    ArkUI_TextInputContentType = 18;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_DETAIL_INFO_WITHOUT_STREET:
    ArkUI_TextInputContentType = 19;
pub const ArkUI_TextInputContentType_ARKUI_TEXTINPUT_CONTENT_TYPE_FORMAT_ADDRESS:
    ArkUI_TextInputContentType = 20;
pub type ArkUI_TextInputContentType = ::std::os::raw::c_uint;
pub const ArkUI_TextInputStyle_ARKUI_TEXTINPUT_STYLE_DEFAULT: ArkUI_TextInputStyle = 0;
pub const ArkUI_TextInputStyle_ARKUI_TEXTINPUT_STYLE_INLINE: ArkUI_TextInputStyle = 1;
pub type ArkUI_TextInputStyle = ::std::os::raw::c_uint;
pub const ArkUI_TextDataDetectorType_ARKUI_TEXT_DATA_DETECTOR_TYPE_PHONE_NUMBER:
    ArkUI_TextDataDetectorType = 0;
pub const ArkUI_TextDataDetectorType_ARKUI_TEXT_DATA_DETECTOR_TYPE_URL: ArkUI_TextDataDetectorType =
    1;
pub const ArkUI_TextDataDetectorType_ARKUI_TEXT_DATA_DETECTOR_TYPE_EMAIL:
    ArkUI_TextDataDetectorType = 2;
pub const ArkUI_TextDataDetectorType_ARKUI_TEXT_DATA_DETECTOR_TYPE_ADDRESS:
    ArkUI_TextDataDetectorType = 3;
pub type ArkUI_TextDataDetectorType = ::std::os::raw::c_uint;
pub const ArkUI_SwiperIndicatorType_ARKUI_SWIPER_INDICATOR_TYPE_DOT: ArkUI_SwiperIndicatorType = 0;
pub const ArkUI_SwiperIndicatorType_ARKUI_SWIPER_INDICATOR_TYPE_DIGIT: ArkUI_SwiperIndicatorType =
    1;
pub type ArkUI_SwiperIndicatorType = ::std::os::raw::c_uint;
pub const ArkUI_ListItemSwipeActionState_ARKUI_LIST_ITEM_SWIPE_ACTION_STATE_COLLAPSED:
    ArkUI_ListItemSwipeActionState = 0;
pub const ArkUI_ListItemSwipeActionState_ARKUI_LIST_ITEM_SWIPE_ACTION_STATE_EXPANDED:
    ArkUI_ListItemSwipeActionState = 1;
pub const ArkUI_ListItemSwipeActionState_ARKUI_LIST_ITEM_SWIPE_ACTION_STATE_ACTIONING:
    ArkUI_ListItemSwipeActionState = 2;
pub type ArkUI_ListItemSwipeActionState = ::std::os::raw::c_uint;
pub const ArkUI_ListItemSwipeEdgeEffect_ARKUI_LIST_ITEM_SWIPE_EDGE_EFFECT_SPRING:
    ArkUI_ListItemSwipeEdgeEffect = 0;
pub const ArkUI_ListItemSwipeEdgeEffect_ARKUI_LIST_ITEM_SWIPE_EDGE_EFFECT_NONE:
    ArkUI_ListItemSwipeEdgeEffect = 1;
pub type ArkUI_ListItemSwipeEdgeEffect = ::std::os::raw::c_uint;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_NO_ERROR: ArkUI_ErrorCode = 0;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_PARAM_INVALID: ArkUI_ErrorCode = 401;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_ATTRIBUTE_OR_EVENT_NOT_SUPPORTED: ArkUI_ErrorCode =
    106102;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_ARKTS_NODE_NOT_SUPPORTED: ArkUI_ErrorCode = 106103;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_ADAPTER_NOT_BOUND: ArkUI_ErrorCode = 106104;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_ADAPTER_EXIST: ArkUI_ErrorCode = 106105;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_CHILD_NODE_EXIST: ArkUI_ErrorCode = 106106;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_NODE_EVENT_PARAM_INDEX_OUT_OF_RANGE: ArkUI_ErrorCode =
    106107;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_NODE_EVENT_PARAM_INVALID: ArkUI_ErrorCode = 106108;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_NODE_EVENT_NO_RETURN: ArkUI_ErrorCode = 106109;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_NODE_INDEX_INVALID: ArkUI_ErrorCode = 106200;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_GET_INFO_FAILED: ArkUI_ErrorCode = 106201;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR: ArkUI_ErrorCode = 106202;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_NON_SCROLLABLE_CONTAINER: ArkUI_ErrorCode = 180001;
pub const ArkUI_ErrorCode_ARKUI_ERROR_CODE_BUFFER_SIZE_NOT_ENOUGH: ArkUI_ErrorCode = 180002;
pub type ArkUI_ErrorCode = ::std::os::raw::c_uint;
pub const ArkUI_AnimationStatus_ARKUI_ANIMATION_STATUS_INITIAL: ArkUI_AnimationStatus = 0;
pub const ArkUI_AnimationStatus_ARKUI_ANIMATION_STATUS_RUNNING: ArkUI_AnimationStatus = 1;
pub const ArkUI_AnimationStatus_ARKUI_ANIMATION_STATUS_PAUSED: ArkUI_AnimationStatus = 2;
pub const ArkUI_AnimationStatus_ARKUI_ANIMATION_STATUS_STOPPED: ArkUI_AnimationStatus = 3;
pub type ArkUI_AnimationStatus = ::std::os::raw::c_uint;
pub const ArkUI_AnimationFillMode_ARKUI_ANIMATION_FILL_MODE_NONE: ArkUI_AnimationFillMode = 0;
pub const ArkUI_AnimationFillMode_ARKUI_ANIMATION_FILL_MODE_FORWARDS: ArkUI_AnimationFillMode = 1;
pub const ArkUI_AnimationFillMode_ARKUI_ANIMATION_FILL_MODE_BACKWARDS: ArkUI_AnimationFillMode = 2;
pub const ArkUI_AnimationFillMode_ARKUI_ANIMATION_FILL_MODE_BOTH: ArkUI_AnimationFillMode = 3;
pub type ArkUI_AnimationFillMode = ::std::os::raw::c_uint;
pub const ArkUI_AccessibilityCheckedState_ARKUI_ACCESSIBILITY_UNCHECKED:
    ArkUI_AccessibilityCheckedState = 0;
pub const ArkUI_AccessibilityCheckedState_ARKUI_ACCESSIBILITY_CHECKED:
    ArkUI_AccessibilityCheckedState = 1;
pub type ArkUI_AccessibilityCheckedState = ::std::os::raw::c_uint;
pub const ArkUI_AnimationDirection_ARKUI_ANIMATION_DIRECTION_NORMAL: ArkUI_AnimationDirection = 0;
pub const ArkUI_AnimationDirection_ARKUI_ANIMATION_DIRECTION_REVERSE: ArkUI_AnimationDirection = 1;
pub const ArkUI_AnimationDirection_ARKUI_ANIMATION_DIRECTION_ALTERNATE: ArkUI_AnimationDirection =
    2;
pub const ArkUI_AnimationDirection_ARKUI_ANIMATION_DIRECTION_ALTERNATE_REVERSE:
    ArkUI_AnimationDirection = 3;
pub type ArkUI_AnimationDirection = ::std::os::raw::c_uint;
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_DRAG: ArkUI_ScrollSource = 0;
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_FLING: ArkUI_ScrollSource = 1;
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_EDGE_EFFECT: ArkUI_ScrollSource = 2;
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_OTHER_USER_INPUT: ArkUI_ScrollSource = 3;
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_SCROLL_BAR: ArkUI_ScrollSource = 4;
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_SCROLL_BAR_FLING: ArkUI_ScrollSource = 5;
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_SCROLLER: ArkUI_ScrollSource = 6;
pub const ArkUI_ScrollSource_ARKUI_SCROLL_SOURCE_ANIMATION: ArkUI_ScrollSource = 7;
pub type ArkUI_ScrollSource = ::std::os::raw::c_uint;
pub const ArkUI_AccessibilityActionType_ARKUI_ACCESSIBILITY_ACTION_CLICK:
    ArkUI_AccessibilityActionType = 1;
pub const ArkUI_AccessibilityActionType_ARKUI_ACCESSIBILITY_ACTION_LONG_CLICK:
    ArkUI_AccessibilityActionType = 2;
pub const ArkUI_AccessibilityActionType_ARKUI_ACCESSIBILITY_ACTION_CUT:
    ArkUI_AccessibilityActionType = 4;
pub const ArkUI_AccessibilityActionType_ARKUI_ACCESSIBILITY_ACTION_COPY:
    ArkUI_AccessibilityActionType = 8;
pub const ArkUI_AccessibilityActionType_ARKUI_ACCESSIBILITY_ACTION_PASTE:
    ArkUI_AccessibilityActionType = 16;
pub type ArkUI_AccessibilityActionType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_TranslationOptions {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ScaleOptions {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub centerX: f32,
    pub centerY: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_RotationOptions {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub angle: f32,
    pub centerX: f32,
    pub centerY: f32,
    pub centerZ: f32,
    pub perspective: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_CustomSpanMeasureInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_CustomSpanMetrics {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_CustomSpanDrawInfo {
    _unused: [u8; 0],
}
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_SHOW: ArkUI_NavDestinationState =
    0;
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_HIDE: ArkUI_NavDestinationState =
    1;
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_APPEAR:
    ArkUI_NavDestinationState = 2;
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_DISAPPEAR:
    ArkUI_NavDestinationState = 3;
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_WILL_SHOW:
    ArkUI_NavDestinationState = 4;
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_WILL_HIDE:
    ArkUI_NavDestinationState = 5;
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_WILL_APPEAR:
    ArkUI_NavDestinationState = 6;
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_WILL_DISAPPEAR:
    ArkUI_NavDestinationState = 7;
pub const ArkUI_NavDestinationState_ARKUI_NAV_DESTINATION_STATE_ON_BACK_PRESS:
    ArkUI_NavDestinationState = 100;
pub type ArkUI_NavDestinationState = ::std::os::raw::c_uint;
pub const ArkUI_RouterPageState_ARKUI_ROUTER_PAGE_STATE_ABOUT_TO_APPEAR: ArkUI_RouterPageState = 0;
pub const ArkUI_RouterPageState_ARKUI_ROUTER_PAGE_STATE_ABOUT_TO_DISAPPEAR: ArkUI_RouterPageState =
    1;
pub const ArkUI_RouterPageState_ARKUI_ROUTER_PAGE_STATE_ON_SHOW: ArkUI_RouterPageState = 2;
pub const ArkUI_RouterPageState_ARKUI_ROUTER_PAGE_STATE_ON_HIDE: ArkUI_RouterPageState = 3;
pub const ArkUI_RouterPageState_ARKUI_ROUTER_PAGE_STATE_ON_BACK_PRESS: ArkUI_RouterPageState = 4;
pub type ArkUI_RouterPageState = ::std::os::raw::c_uint;
pub const ArkUI_SafeAreaType_ARKUI_SAFE_AREA_TYPE_SYSTEM: ArkUI_SafeAreaType = 1;
pub const ArkUI_SafeAreaType_ARKUI_SAFE_AREA_TYPE_CUTOUT: ArkUI_SafeAreaType = 2;
pub const ArkUI_SafeAreaType_ARKUI_SAFE_AREA_TYPE_KEYBOARD: ArkUI_SafeAreaType = 4;
pub type ArkUI_SafeAreaType = ::std::os::raw::c_uint;
pub const ArkUI_SafeAreaEdge_ARKUI_SAFE_AREA_EDGE_TOP: ArkUI_SafeAreaEdge = 1;
pub const ArkUI_SafeAreaEdge_ARKUI_SAFE_AREA_EDGE_BOTTOM: ArkUI_SafeAreaEdge = 2;
pub const ArkUI_SafeAreaEdge_ARKUI_SAFE_AREA_EDGE_START: ArkUI_SafeAreaEdge = 4;
pub const ArkUI_SafeAreaEdge_ARKUI_SAFE_AREA_EDGE_END: ArkUI_SafeAreaEdge = 8;
pub type ArkUI_SafeAreaEdge = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_SystemFontStyleEvent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_Create() -> *mut ArkUI_LayoutConstraint;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_Copy(
        Constraint: *const ArkUI_LayoutConstraint,
    ) -> *mut ArkUI_LayoutConstraint;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_Dispose(
        Constraint: *mut ArkUI_LayoutConstraint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_GetMaxWidth(Constraint: *const ArkUI_LayoutConstraint) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_GetMinWidth(Constraint: *const ArkUI_LayoutConstraint) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_GetMaxHeight(Constraint: *const ArkUI_LayoutConstraint)
        -> i32;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_GetMinHeight(Constraint: *const ArkUI_LayoutConstraint)
        -> i32;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_GetPercentReferenceWidth(
        Constraint: *const ArkUI_LayoutConstraint,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_GetPercentReferenceHeight(
        Constraint: *const ArkUI_LayoutConstraint,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_SetMaxWidth(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_SetMinWidth(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_SetMaxHeight(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_SetMinHeight(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_SetPercentReferenceWidth(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_LayoutConstraint_SetPercentReferenceHeight(
        Constraint: *mut ArkUI_LayoutConstraint,
        value: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_DrawContext_GetCanvas(
        context: *mut ArkUI_DrawContext,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OH_ArkUI_DrawContext_GetSize(context: *mut ArkUI_DrawContext) -> ArkUI_IntSize;
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_Create() -> *mut ArkUI_WaterFlowSectionOption;
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_Dispose(option: *mut ArkUI_WaterFlowSectionOption);
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_SetSize(
        option: *mut ArkUI_WaterFlowSectionOption,
        size: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_GetSize(
        option: *mut ArkUI_WaterFlowSectionOption,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_SetItemCount(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        itemCount: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_GetItemCount(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_RegisterGetItemMainSizeCallbackByIndex(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        callback: ::std::option::Option<unsafe extern "C" fn(itemIndex: i32) -> f32>,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_RegisterGetItemMainSizeCallbackByIndexWithUserData(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(itemIndex: i32, userData: *mut ::std::os::raw::c_void) -> f32,
        >,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_SetCrossCount(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        crossCount: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_GetCrossCount(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_SetColumnGap(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        columnGap: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_GetColumnGap(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_SetRowGap(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        rowGap: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_GetRowGap(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_SetMargin(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
        marginTop: f32,
        marginRight: f32,
        marginBottom: f32,
        marginLeft: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_WaterFlowSectionOption_GetMargin(
        option: *mut ArkUI_WaterFlowSectionOption,
        index: i32,
    ) -> ArkUI_Margin;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_Create(
        type_: ArkUI_SwiperIndicatorType,
    ) -> *mut ArkUI_SwiperIndicator;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_Dispose(indicator: *mut ArkUI_SwiperIndicator);
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetStartPosition(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetStartPosition(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetTopPosition(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetTopPosition(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetEndPosition(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetEndPosition(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetBottomPosition(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetBottomPosition(indicator: *mut ArkUI_SwiperIndicator)
        -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetItemWidth(indicator: *mut ArkUI_SwiperIndicator, value: f32);
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetItemWidth(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetItemHeight(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetItemHeight(indicator: *mut ArkUI_SwiperIndicator) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetSelectedItemWidth(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetSelectedItemWidth(
        indicator: *mut ArkUI_SwiperIndicator,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetSelectedItemHeight(
        indicator: *mut ArkUI_SwiperIndicator,
        value: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetSelectedItemHeight(
        indicator: *mut ArkUI_SwiperIndicator,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetMask(indicator: *mut ArkUI_SwiperIndicator, mask: i32);
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetMask(indicator: *mut ArkUI_SwiperIndicator) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetColor(indicator: *mut ArkUI_SwiperIndicator, color: u32);
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetColor(indicator: *mut ArkUI_SwiperIndicator) -> u32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetSelectedColor(
        indicator: *mut ArkUI_SwiperIndicator,
        selectedColor: u32,
    );
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetSelectedColor(indicator: *mut ArkUI_SwiperIndicator) -> u32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_SetMaxDisplayCount(
        indicator: *mut ArkUI_SwiperIndicator,
        maxDisplayCount: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_SwiperIndicator_GetMaxDisplayCount(
        indicator: *mut ArkUI_SwiperIndicator,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_Create(size: i32) -> *mut ArkUI_GuidelineOption;
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_Dispose(guideline: *mut ArkUI_GuidelineOption);
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_SetId(
        guideline: *mut ArkUI_GuidelineOption,
        value: *const ::std::os::raw::c_char,
        index: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_SetDirection(
        guideline: *mut ArkUI_GuidelineOption,
        value: ArkUI_Axis,
        index: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_SetPositionStart(
        guideline: *mut ArkUI_GuidelineOption,
        value: f32,
        index: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_SetPositionEnd(
        guideline: *mut ArkUI_GuidelineOption,
        value: f32,
        index: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_GetId(
        guideline: *mut ArkUI_GuidelineOption,
        index: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_GetDirection(
        guideline: *mut ArkUI_GuidelineOption,
        index: i32,
    ) -> ArkUI_Axis;
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_GetPositionStart(
        guideline: *mut ArkUI_GuidelineOption,
        index: i32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_GuidelineOption_GetPositionEnd(
        guideline: *mut ArkUI_GuidelineOption,
        index: i32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_Create(size: i32) -> *mut ArkUI_BarrierOption;
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_Dispose(barrierStyle: *mut ArkUI_BarrierOption);
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_SetId(
        barrierStyle: *mut ArkUI_BarrierOption,
        value: *const ::std::os::raw::c_char,
        index: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_SetDirection(
        barrierStyle: *mut ArkUI_BarrierOption,
        value: ArkUI_BarrierDirection,
        index: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_SetReferencedId(
        barrierStyle: *mut ArkUI_BarrierOption,
        value: *const ::std::os::raw::c_char,
        index: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_GetId(
        barrierStyle: *mut ArkUI_BarrierOption,
        index: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_GetDirection(
        barrierStyle: *mut ArkUI_BarrierOption,
        index: i32,
    ) -> ArkUI_BarrierDirection;
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_GetReferencedId(
        barrierStyle: *mut ArkUI_BarrierOption,
        index: i32,
        referencedIndex: i32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_BarrierOption_GetReferencedIdSize(
        barrierStyle: *mut ArkUI_BarrierOption,
        index: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_Create() -> *mut ArkUI_AlignmentRuleOption;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_Dispose(option: *mut ArkUI_AlignmentRuleOption);
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetStart(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_HorizontalAlignment,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetEnd(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_HorizontalAlignment,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetCenterHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_HorizontalAlignment,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetTop(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_VerticalAlignment,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetBottom(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_VerticalAlignment,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetCenterVertical(
        option: *mut ArkUI_AlignmentRuleOption,
        id: *const ::std::os::raw::c_char,
        alignment: ArkUI_VerticalAlignment,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetBiasHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
        horizontal: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_SetBiasVertical(
        option: *mut ArkUI_AlignmentRuleOption,
        vertical: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetStartId(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetStartAlignment(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_HorizontalAlignment;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetEndId(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetEndAlignment(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_HorizontalAlignment;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetCenterIdHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetCenterAlignmentHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_HorizontalAlignment;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetTopId(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetTopAlignment(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_VerticalAlignment;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetBottomId(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetBottomAlignment(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_VerticalAlignment;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetCenterIdVertical(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetCenterAlignmentVertical(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> ArkUI_VerticalAlignment;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetBiasHorizontal(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_AlignmentRuleOption_GetBiasVertical(
        option: *mut ArkUI_AlignmentRuleOption,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_Create() -> *mut ArkUI_ListItemSwipeActionItem;
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_Dispose(item: *mut ArkUI_ListItemSwipeActionItem);
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetContent(
        item: *mut ArkUI_ListItemSwipeActionItem,
        node: ArkUI_NodeHandle,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetActionAreaDistance(
        item: *mut ArkUI_ListItemSwipeActionItem,
        distance: f32,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_GetActionAreaDistance(
        item: *mut ArkUI_ListItemSwipeActionItem,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnEnterActionArea(
        item: *mut ArkUI_ListItemSwipeActionItem,
        callback: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnEnterActionAreaWithUserData(
        item: *mut ArkUI_ListItemSwipeActionItem,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnAction(
        item: *mut ArkUI_ListItemSwipeActionItem,
        callback: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnActionWithUserData(
        item: *mut ArkUI_ListItemSwipeActionItem,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnExitActionArea(
        item: *mut ArkUI_ListItemSwipeActionItem,
        callback: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnExitActionAreaWithUserData(
        item: *mut ArkUI_ListItemSwipeActionItem,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnStateChange(
        item: *mut ArkUI_ListItemSwipeActionItem,
        callback: ::std::option::Option<
            unsafe extern "C" fn(swipeActionState: ArkUI_ListItemSwipeActionState),
        >,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionItem_SetOnStateChangeWithUserData(
        item: *mut ArkUI_ListItemSwipeActionItem,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                swipeActionState: ArkUI_ListItemSwipeActionState,
                userData: *mut ::std::os::raw::c_void,
            ),
        >,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_Create() -> *mut ArkUI_ListItemSwipeActionOption;
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_Dispose(option: *mut ArkUI_ListItemSwipeActionOption);
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetStart(
        option: *mut ArkUI_ListItemSwipeActionOption,
        item: *mut ArkUI_ListItemSwipeActionItem,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetEnd(
        option: *mut ArkUI_ListItemSwipeActionOption,
        item: *mut ArkUI_ListItemSwipeActionItem,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetEdgeEffect(
        option: *mut ArkUI_ListItemSwipeActionOption,
        edgeEffect: ArkUI_ListItemSwipeEdgeEffect,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_GetEdgeEffect(
        option: *mut ArkUI_ListItemSwipeActionOption,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetOnOffsetChange(
        option: *mut ArkUI_ListItemSwipeActionOption,
        callback: ::std::option::Option<unsafe extern "C" fn(offset: f32)>,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListItemSwipeActionOption_SetOnOffsetChangeWithUserData(
        option: *mut ArkUI_ListItemSwipeActionOption,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(offset: f32, userData: *mut ::std::os::raw::c_void),
        >,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_Create() -> *mut ArkUI_ListChildrenMainSize;
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_Dispose(option: *mut ArkUI_ListChildrenMainSize);
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_SetDefaultMainSize(
        option: *mut ArkUI_ListChildrenMainSize,
        defaultMainSize: f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_GetDefaultMainSize(
        option: *mut ArkUI_ListChildrenMainSize,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_Resize(
        option: *mut ArkUI_ListChildrenMainSize,
        totalSize: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_Splice(
        option: *mut ArkUI_ListChildrenMainSize,
        index: i32,
        deleteCount: i32,
        addCount: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_UpdateSize(
        option: *mut ArkUI_ListChildrenMainSize,
        index: i32,
        mainSize: f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ListChildrenMainSizeOption_GetMainSize(
        option: *mut ArkUI_ListChildrenMainSize,
        index: i32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanMeasureInfo_Create() -> *mut ArkUI_CustomSpanMeasureInfo;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanMeasureInfo_Dispose(info: *mut ArkUI_CustomSpanMeasureInfo);
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanMeasureInfo_GetFontSize(
        info: *mut ArkUI_CustomSpanMeasureInfo,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanMetrics_Create() -> *mut ArkUI_CustomSpanMetrics;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanMetrics_Dispose(metrics: *mut ArkUI_CustomSpanMetrics);
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanMetrics_SetWidth(
        metrics: *mut ArkUI_CustomSpanMetrics,
        width: f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanMetrics_SetHeight(
        metrics: *mut ArkUI_CustomSpanMetrics,
        height: f32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanDrawInfo_Create() -> *mut ArkUI_CustomSpanDrawInfo;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanDrawInfo_Dispose(info: *mut ArkUI_CustomSpanDrawInfo);
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanDrawInfo_GetXOffset(info: *mut ArkUI_CustomSpanDrawInfo) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanDrawInfo_GetLineTop(info: *mut ArkUI_CustomSpanDrawInfo) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanDrawInfo_GetLineBottom(info: *mut ArkUI_CustomSpanDrawInfo) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_CustomSpanDrawInfo_GetBaseline(info: *mut ArkUI_CustomSpanDrawInfo) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_CreateFromString(
        src: *mut ::std::os::raw::c_char,
    ) -> *mut ArkUI_ImageAnimatorFrameInfo;
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_CreateFromDrawableDescriptor(
        drawable: *mut ArkUI_DrawableDescriptor,
    ) -> *mut ArkUI_ImageAnimatorFrameInfo;
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_Dispose(imageInfo: *mut ArkUI_ImageAnimatorFrameInfo);
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetWidth(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        width: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetWidth(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetHeight(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        height: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetHeight(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetTop(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        top: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetTop(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetLeft(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        left: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetLeft(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_SetDuration(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
        duration: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_ImageAnimatorFrameInfo_GetDuration(
        imageInfo: *mut ArkUI_ImageAnimatorFrameInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_Create() -> *mut ArkUI_AccessibilityState;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_Dispose(state: *mut ArkUI_AccessibilityState);
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_SetDisabled(
        state: *mut ArkUI_AccessibilityState,
        isDisabled: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_IsDisabled(state: *mut ArkUI_AccessibilityState) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_SetSelected(
        state: *mut ArkUI_AccessibilityState,
        isSelected: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_IsSelected(state: *mut ArkUI_AccessibilityState) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_SetCheckedState(
        state: *mut ArkUI_AccessibilityState,
        checkedState: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityState_GetCheckedState(state: *mut ArkUI_AccessibilityState)
        -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_Create() -> *mut ArkUI_AccessibilityValue;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_Dispose(value: *mut ArkUI_AccessibilityValue);
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_SetMin(value: *mut ArkUI_AccessibilityValue, min: i32);
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_GetMin(value: *mut ArkUI_AccessibilityValue) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_SetMax(value: *mut ArkUI_AccessibilityValue, max: i32);
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_GetMax(value: *mut ArkUI_AccessibilityValue) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_SetCurrent(
        value: *mut ArkUI_AccessibilityValue,
        current: i32,
    );
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_GetCurrent(value: *mut ArkUI_AccessibilityValue) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_SetText(
        value: *mut ArkUI_AccessibilityValue,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OH_ArkUI_AccessibilityValue_GetText(
        value: *mut ArkUI_AccessibilityValue,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ExpectedFrameRateRange {
    pub min: u32,
    pub max: u32,
    pub expected: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AnimateCompleteCallback {
    pub type_: ArkUI_FinishCallbackType,
    pub callback:
        ::std::option::Option<unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void)>,
    pub userData: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AnimateOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_Curve {
    _unused: [u8; 0],
}
pub type ArkUI_CurveHandle = *mut ArkUI_Curve;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_KeyframeAnimateOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AnimatorOption {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_Animator {
    _unused: [u8; 0],
}
pub type ArkUI_AnimatorHandle = *mut ArkUI_Animator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AnimatorEvent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AnimatorOnFrameEvent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_TransitionEffect {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_NativeAnimateAPI_1 {
    pub animateTo: ::std::option::Option<
        unsafe extern "C" fn(
            context: ArkUI_ContextHandle,
            option: *mut ArkUI_AnimateOption,
            update: *mut ArkUI_ContextCallback,
            complete: *mut ArkUI_AnimateCompleteCallback,
        ) -> i32,
    >,
    pub keyframeAnimateTo: ::std::option::Option<
        unsafe extern "C" fn(
            context: ArkUI_ContextHandle,
            option: *mut ArkUI_KeyframeAnimateOption,
        ) -> i32,
    >,
    pub createAnimator: ::std::option::Option<
        unsafe extern "C" fn(
            context: ArkUI_ContextHandle,
            option: *mut ArkUI_AnimatorOption,
        ) -> ArkUI_AnimatorHandle,
    >,
    pub disposeAnimator:
        ::std::option::Option<unsafe extern "C" fn(animatorHandle: ArkUI_AnimatorHandle)>,
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_Create() -> *mut ArkUI_AnimateOption;
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_Dispose(option: *mut ArkUI_AnimateOption);
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_GetDuration(option: *mut ArkUI_AnimateOption) -> u32;
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_GetTempo(option: *mut ArkUI_AnimateOption) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_GetCurve(
        option: *mut ArkUI_AnimateOption,
    ) -> ArkUI_AnimationCurve;
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_GetDelay(option: *mut ArkUI_AnimateOption) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_GetIterations(option: *mut ArkUI_AnimateOption) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_GetPlayMode(
        option: *mut ArkUI_AnimateOption,
    ) -> ArkUI_AnimationPlayMode;
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_GetExpectedFrameRateRange(
        option: *mut ArkUI_AnimateOption,
    ) -> *mut ArkUI_ExpectedFrameRateRange;
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_SetDuration(option: *mut ArkUI_AnimateOption, value: i32);
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_SetTempo(option: *mut ArkUI_AnimateOption, value: f32);
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_SetCurve(
        option: *mut ArkUI_AnimateOption,
        value: ArkUI_AnimationCurve,
    );
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_SetDelay(option: *mut ArkUI_AnimateOption, value: i32);
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_SetIterations(option: *mut ArkUI_AnimateOption, value: i32);
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_SetPlayMode(
        option: *mut ArkUI_AnimateOption,
        value: ArkUI_AnimationPlayMode,
    );
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_SetExpectedFrameRateRange(
        option: *mut ArkUI_AnimateOption,
        value: *mut ArkUI_ExpectedFrameRateRange,
    );
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_SetICurve(
        option: *mut ArkUI_AnimateOption,
        value: ArkUI_CurveHandle,
    );
}
extern "C" {
    pub fn OH_ArkUI_AnimateOption_GetICurve(option: *mut ArkUI_AnimateOption) -> ArkUI_CurveHandle;
}
extern "C" {
    pub fn OH_ArkUI_KeyframeAnimateOption_Create(size: i32) -> *mut ArkUI_KeyframeAnimateOption;
}
extern "C" {
    pub fn OH_ArkUI_KeyframeAnimateOption_Dispose(option: *mut ArkUI_KeyframeAnimateOption);
}
extern "C" {
    pub fn OH_ArkUI_KeyframeAnimateOption_SetDelay(
        option: *mut ArkUI_KeyframeAnimateOption,
        value: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_KeyframeAnimateOption_SetIterations(
        option: *mut ArkUI_KeyframeAnimateOption,
        value: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_KeyframeAnimateOption_RegisterOnFinishCallback(
        option: *mut ArkUI_KeyframeAnimateOption,
        userData: *mut ::std::os::raw::c_void,
        onFinish: ::std::option::Option<
            unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void),
        >,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_KeyframeAnimateOption_SetDuration(
        option: *mut ArkUI_KeyframeAnimateOption,
        value: i32,
        index: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_KeyframeAnimateOption_SetCurve(
        option: *mut ArkUI_KeyframeAnimateOption,
        value: ArkUI_CurveHandle,
        index: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_KeyframeAnimateOption_RegisterOnEventCallback(
        option: *mut ArkUI_KeyframeAnimateOption,
        userData: *mut ::std::os::raw::c_void,
        event: ::std::option::Option<unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void)>,
        index: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_KeyframeAnimateOption_GetDelay(option: *mut ArkUI_KeyframeAnimateOption)
        -> i32;
}
extern "C" {
    pub fn OH_ArkUI_KeyframeAnimateOption_GetIterations(
        option: *mut ArkUI_KeyframeAnimateOption,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_KeyframeAnimateOption_GetDuration(
        option: *mut ArkUI_KeyframeAnimateOption,
        index: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_KeyframeAnimateOption_GetCurve(
        option: *mut ArkUI_KeyframeAnimateOption,
        index: i32,
    ) -> ArkUI_CurveHandle;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_Create(keyframeSize: i32) -> *mut ArkUI_AnimatorOption;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_Dispose(option: *mut ArkUI_AnimatorOption);
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_SetDuration(
        option: *mut ArkUI_AnimatorOption,
        value: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_SetDelay(option: *mut ArkUI_AnimatorOption, value: i32) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_SetIterations(
        option: *mut ArkUI_AnimatorOption,
        value: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_SetFill(
        option: *mut ArkUI_AnimatorOption,
        value: ArkUI_AnimationFillMode,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_SetDirection(
        option: *mut ArkUI_AnimatorOption,
        value: ArkUI_AnimationDirection,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_SetCurve(
        option: *mut ArkUI_AnimatorOption,
        value: ArkUI_CurveHandle,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_SetBegin(option: *mut ArkUI_AnimatorOption, value: f32) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_SetEnd(option: *mut ArkUI_AnimatorOption, value: f32) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_SetExpectedFrameRateRange(
        option: *mut ArkUI_AnimatorOption,
        value: *mut ArkUI_ExpectedFrameRateRange,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_SetKeyframe(
        option: *mut ArkUI_AnimatorOption,
        time: f32,
        value: f32,
        index: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_SetKeyframeCurve(
        option: *mut ArkUI_AnimatorOption,
        value: ArkUI_CurveHandle,
        index: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_GetDuration(option: *mut ArkUI_AnimatorOption) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_GetDelay(option: *mut ArkUI_AnimatorOption) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_GetIterations(option: *mut ArkUI_AnimatorOption) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_GetFill(
        option: *mut ArkUI_AnimatorOption,
    ) -> ArkUI_AnimationFillMode;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_GetDirection(
        option: *mut ArkUI_AnimatorOption,
    ) -> ArkUI_AnimationDirection;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_GetCurve(option: *mut ArkUI_AnimatorOption)
        -> ArkUI_CurveHandle;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_GetBegin(option: *mut ArkUI_AnimatorOption) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_GetEnd(option: *mut ArkUI_AnimatorOption) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_GetExpectedFrameRateRange(
        option: *mut ArkUI_AnimatorOption,
    ) -> *mut ArkUI_ExpectedFrameRateRange;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_GetKeyframeTime(
        option: *mut ArkUI_AnimatorOption,
        index: i32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_GetKeyframeValue(
        option: *mut ArkUI_AnimatorOption,
        index: i32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_GetKeyframeCurve(
        option: *mut ArkUI_AnimatorOption,
        index: i32,
    ) -> ArkUI_CurveHandle;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorEvent_GetUserData(
        event: *mut ArkUI_AnimatorEvent,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOnFrameEvent_GetUserData(
        event: *mut ArkUI_AnimatorOnFrameEvent,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOnFrameEvent_GetValue(event: *mut ArkUI_AnimatorOnFrameEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_RegisterOnFrameCallback(
        option: *mut ArkUI_AnimatorOption,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<
            unsafe extern "C" fn(event: *mut ArkUI_AnimatorOnFrameEvent),
        >,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_RegisterOnFinishCallback(
        option: *mut ArkUI_AnimatorOption,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<unsafe extern "C" fn(event: *mut ArkUI_AnimatorEvent)>,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_RegisterOnCancelCallback(
        option: *mut ArkUI_AnimatorOption,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<unsafe extern "C" fn(event: *mut ArkUI_AnimatorEvent)>,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_AnimatorOption_RegisterOnRepeatCallback(
        option: *mut ArkUI_AnimatorOption,
        userData: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<unsafe extern "C" fn(event: *mut ArkUI_AnimatorEvent)>,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_Animator_ResetAnimatorOption(
        animatorHandle: ArkUI_AnimatorHandle,
        option: *mut ArkUI_AnimatorOption,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_Animator_Play(animatorHandle: ArkUI_AnimatorHandle) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_Animator_Finish(animatorHandle: ArkUI_AnimatorHandle) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_Animator_Pause(animatorHandle: ArkUI_AnimatorHandle) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_Animator_Cancel(animatorHandle: ArkUI_AnimatorHandle) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_Animator_Reverse(animatorHandle: ArkUI_AnimatorHandle) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_Curve_CreateCurveByType(curve: ArkUI_AnimationCurve) -> ArkUI_CurveHandle;
}
extern "C" {
    pub fn OH_ArkUI_Curve_CreateStepsCurve(count: i32, end: bool) -> ArkUI_CurveHandle;
}
extern "C" {
    pub fn OH_ArkUI_Curve_CreateCubicBezierCurve(
        x1: f32,
        y1: f32,
        x2: f32,
        y2: f32,
    ) -> ArkUI_CurveHandle;
}
extern "C" {
    pub fn OH_ArkUI_Curve_CreateSpringCurve(
        velocity: f32,
        mass: f32,
        stiffness: f32,
        damping: f32,
    ) -> ArkUI_CurveHandle;
}
extern "C" {
    pub fn OH_ArkUI_Curve_CreateSpringMotion(
        response: f32,
        dampingFraction: f32,
        overlapDuration: f32,
    ) -> ArkUI_CurveHandle;
}
extern "C" {
    pub fn OH_ArkUI_Curve_CreateResponsiveSpringMotion(
        response: f32,
        dampingFraction: f32,
        overlapDuration: f32,
    ) -> ArkUI_CurveHandle;
}
extern "C" {
    pub fn OH_ArkUI_Curve_CreateInterpolatingSpring(
        velocity: f32,
        mass: f32,
        stiffness: f32,
        damping: f32,
    ) -> ArkUI_CurveHandle;
}
extern "C" {
    pub fn OH_ArkUI_Curve_CreateCustomCurve(
        userData: *mut ::std::os::raw::c_void,
        interpolate: ::std::option::Option<
            unsafe extern "C" fn(fraction: f32, userdata: *mut ::std::os::raw::c_void) -> f32,
        >,
    ) -> ArkUI_CurveHandle;
}
extern "C" {
    pub fn OH_ArkUI_Curve_DisposeCurve(curveHandle: ArkUI_CurveHandle);
}
extern "C" {
    pub fn OH_ArkUI_CreateOpacityTransitionEffect(opacity: f32) -> *mut ArkUI_TransitionEffect;
}
extern "C" {
    pub fn OH_ArkUI_CreateTranslationTransitionEffect(
        translate: *mut ArkUI_TranslationOptions,
    ) -> *mut ArkUI_TransitionEffect;
}
extern "C" {
    pub fn OH_ArkUI_CreateScaleTransitionEffect(
        scale: *mut ArkUI_ScaleOptions,
    ) -> *mut ArkUI_TransitionEffect;
}
extern "C" {
    pub fn OH_ArkUI_CreateRotationTransitionEffect(
        rotate: *mut ArkUI_RotationOptions,
    ) -> *mut ArkUI_TransitionEffect;
}
extern "C" {
    pub fn OH_ArkUI_CreateMovementTransitionEffect(
        edge: ArkUI_TransitionEdge,
    ) -> *mut ArkUI_TransitionEffect;
}
extern "C" {
    pub fn OH_ArkUI_CreateAsymmetricTransitionEffect(
        appear: *mut ArkUI_TransitionEffect,
        disappear: *mut ArkUI_TransitionEffect,
    ) -> *mut ArkUI_TransitionEffect;
}
extern "C" {
    pub fn OH_ArkUI_TransitionEffect_Dispose(effect: *mut ArkUI_TransitionEffect);
}
extern "C" {
    pub fn OH_ArkUI_TransitionEffect_Combine(
        firstEffect: *mut ArkUI_TransitionEffect,
        secondEffect: *mut ArkUI_TransitionEffect,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_TransitionEffect_SetAnimation(
        effect: *mut ArkUI_TransitionEffect,
        animation: *mut ArkUI_AnimateOption,
    ) -> i32;
}
pub const ArkUI_DismissReason_DIALOG_DISMISS_BACK_PRESS: ArkUI_DismissReason = 0;
pub const ArkUI_DismissReason_DIALOG_DISMISS_TOUCH_OUTSIDE: ArkUI_DismissReason = 1;
pub const ArkUI_DismissReason_DIALOG_DISMISS_CLOSE_BUTTON: ArkUI_DismissReason = 2;
pub const ArkUI_DismissReason_DIALOG_DISMISS_SLIDE_DOWN: ArkUI_DismissReason = 3;
pub type ArkUI_DismissReason = ::std::os::raw::c_uint;
pub type ArkUI_OnWillDismissEvent =
    ::std::option::Option<unsafe extern "C" fn(reason: i32) -> bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_DialogDismissEvent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_NativeDialogAPI_1 {
    pub create: ::std::option::Option<unsafe extern "C" fn() -> ArkUI_NativeDialogHandle>,
    pub dispose: ::std::option::Option<unsafe extern "C" fn(handle: ArkUI_NativeDialogHandle)>,
    pub setContent: ::std::option::Option<
        unsafe extern "C" fn(handle: ArkUI_NativeDialogHandle, content: ArkUI_NodeHandle) -> i32,
    >,
    pub removeContent:
        ::std::option::Option<unsafe extern "C" fn(handle: ArkUI_NativeDialogHandle) -> i32>,
    pub setContentAlignment: ::std::option::Option<
        unsafe extern "C" fn(
            handle: ArkUI_NativeDialogHandle,
            alignment: i32,
            offsetX: f32,
            offsetY: f32,
        ) -> i32,
    >,
    pub resetContentAlignment:
        ::std::option::Option<unsafe extern "C" fn(handle: ArkUI_NativeDialogHandle) -> i32>,
    pub setModalMode: ::std::option::Option<
        unsafe extern "C" fn(handle: ArkUI_NativeDialogHandle, isModal: bool) -> i32,
    >,
    pub setAutoCancel: ::std::option::Option<
        unsafe extern "C" fn(handle: ArkUI_NativeDialogHandle, autoCancel: bool) -> i32,
    >,
    pub setMask: ::std::option::Option<
        unsafe extern "C" fn(
            handle: ArkUI_NativeDialogHandle,
            maskColor: u32,
            maskRect: *const ArkUI_Rect,
        ) -> i32,
    >,
    pub setBackgroundColor: ::std::option::Option<
        unsafe extern "C" fn(handle: ArkUI_NativeDialogHandle, backgroundColor: u32) -> i32,
    >,
    pub setCornerRadius: ::std::option::Option<
        unsafe extern "C" fn(
            handle: ArkUI_NativeDialogHandle,
            topLeft: f32,
            topRight: f32,
            bottomLeft: f32,
            bottomRight: f32,
        ) -> i32,
    >,
    pub setGridColumnCount: ::std::option::Option<
        unsafe extern "C" fn(handle: ArkUI_NativeDialogHandle, gridCount: i32) -> i32,
    >,
    pub enableCustomStyle: ::std::option::Option<
        unsafe extern "C" fn(handle: ArkUI_NativeDialogHandle, enableCustomStyle: bool) -> i32,
    >,
    pub enableCustomAnimation: ::std::option::Option<
        unsafe extern "C" fn(handle: ArkUI_NativeDialogHandle, enableCustomAnimation: bool) -> i32,
    >,
    pub registerOnWillDismiss: ::std::option::Option<
        unsafe extern "C" fn(
            handle: ArkUI_NativeDialogHandle,
            eventHandler: ArkUI_OnWillDismissEvent,
        ) -> i32,
    >,
    pub show: ::std::option::Option<
        unsafe extern "C" fn(handle: ArkUI_NativeDialogHandle, showInSubWindow: bool) -> i32,
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn(handle: ArkUI_NativeDialogHandle) -> i32>,
    pub registerOnWillDismissWithUserData: ::std::option::Option<
        unsafe extern "C" fn(
            handle: ArkUI_NativeDialogHandle,
            userData: *mut ::std::os::raw::c_void,
            callback: ::std::option::Option<
                unsafe extern "C" fn(event: *mut ArkUI_DialogDismissEvent),
            >,
        ) -> i32,
    >,
}
extern "C" {
    pub fn OH_ArkUI_DialogDismissEvent_SetShouldBlockDismiss(
        event: *mut ArkUI_DialogDismissEvent,
        shouldBlockDismiss: bool,
    );
}
extern "C" {
    pub fn OH_ArkUI_DialogDismissEvent_GetUserData(
        event: *mut ArkUI_DialogDismissEvent,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OH_ArkUI_DialogDismissEvent_GetDismissReason(
        event: *mut ArkUI_DialogDismissEvent,
    ) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_UIInputEvent {
    _unused: [u8; 0],
}
pub const ArkUI_UIInputEvent_Type_ARKUI_UIINPUTEVENT_TYPE_UNKNOWN: ArkUI_UIInputEvent_Type = 0;
pub const ArkUI_UIInputEvent_Type_ARKUI_UIINPUTEVENT_TYPE_TOUCH: ArkUI_UIInputEvent_Type = 1;
pub const ArkUI_UIInputEvent_Type_ARKUI_UIINPUTEVENT_TYPE_AXIS: ArkUI_UIInputEvent_Type = 2;
pub const ArkUI_UIInputEvent_Type_ARKUI_UIINPUTEVENT_TYPE_MOUSE: ArkUI_UIInputEvent_Type = 3;
pub type ArkUI_UIInputEvent_Type = ::std::os::raw::c_uint;
pub const HitTestMode_HTM_DEFAULT: HitTestMode = 0;
pub const HitTestMode_HTM_BLOCK: HitTestMode = 1;
pub const HitTestMode_HTM_TRANSPARENT: HitTestMode = 2;
pub const HitTestMode_HTM_NONE: HitTestMode = 3;
pub type HitTestMode = ::std::os::raw::c_uint;
pub const ArkUI_ModifierKeyName_ARKUI_MODIFIER_KEY_CTRL: ArkUI_ModifierKeyName = 1;
pub const ArkUI_ModifierKeyName_ARKUI_MODIFIER_KEY_SHIFT: ArkUI_ModifierKeyName = 2;
pub const ArkUI_ModifierKeyName_ARKUI_MODIFIER_KEY_ALT: ArkUI_ModifierKeyName = 4;
pub const ArkUI_ModifierKeyName_ARKUI_MODIFIER_KEY_FN: ArkUI_ModifierKeyName = 8;
pub type ArkUI_ModifierKeyName = ::std::os::raw::c_uint;
extern "C" {
    pub fn OH_ArkUI_UIInputEvent_GetType(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_UIInputEvent_GetAction(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_UIInputEvent_GetSourceType(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_UIInputEvent_GetToolType(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_UIInputEvent_GetEventTime(event: *const ArkUI_UIInputEvent) -> i64;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetPointerCount(event: *const ArkUI_UIInputEvent) -> u32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetPointerId(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetX(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetXByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetY(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetYByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetWindowX(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetWindowXByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetWindowY(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetWindowYByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetDisplayX(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetDisplayXByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetDisplayY(event: *const ArkUI_UIInputEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetDisplayYByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetPressure(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetTiltX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetTiltY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetTouchAreaWidth(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetTouchAreaHeight(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistorySize(event: *const ArkUI_UIInputEvent) -> u32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryEventTime(
        event: *const ArkUI_UIInputEvent,
        historyIndex: u32,
    ) -> i64;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryPointerCount(
        event: *const ArkUI_UIInputEvent,
        historyIndex: u32,
    ) -> u32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryPointerId(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryWindowX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryWindowY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryDisplayX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryDisplayY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryPressure(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryTiltX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryTiltY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryTouchAreaWidth(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_GetHistoryTouchAreaHeight(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_AxisEvent_GetVerticalAxisValue(event: *const ArkUI_UIInputEvent) -> f64;
}
extern "C" {
    pub fn OH_ArkUI_AxisEvent_GetHorizontalAxisValue(event: *const ArkUI_UIInputEvent) -> f64;
}
extern "C" {
    pub fn OH_ArkUI_AxisEvent_GetPinchAxisScaleValue(event: *const ArkUI_UIInputEvent) -> f64;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_SetInterceptHitTestMode(
        event: *const ArkUI_UIInputEvent,
        mode: HitTestMode,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_MouseEvent_GetMouseButton(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_MouseEvent_GetMouseAction(event: *const ArkUI_UIInputEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_PointerEvent_SetStopPropagation(
        event: *const ArkUI_UIInputEvent,
        stopPropagation: bool,
    ) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_GestureRecognizer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_GestureInterruptInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_GestureEvent {
    _unused: [u8; 0],
}
pub const ArkUI_GestureEventActionType_GESTURE_EVENT_ACTION_ACCEPT: ArkUI_GestureEventActionType =
    1;
pub const ArkUI_GestureEventActionType_GESTURE_EVENT_ACTION_UPDATE: ArkUI_GestureEventActionType =
    2;
pub const ArkUI_GestureEventActionType_GESTURE_EVENT_ACTION_END: ArkUI_GestureEventActionType = 4;
pub const ArkUI_GestureEventActionType_GESTURE_EVENT_ACTION_CANCEL: ArkUI_GestureEventActionType =
    8;
pub type ArkUI_GestureEventActionType = ::std::os::raw::c_uint;
pub type ArkUI_GestureEventActionTypeMask = u32;
pub const ArkUI_GesturePriority_NORMAL: ArkUI_GesturePriority = 0;
pub const ArkUI_GesturePriority_PRIORITY: ArkUI_GesturePriority = 1;
pub const ArkUI_GesturePriority_PARALLEL: ArkUI_GesturePriority = 2;
pub type ArkUI_GesturePriority = ::std::os::raw::c_uint;
pub const ArkUI_GroupGestureMode_SEQUENTIAL_GROUP: ArkUI_GroupGestureMode = 0;
pub const ArkUI_GroupGestureMode_PARALLEL_GROUP: ArkUI_GroupGestureMode = 1;
pub const ArkUI_GroupGestureMode_EXCLUSIVE_GROUP: ArkUI_GroupGestureMode = 2;
pub type ArkUI_GroupGestureMode = ::std::os::raw::c_uint;
pub const ArkUI_GestureDirection_GESTURE_DIRECTION_ALL: ArkUI_GestureDirection = 15;
pub const ArkUI_GestureDirection_GESTURE_DIRECTION_HORIZONTAL: ArkUI_GestureDirection = 3;
pub const ArkUI_GestureDirection_GESTURE_DIRECTION_VERTICAL: ArkUI_GestureDirection = 12;
pub const ArkUI_GestureDirection_GESTURE_DIRECTION_LEFT: ArkUI_GestureDirection = 1;
pub const ArkUI_GestureDirection_GESTURE_DIRECTION_RIGHT: ArkUI_GestureDirection = 2;
pub const ArkUI_GestureDirection_GESTURE_DIRECTION_UP: ArkUI_GestureDirection = 4;
pub const ArkUI_GestureDirection_GESTURE_DIRECTION_DOWN: ArkUI_GestureDirection = 8;
pub const ArkUI_GestureDirection_GESTURE_DIRECTION_NONE: ArkUI_GestureDirection = 0;
pub type ArkUI_GestureDirection = ::std::os::raw::c_uint;
pub type ArkUI_GestureDirectionMask = u32;
pub const ArkUI_GestureMask_NORMAL_GESTURE_MASK: ArkUI_GestureMask = 0;
pub const ArkUI_GestureMask_IGNORE_INTERNAL_GESTURE_MASK: ArkUI_GestureMask = 1;
pub type ArkUI_GestureMask = ::std::os::raw::c_uint;
pub const ArkUI_GestureRecognizerType_TAP_GESTURE: ArkUI_GestureRecognizerType = 0;
pub const ArkUI_GestureRecognizerType_LONG_PRESS_GESTURE: ArkUI_GestureRecognizerType = 1;
pub const ArkUI_GestureRecognizerType_PAN_GESTURE: ArkUI_GestureRecognizerType = 2;
pub const ArkUI_GestureRecognizerType_PINCH_GESTURE: ArkUI_GestureRecognizerType = 3;
pub const ArkUI_GestureRecognizerType_ROTATION_GESTURE: ArkUI_GestureRecognizerType = 4;
pub const ArkUI_GestureRecognizerType_SWIPE_GESTURE: ArkUI_GestureRecognizerType = 5;
pub const ArkUI_GestureRecognizerType_GROUP_GESTURE: ArkUI_GestureRecognizerType = 6;
pub type ArkUI_GestureRecognizerType = ::std::os::raw::c_uint;
pub const ArkUI_GestureInterruptResult_GESTURE_INTERRUPT_RESULT_CONTINUE:
    ArkUI_GestureInterruptResult = 0;
pub const ArkUI_GestureInterruptResult_GESTURE_INTERRUPT_RESULT_REJECT:
    ArkUI_GestureInterruptResult = 1;
pub type ArkUI_GestureInterruptResult = ::std::os::raw::c_uint;
pub const ArkUI_GestureRecognizerState_ARKUI_GESTURE_RECOGNIZER_STATE_READY:
    ArkUI_GestureRecognizerState = 0;
pub const ArkUI_GestureRecognizerState_ARKUI_GESTURE_RECOGNIZER_STATE_DETECTING:
    ArkUI_GestureRecognizerState = 1;
pub const ArkUI_GestureRecognizerState_ARKUI_GESTURE_RECOGNIZER_STATE_PENDING:
    ArkUI_GestureRecognizerState = 2;
pub const ArkUI_GestureRecognizerState_ARKUI_GESTURE_RECOGNIZER_STATE_BLOCKED:
    ArkUI_GestureRecognizerState = 3;
pub const ArkUI_GestureRecognizerState_ARKUI_GESTURE_RECOGNIZER_STATE_SUCCESSFUL:
    ArkUI_GestureRecognizerState = 4;
pub const ArkUI_GestureRecognizerState_ARKUI_GESTURE_RECOGNIZER_STATE_FAILED:
    ArkUI_GestureRecognizerState = 5;
pub type ArkUI_GestureRecognizerState = ::std::os::raw::c_uint;
pub type ArkUI_GestureRecognizerHandle = *mut ArkUI_GestureRecognizer;
pub type ArkUI_GestureRecognizerHandleArray = *mut ArkUI_GestureRecognizerHandle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_GestureEventTargetInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ParallelInnerGestureEvent {
    _unused: [u8; 0],
}
pub type ArkUI_GestureRecognizerDisposeNotifyCallback = ::std::option::Option<
    unsafe extern "C" fn(
        recognizer: *mut ArkUI_GestureRecognizer,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn OH_ArkUI_GestureInterruptInfo_GetSystemFlag(
        event: *const ArkUI_GestureInterruptInfo,
    ) -> bool;
}
extern "C" {
    pub fn OH_ArkUI_GestureInterruptInfo_GetRecognizer(
        event: *const ArkUI_GestureInterruptInfo,
    ) -> *mut ArkUI_GestureRecognizer;
}
extern "C" {
    pub fn OH_ArkUI_GestureInterruptInfo_GetGestureEvent(
        event: *const ArkUI_GestureInterruptInfo,
    ) -> *mut ArkUI_GestureEvent;
}
extern "C" {
    pub fn OH_ArkUI_GestureInterruptInfo_GetSystemRecognizerType(
        event: *const ArkUI_GestureInterruptInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GestureEvent_GetActionType(
        event: *const ArkUI_GestureEvent,
    ) -> ArkUI_GestureEventActionType;
}
extern "C" {
    pub fn OH_ArkUI_GestureEvent_GetRawInputEvent(
        event: *const ArkUI_GestureEvent,
    ) -> *const ArkUI_UIInputEvent;
}
extern "C" {
    pub fn OH_ArkUI_LongPress_GetRepeatCount(event: *const ArkUI_GestureEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_PanGesture_GetVelocity(event: *const ArkUI_GestureEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PanGesture_GetVelocityX(event: *const ArkUI_GestureEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PanGesture_GetVelocityY(event: *const ArkUI_GestureEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PanGesture_GetOffsetX(event: *const ArkUI_GestureEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PanGesture_GetOffsetY(event: *const ArkUI_GestureEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwipeGesture_GetAngle(event: *const ArkUI_GestureEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SwipeGesture_GetVelocity(event: *const ArkUI_GestureEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_RotationGesture_GetAngle(event: *const ArkUI_GestureEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PinchGesture_GetScale(event: *const ArkUI_GestureEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PinchGesture_GetCenterX(event: *const ArkUI_GestureEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_PinchGesture_GetCenterY(event: *const ArkUI_GestureEvent) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_GestureEvent_GetNode(event: *const ArkUI_GestureEvent) -> ArkUI_NodeHandle;
}
extern "C" {
    pub fn OH_ArkUI_GetResponseRecognizersFromInterruptInfo(
        event: *const ArkUI_GestureInterruptInfo,
        responseChain: *mut ArkUI_GestureRecognizerHandleArray,
        count: *mut i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_SetGestureRecognizerEnabled(
        recognizer: *mut ArkUI_GestureRecognizer,
        enabled: bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GetGestureRecognizerEnabled(recognizer: *mut ArkUI_GestureRecognizer) -> bool;
}
extern "C" {
    pub fn OH_ArkUI_GetGestureRecognizerState(
        recognizer: *mut ArkUI_GestureRecognizer,
        state: *mut ArkUI_GestureRecognizerState,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GetGestureEventTargetInfo(
        recognizer: *mut ArkUI_GestureRecognizer,
        info: *mut *mut ArkUI_GestureEventTargetInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GestureEventTargetInfo_IsScrollBegin(
        info: *mut ArkUI_GestureEventTargetInfo,
        ret: *mut bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GestureEventTargetInfo_IsScrollEnd(
        info: *mut ArkUI_GestureEventTargetInfo,
        ret: *mut bool,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GetPanGestureDirectionMask(
        recognizer: *mut ArkUI_GestureRecognizer,
        directionMask: *mut ArkUI_GestureDirectionMask,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_IsBuiltInGesture(recognizer: *mut ArkUI_GestureRecognizer) -> bool;
}
extern "C" {
    pub fn OH_ArkUI_GetGestureTag(
        recognizer: *mut ArkUI_GestureRecognizer,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: i32,
        result: *mut i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GetGestureBindNodeId(
        recognizer: *mut ArkUI_GestureRecognizer,
        nodeId: *mut ::std::os::raw::c_char,
        size: i32,
        result: *mut i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_IsGestureRecognizerValid(recognizer: *mut ArkUI_GestureRecognizer) -> bool;
}
extern "C" {
    pub fn OH_ArkUI_ParallelInnerGestureEvent_GetUserData(
        event: *mut ArkUI_ParallelInnerGestureEvent,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OH_ArkUI_ParallelInnerGestureEvent_GetCurrentRecognizer(
        event: *mut ArkUI_ParallelInnerGestureEvent,
    ) -> *mut ArkUI_GestureRecognizer;
}
extern "C" {
    pub fn OH_ArkUI_ParallelInnerGestureEvent_GetConflictRecognizers(
        event: *mut ArkUI_ParallelInnerGestureEvent,
        array: *mut ArkUI_GestureRecognizerHandleArray,
        size: *mut i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_SetArkUIGestureRecognizerDisposeNotify(
        recognizer: *mut ArkUI_GestureRecognizer,
        callback: ArkUI_GestureRecognizerDisposeNotifyCallback,
        userData: *mut ::std::os::raw::c_void,
    ) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_NativeGestureAPI_1 {
    pub version: i32,
    pub createTapGesture: ::std::option::Option<
        unsafe extern "C" fn(countNum: i32, fingersNum: i32) -> *mut ArkUI_GestureRecognizer,
    >,
    pub createLongPressGesture: ::std::option::Option<
        unsafe extern "C" fn(
            fingersNum: i32,
            repeatResult: bool,
            durationNum: i32,
        ) -> *mut ArkUI_GestureRecognizer,
    >,
    pub createPanGesture: ::std::option::Option<
        unsafe extern "C" fn(
            fingersNum: i32,
            directions: ArkUI_GestureDirectionMask,
            distanceNum: f64,
        ) -> *mut ArkUI_GestureRecognizer,
    >,
    pub createPinchGesture: ::std::option::Option<
        unsafe extern "C" fn(fingersNum: i32, distanceNum: f64) -> *mut ArkUI_GestureRecognizer,
    >,
    pub createRotationGesture: ::std::option::Option<
        unsafe extern "C" fn(fingersNum: i32, angleNum: f64) -> *mut ArkUI_GestureRecognizer,
    >,
    pub createSwipeGesture: ::std::option::Option<
        unsafe extern "C" fn(
            fingersNum: i32,
            directions: ArkUI_GestureDirectionMask,
            speedNum: f64,
        ) -> *mut ArkUI_GestureRecognizer,
    >,
    pub createGroupGesture: ::std::option::Option<
        unsafe extern "C" fn(gestureMode: ArkUI_GroupGestureMode) -> *mut ArkUI_GestureRecognizer,
    >,
    pub dispose:
        ::std::option::Option<unsafe extern "C" fn(recognizer: *mut ArkUI_GestureRecognizer)>,
    pub addChildGesture: ::std::option::Option<
        unsafe extern "C" fn(
            group: *mut ArkUI_GestureRecognizer,
            child: *mut ArkUI_GestureRecognizer,
        ) -> i32,
    >,
    pub removeChildGesture: ::std::option::Option<
        unsafe extern "C" fn(
            group: *mut ArkUI_GestureRecognizer,
            child: *mut ArkUI_GestureRecognizer,
        ) -> i32,
    >,
    pub setGestureEventTarget: ::std::option::Option<
        unsafe extern "C" fn(
            recognizer: *mut ArkUI_GestureRecognizer,
            actionTypeMask: ArkUI_GestureEventActionTypeMask,
            extraParams: *mut ::std::os::raw::c_void,
            targetReceiver: ::std::option::Option<
                unsafe extern "C" fn(
                    event: *mut ArkUI_GestureEvent,
                    extraParams: *mut ::std::os::raw::c_void,
                ),
            >,
        ) -> i32,
    >,
    pub addGestureToNode: ::std::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            recognizer: *mut ArkUI_GestureRecognizer,
            mode: ArkUI_GesturePriority,
            mask: ArkUI_GestureMask,
        ) -> i32,
    >,
    pub removeGestureFromNode: ::std::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            recognizer: *mut ArkUI_GestureRecognizer,
        ) -> i32,
    >,
    pub setGestureInterrupterToNode: ::std::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            interrupter: ::std::option::Option<
                unsafe extern "C" fn(
                    info: *mut ArkUI_GestureInterruptInfo,
                ) -> ArkUI_GestureInterruptResult,
            >,
        ) -> i32,
    >,
    pub getGestureType: ::std::option::Option<
        unsafe extern "C" fn(
            recognizer: *mut ArkUI_GestureRecognizer,
        ) -> ArkUI_GestureRecognizerType,
    >,
    pub setInnerGestureParallelTo: ::std::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            userData: *mut ::std::os::raw::c_void,
            parallelInnerGesture: ::std::option::Option<
                unsafe extern "C" fn(
                    event: *mut ArkUI_ParallelInnerGestureEvent,
                ) -> *mut ArkUI_GestureRecognizer,
            >,
        ) -> i32,
    >,
    pub createTapGestureWithDistanceThreshold: ::std::option::Option<
        unsafe extern "C" fn(
            countNum: i32,
            fingersNum: i32,
            distanceThreshold: f64,
        ) -> *mut ArkUI_GestureRecognizer,
    >,
}
pub const ArkUI_NativeAPIVariantKind_ARKUI_NATIVE_NODE: ArkUI_NativeAPIVariantKind = 0;
pub const ArkUI_NativeAPIVariantKind_ARKUI_NATIVE_DIALOG: ArkUI_NativeAPIVariantKind = 1;
pub const ArkUI_NativeAPIVariantKind_ARKUI_NATIVE_GESTURE: ArkUI_NativeAPIVariantKind = 2;
pub const ArkUI_NativeAPIVariantKind_ARKUI_NATIVE_ANIMATE: ArkUI_NativeAPIVariantKind = 3;
pub type ArkUI_NativeAPIVariantKind = ::std::os::raw::c_uint;
extern "C" {
    pub fn OH_ArkUI_QueryModuleInterfaceByName(
        type_: ArkUI_NativeAPIVariantKind,
        structName: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
pub const ArkUI_NodeType_ARKUI_NODE_CUSTOM: ArkUI_NodeType = 0;
pub const ArkUI_NodeType_ARKUI_NODE_TEXT: ArkUI_NodeType = 1;
pub const ArkUI_NodeType_ARKUI_NODE_SPAN: ArkUI_NodeType = 2;
pub const ArkUI_NodeType_ARKUI_NODE_IMAGE_SPAN: ArkUI_NodeType = 3;
pub const ArkUI_NodeType_ARKUI_NODE_IMAGE: ArkUI_NodeType = 4;
pub const ArkUI_NodeType_ARKUI_NODE_TOGGLE: ArkUI_NodeType = 5;
pub const ArkUI_NodeType_ARKUI_NODE_LOADING_PROGRESS: ArkUI_NodeType = 6;
pub const ArkUI_NodeType_ARKUI_NODE_TEXT_INPUT: ArkUI_NodeType = 7;
pub const ArkUI_NodeType_ARKUI_NODE_TEXT_AREA: ArkUI_NodeType = 8;
pub const ArkUI_NodeType_ARKUI_NODE_BUTTON: ArkUI_NodeType = 9;
pub const ArkUI_NodeType_ARKUI_NODE_PROGRESS: ArkUI_NodeType = 10;
pub const ArkUI_NodeType_ARKUI_NODE_CHECKBOX: ArkUI_NodeType = 11;
pub const ArkUI_NodeType_ARKUI_NODE_XCOMPONENT: ArkUI_NodeType = 12;
pub const ArkUI_NodeType_ARKUI_NODE_DATE_PICKER: ArkUI_NodeType = 13;
pub const ArkUI_NodeType_ARKUI_NODE_TIME_PICKER: ArkUI_NodeType = 14;
pub const ArkUI_NodeType_ARKUI_NODE_TEXT_PICKER: ArkUI_NodeType = 15;
pub const ArkUI_NodeType_ARKUI_NODE_CALENDAR_PICKER: ArkUI_NodeType = 16;
pub const ArkUI_NodeType_ARKUI_NODE_SLIDER: ArkUI_NodeType = 17;
pub const ArkUI_NodeType_ARKUI_NODE_RADIO: ArkUI_NodeType = 18;
pub const ArkUI_NodeType_ARKUI_NODE_IMAGE_ANIMATOR: ArkUI_NodeType = 19;
pub const ArkUI_NodeType_ARKUI_NODE_STACK: ArkUI_NodeType = 1000;
pub const ArkUI_NodeType_ARKUI_NODE_SWIPER: ArkUI_NodeType = 1001;
pub const ArkUI_NodeType_ARKUI_NODE_SCROLL: ArkUI_NodeType = 1002;
pub const ArkUI_NodeType_ARKUI_NODE_LIST: ArkUI_NodeType = 1003;
pub const ArkUI_NodeType_ARKUI_NODE_LIST_ITEM: ArkUI_NodeType = 1004;
pub const ArkUI_NodeType_ARKUI_NODE_LIST_ITEM_GROUP: ArkUI_NodeType = 1005;
pub const ArkUI_NodeType_ARKUI_NODE_COLUMN: ArkUI_NodeType = 1006;
pub const ArkUI_NodeType_ARKUI_NODE_ROW: ArkUI_NodeType = 1007;
pub const ArkUI_NodeType_ARKUI_NODE_FLEX: ArkUI_NodeType = 1008;
pub const ArkUI_NodeType_ARKUI_NODE_REFRESH: ArkUI_NodeType = 1009;
pub const ArkUI_NodeType_ARKUI_NODE_WATER_FLOW: ArkUI_NodeType = 1010;
pub const ArkUI_NodeType_ARKUI_NODE_FLOW_ITEM: ArkUI_NodeType = 1011;
pub const ArkUI_NodeType_ARKUI_NODE_RELATIVE_CONTAINER: ArkUI_NodeType = 1012;
pub const ArkUI_NodeType_ARKUI_NODE_GRID: ArkUI_NodeType = 1013;
pub const ArkUI_NodeType_ARKUI_NODE_GRID_ITEM: ArkUI_NodeType = 1014;
pub const ArkUI_NodeType_ARKUI_NODE_CUSTOM_SPAN: ArkUI_NodeType = 1015;
pub type ArkUI_NodeType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AttributeItem {
    pub value: *const ArkUI_NumberValue,
    pub size: i32,
    pub string: *const ::std::os::raw::c_char,
    pub object: *mut ::std::os::raw::c_void,
}
pub const ArkUI_NodeAttributeType_NODE_WIDTH: ArkUI_NodeAttributeType = 0;
pub const ArkUI_NodeAttributeType_NODE_HEIGHT: ArkUI_NodeAttributeType = 1;
pub const ArkUI_NodeAttributeType_NODE_BACKGROUND_COLOR: ArkUI_NodeAttributeType = 2;
pub const ArkUI_NodeAttributeType_NODE_BACKGROUND_IMAGE: ArkUI_NodeAttributeType = 3;
pub const ArkUI_NodeAttributeType_NODE_PADDING: ArkUI_NodeAttributeType = 4;
pub const ArkUI_NodeAttributeType_NODE_ID: ArkUI_NodeAttributeType = 5;
pub const ArkUI_NodeAttributeType_NODE_ENABLED: ArkUI_NodeAttributeType = 6;
pub const ArkUI_NodeAttributeType_NODE_MARGIN: ArkUI_NodeAttributeType = 7;
pub const ArkUI_NodeAttributeType_NODE_TRANSLATE: ArkUI_NodeAttributeType = 8;
pub const ArkUI_NodeAttributeType_NODE_SCALE: ArkUI_NodeAttributeType = 9;
pub const ArkUI_NodeAttributeType_NODE_ROTATE: ArkUI_NodeAttributeType = 10;
pub const ArkUI_NodeAttributeType_NODE_BRIGHTNESS: ArkUI_NodeAttributeType = 11;
pub const ArkUI_NodeAttributeType_NODE_SATURATION: ArkUI_NodeAttributeType = 12;
pub const ArkUI_NodeAttributeType_NODE_BLUR: ArkUI_NodeAttributeType = 13;
pub const ArkUI_NodeAttributeType_NODE_LINEAR_GRADIENT: ArkUI_NodeAttributeType = 14;
pub const ArkUI_NodeAttributeType_NODE_ALIGNMENT: ArkUI_NodeAttributeType = 15;
pub const ArkUI_NodeAttributeType_NODE_OPACITY: ArkUI_NodeAttributeType = 16;
pub const ArkUI_NodeAttributeType_NODE_BORDER_WIDTH: ArkUI_NodeAttributeType = 17;
pub const ArkUI_NodeAttributeType_NODE_BORDER_RADIUS: ArkUI_NodeAttributeType = 18;
pub const ArkUI_NodeAttributeType_NODE_BORDER_COLOR: ArkUI_NodeAttributeType = 19;
pub const ArkUI_NodeAttributeType_NODE_BORDER_STYLE: ArkUI_NodeAttributeType = 20;
pub const ArkUI_NodeAttributeType_NODE_Z_INDEX: ArkUI_NodeAttributeType = 21;
pub const ArkUI_NodeAttributeType_NODE_VISIBILITY: ArkUI_NodeAttributeType = 22;
pub const ArkUI_NodeAttributeType_NODE_CLIP: ArkUI_NodeAttributeType = 23;
pub const ArkUI_NodeAttributeType_NODE_CLIP_SHAPE: ArkUI_NodeAttributeType = 24;
pub const ArkUI_NodeAttributeType_NODE_TRANSFORM: ArkUI_NodeAttributeType = 25;
pub const ArkUI_NodeAttributeType_NODE_HIT_TEST_BEHAVIOR: ArkUI_NodeAttributeType = 26;
pub const ArkUI_NodeAttributeType_NODE_POSITION: ArkUI_NodeAttributeType = 27;
pub const ArkUI_NodeAttributeType_NODE_SHADOW: ArkUI_NodeAttributeType = 28;
pub const ArkUI_NodeAttributeType_NODE_CUSTOM_SHADOW: ArkUI_NodeAttributeType = 29;
pub const ArkUI_NodeAttributeType_NODE_BACKGROUND_IMAGE_SIZE: ArkUI_NodeAttributeType = 30;
pub const ArkUI_NodeAttributeType_NODE_BACKGROUND_IMAGE_SIZE_WITH_STYLE: ArkUI_NodeAttributeType =
    31;
pub const ArkUI_NodeAttributeType_NODE_BACKGROUND_BLUR_STYLE: ArkUI_NodeAttributeType = 32;
pub const ArkUI_NodeAttributeType_NODE_TRANSFORM_CENTER: ArkUI_NodeAttributeType = 33;
pub const ArkUI_NodeAttributeType_NODE_OPACITY_TRANSITION: ArkUI_NodeAttributeType = 34;
pub const ArkUI_NodeAttributeType_NODE_ROTATE_TRANSITION: ArkUI_NodeAttributeType = 35;
pub const ArkUI_NodeAttributeType_NODE_SCALE_TRANSITION: ArkUI_NodeAttributeType = 36;
pub const ArkUI_NodeAttributeType_NODE_TRANSLATE_TRANSITION: ArkUI_NodeAttributeType = 37;
pub const ArkUI_NodeAttributeType_NODE_MOVE_TRANSITION: ArkUI_NodeAttributeType = 38;
pub const ArkUI_NodeAttributeType_NODE_FOCUSABLE: ArkUI_NodeAttributeType = 39;
pub const ArkUI_NodeAttributeType_NODE_DEFAULT_FOCUS: ArkUI_NodeAttributeType = 40;
pub const ArkUI_NodeAttributeType_NODE_RESPONSE_REGION: ArkUI_NodeAttributeType = 41;
pub const ArkUI_NodeAttributeType_NODE_OVERLAY: ArkUI_NodeAttributeType = 42;
pub const ArkUI_NodeAttributeType_NODE_SWEEP_GRADIENT: ArkUI_NodeAttributeType = 43;
pub const ArkUI_NodeAttributeType_NODE_RADIAL_GRADIENT: ArkUI_NodeAttributeType = 44;
pub const ArkUI_NodeAttributeType_NODE_MASK: ArkUI_NodeAttributeType = 45;
pub const ArkUI_NodeAttributeType_NODE_BLEND_MODE: ArkUI_NodeAttributeType = 46;
pub const ArkUI_NodeAttributeType_NODE_DIRECTION: ArkUI_NodeAttributeType = 47;
pub const ArkUI_NodeAttributeType_NODE_CONSTRAINT_SIZE: ArkUI_NodeAttributeType = 48;
pub const ArkUI_NodeAttributeType_NODE_GRAY_SCALE: ArkUI_NodeAttributeType = 49;
pub const ArkUI_NodeAttributeType_NODE_INVERT: ArkUI_NodeAttributeType = 50;
pub const ArkUI_NodeAttributeType_NODE_SEPIA: ArkUI_NodeAttributeType = 51;
pub const ArkUI_NodeAttributeType_NODE_CONTRAST: ArkUI_NodeAttributeType = 52;
pub const ArkUI_NodeAttributeType_NODE_FOREGROUND_COLOR: ArkUI_NodeAttributeType = 53;
pub const ArkUI_NodeAttributeType_NODE_OFFSET: ArkUI_NodeAttributeType = 54;
pub const ArkUI_NodeAttributeType_NODE_MARK_ANCHOR: ArkUI_NodeAttributeType = 55;
pub const ArkUI_NodeAttributeType_NODE_BACKGROUND_IMAGE_POSITION: ArkUI_NodeAttributeType = 56;
pub const ArkUI_NodeAttributeType_NODE_ALIGN_RULES: ArkUI_NodeAttributeType = 57;
pub const ArkUI_NodeAttributeType_NODE_ALIGN_SELF: ArkUI_NodeAttributeType = 58;
pub const ArkUI_NodeAttributeType_NODE_FLEX_GROW: ArkUI_NodeAttributeType = 59;
pub const ArkUI_NodeAttributeType_NODE_FLEX_SHRINK: ArkUI_NodeAttributeType = 60;
pub const ArkUI_NodeAttributeType_NODE_FLEX_BASIS: ArkUI_NodeAttributeType = 61;
pub const ArkUI_NodeAttributeType_NODE_ACCESSIBILITY_GROUP: ArkUI_NodeAttributeType = 62;
pub const ArkUI_NodeAttributeType_NODE_ACCESSIBILITY_TEXT: ArkUI_NodeAttributeType = 63;
pub const ArkUI_NodeAttributeType_NODE_ACCESSIBILITY_MODE: ArkUI_NodeAttributeType = 64;
pub const ArkUI_NodeAttributeType_NODE_ACCESSIBILITY_DESCRIPTION: ArkUI_NodeAttributeType = 65;
pub const ArkUI_NodeAttributeType_NODE_FOCUS_STATUS: ArkUI_NodeAttributeType = 66;
pub const ArkUI_NodeAttributeType_NODE_ASPECT_RATIO: ArkUI_NodeAttributeType = 67;
pub const ArkUI_NodeAttributeType_NODE_LAYOUT_WEIGHT: ArkUI_NodeAttributeType = 68;
pub const ArkUI_NodeAttributeType_NODE_DISPLAY_PRIORITY: ArkUI_NodeAttributeType = 69;
pub const ArkUI_NodeAttributeType_NODE_OUTLINE_WIDTH: ArkUI_NodeAttributeType = 70;
pub const ArkUI_NodeAttributeType_NODE_WIDTH_PERCENT: ArkUI_NodeAttributeType = 71;
pub const ArkUI_NodeAttributeType_NODE_HEIGHT_PERCENT: ArkUI_NodeAttributeType = 72;
pub const ArkUI_NodeAttributeType_NODE_PADDING_PERCENT: ArkUI_NodeAttributeType = 73;
pub const ArkUI_NodeAttributeType_NODE_MARGIN_PERCENT: ArkUI_NodeAttributeType = 74;
pub const ArkUI_NodeAttributeType_NODE_GEOMETRY_TRANSITION: ArkUI_NodeAttributeType = 75;
pub const ArkUI_NodeAttributeType_NODE_RELATIVE_LAYOUT_CHAIN_MODE: ArkUI_NodeAttributeType = 76;
pub const ArkUI_NodeAttributeType_NODE_RENDER_FIT: ArkUI_NodeAttributeType = 77;
pub const ArkUI_NodeAttributeType_NODE_OUTLINE_COLOR: ArkUI_NodeAttributeType = 78;
pub const ArkUI_NodeAttributeType_NODE_SIZE: ArkUI_NodeAttributeType = 79;
pub const ArkUI_NodeAttributeType_NODE_RENDER_GROUP: ArkUI_NodeAttributeType = 80;
pub const ArkUI_NodeAttributeType_NODE_COLOR_BLEND: ArkUI_NodeAttributeType = 81;
pub const ArkUI_NodeAttributeType_NODE_FOREGROUND_BLUR_STYLE: ArkUI_NodeAttributeType = 82;
pub const ArkUI_NodeAttributeType_NODE_LAYOUT_RECT: ArkUI_NodeAttributeType = 83;
pub const ArkUI_NodeAttributeType_NODE_FOCUS_ON_TOUCH: ArkUI_NodeAttributeType = 84;
pub const ArkUI_NodeAttributeType_NODE_BORDER_WIDTH_PERCENT: ArkUI_NodeAttributeType = 85;
pub const ArkUI_NodeAttributeType_NODE_BORDER_RADIUS_PERCENT: ArkUI_NodeAttributeType = 86;
pub const ArkUI_NodeAttributeType_NODE_ACCESSIBILITY_ID: ArkUI_NodeAttributeType = 87;
pub const ArkUI_NodeAttributeType_NODE_ACCESSIBILITY_ACTIONS: ArkUI_NodeAttributeType = 88;
pub const ArkUI_NodeAttributeType_NODE_ACCESSIBILITY_ROLE: ArkUI_NodeAttributeType = 89;
pub const ArkUI_NodeAttributeType_NODE_ACCESSIBILITY_STATE: ArkUI_NodeAttributeType = 90;
pub const ArkUI_NodeAttributeType_NODE_ACCESSIBILITY_VALUE: ArkUI_NodeAttributeType = 91;
pub const ArkUI_NodeAttributeType_NODE_EXPAND_SAFE_AREA: ArkUI_NodeAttributeType = 92;
pub const ArkUI_NodeAttributeType_NODE_VISIBLE_AREA_CHANGE_RATIO: ArkUI_NodeAttributeType = 93;
pub const ArkUI_NodeAttributeType_NODE_TRANSITION: ArkUI_NodeAttributeType = 94;
pub const ArkUI_NodeAttributeType_NODE_UNIQUE_ID: ArkUI_NodeAttributeType = 95;
pub const ArkUI_NodeAttributeType_NODE_FOCUS_BOX: ArkUI_NodeAttributeType = 96;
pub const ArkUI_NodeAttributeType_NODE_CLICK_DISTANCE: ArkUI_NodeAttributeType = 97;
pub const ArkUI_NodeAttributeType_NODE_TEXT_CONTENT: ArkUI_NodeAttributeType = 1000;
pub const ArkUI_NodeAttributeType_NODE_FONT_COLOR: ArkUI_NodeAttributeType = 1001;
pub const ArkUI_NodeAttributeType_NODE_FONT_SIZE: ArkUI_NodeAttributeType = 1002;
pub const ArkUI_NodeAttributeType_NODE_FONT_STYLE: ArkUI_NodeAttributeType = 1003;
pub const ArkUI_NodeAttributeType_NODE_FONT_WEIGHT: ArkUI_NodeAttributeType = 1004;
pub const ArkUI_NodeAttributeType_NODE_TEXT_LINE_HEIGHT: ArkUI_NodeAttributeType = 1005;
pub const ArkUI_NodeAttributeType_NODE_TEXT_DECORATION: ArkUI_NodeAttributeType = 1006;
pub const ArkUI_NodeAttributeType_NODE_TEXT_CASE: ArkUI_NodeAttributeType = 1007;
pub const ArkUI_NodeAttributeType_NODE_TEXT_LETTER_SPACING: ArkUI_NodeAttributeType = 1008;
pub const ArkUI_NodeAttributeType_NODE_TEXT_MAX_LINES: ArkUI_NodeAttributeType = 1009;
pub const ArkUI_NodeAttributeType_NODE_TEXT_ALIGN: ArkUI_NodeAttributeType = 1010;
pub const ArkUI_NodeAttributeType_NODE_TEXT_OVERFLOW: ArkUI_NodeAttributeType = 1011;
pub const ArkUI_NodeAttributeType_NODE_FONT_FAMILY: ArkUI_NodeAttributeType = 1012;
pub const ArkUI_NodeAttributeType_NODE_TEXT_COPY_OPTION: ArkUI_NodeAttributeType = 1013;
pub const ArkUI_NodeAttributeType_NODE_TEXT_BASELINE_OFFSET: ArkUI_NodeAttributeType = 1014;
pub const ArkUI_NodeAttributeType_NODE_TEXT_TEXT_SHADOW: ArkUI_NodeAttributeType = 1015;
pub const ArkUI_NodeAttributeType_NODE_TEXT_MIN_FONT_SIZE: ArkUI_NodeAttributeType = 1016;
pub const ArkUI_NodeAttributeType_NODE_TEXT_MAX_FONT_SIZE: ArkUI_NodeAttributeType = 1017;
pub const ArkUI_NodeAttributeType_NODE_TEXT_FONT: ArkUI_NodeAttributeType = 1018;
pub const ArkUI_NodeAttributeType_NODE_TEXT_HEIGHT_ADAPTIVE_POLICY: ArkUI_NodeAttributeType = 1019;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INDENT: ArkUI_NodeAttributeType = 1020;
pub const ArkUI_NodeAttributeType_NODE_TEXT_WORD_BREAK: ArkUI_NodeAttributeType = 1021;
pub const ArkUI_NodeAttributeType_NODE_TEXT_ELLIPSIS_MODE: ArkUI_NodeAttributeType = 1022;
pub const ArkUI_NodeAttributeType_NODE_TEXT_LINE_SPACING: ArkUI_NodeAttributeType = 1023;
pub const ArkUI_NodeAttributeType_NODE_FONT_FEATURE: ArkUI_NodeAttributeType = 1024;
pub const ArkUI_NodeAttributeType_NODE_TEXT_ENABLE_DATA_DETECTOR: ArkUI_NodeAttributeType = 1025;
pub const ArkUI_NodeAttributeType_NODE_TEXT_ENABLE_DATA_DETECTOR_CONFIG: ArkUI_NodeAttributeType =
    1026;
pub const ArkUI_NodeAttributeType_NODE_TEXT_SELECTED_BACKGROUND_COLOR: ArkUI_NodeAttributeType =
    1027;
pub const ArkUI_NodeAttributeType_NODE_TEXT_CONTENT_WITH_STYLED_STRING: ArkUI_NodeAttributeType =
    1028;
pub const ArkUI_NodeAttributeType_NODE_TEXT_HALF_LEADING: ArkUI_NodeAttributeType = 1029;
pub const ArkUI_NodeAttributeType_NODE_SPAN_CONTENT: ArkUI_NodeAttributeType = 2000;
pub const ArkUI_NodeAttributeType_NODE_SPAN_TEXT_BACKGROUND_STYLE: ArkUI_NodeAttributeType = 2001;
pub const ArkUI_NodeAttributeType_NODE_SPAN_BASELINE_OFFSET: ArkUI_NodeAttributeType = 2002;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_SPAN_SRC: ArkUI_NodeAttributeType = 3000;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_SPAN_VERTICAL_ALIGNMENT: ArkUI_NodeAttributeType =
    3001;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_SPAN_ALT: ArkUI_NodeAttributeType = 3002;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_SRC: ArkUI_NodeAttributeType = 4000;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_OBJECT_FIT: ArkUI_NodeAttributeType = 4001;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_INTERPOLATION: ArkUI_NodeAttributeType = 4002;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_OBJECT_REPEAT: ArkUI_NodeAttributeType = 4003;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_COLOR_FILTER: ArkUI_NodeAttributeType = 4004;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_AUTO_RESIZE: ArkUI_NodeAttributeType = 4005;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_ALT: ArkUI_NodeAttributeType = 4006;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_DRAGGABLE: ArkUI_NodeAttributeType = 4007;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_RENDER_MODE: ArkUI_NodeAttributeType = 4008;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_FIT_ORIGINAL_SIZE: ArkUI_NodeAttributeType = 4009;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_FILL_COLOR: ArkUI_NodeAttributeType = 4010;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_RESIZABLE: ArkUI_NodeAttributeType = 4011;
pub const ArkUI_NodeAttributeType_NODE_TOGGLE_SELECTED_COLOR: ArkUI_NodeAttributeType = 5000;
pub const ArkUI_NodeAttributeType_NODE_TOGGLE_SWITCH_POINT_COLOR: ArkUI_NodeAttributeType = 5001;
pub const ArkUI_NodeAttributeType_NODE_TOGGLE_VALUE: ArkUI_NodeAttributeType = 5002;
pub const ArkUI_NodeAttributeType_NODE_TOGGLE_UNSELECTED_COLOR: ArkUI_NodeAttributeType = 5003;
pub const ArkUI_NodeAttributeType_NODE_LOADING_PROGRESS_COLOR: ArkUI_NodeAttributeType = 6000;
pub const ArkUI_NodeAttributeType_NODE_LOADING_PROGRESS_ENABLE_LOADING: ArkUI_NodeAttributeType =
    6001;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_PLACEHOLDER: ArkUI_NodeAttributeType = 7000;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_TEXT: ArkUI_NodeAttributeType = 7001;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_CARET_COLOR: ArkUI_NodeAttributeType = 7002;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_CARET_STYLE: ArkUI_NodeAttributeType = 7003;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_SHOW_UNDERLINE: ArkUI_NodeAttributeType = 7004;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_MAX_LENGTH: ArkUI_NodeAttributeType = 7005;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_ENTER_KEY_TYPE: ArkUI_NodeAttributeType = 7006;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_PLACEHOLDER_COLOR: ArkUI_NodeAttributeType = 7007;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_PLACEHOLDER_FONT: ArkUI_NodeAttributeType = 7008;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_ENABLE_KEYBOARD_ON_FOCUS:
    ArkUI_NodeAttributeType = 7009;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_TYPE: ArkUI_NodeAttributeType = 7010;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_SELECTED_BACKGROUND_COLOR:
    ArkUI_NodeAttributeType = 7011;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_SHOW_PASSWORD_ICON: ArkUI_NodeAttributeType =
    7012;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_EDITING: ArkUI_NodeAttributeType = 7013;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_CANCEL_BUTTON: ArkUI_NodeAttributeType = 7014;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_TEXT_SELECTION: ArkUI_NodeAttributeType = 7015;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_UNDERLINE_COLOR: ArkUI_NodeAttributeType = 7016;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_ENABLE_AUTO_FILL: ArkUI_NodeAttributeType = 7017;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_CONTENT_TYPE: ArkUI_NodeAttributeType = 7018;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_PASSWORD_RULES: ArkUI_NodeAttributeType = 7019;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_SELECT_ALL: ArkUI_NodeAttributeType = 7020;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_INPUT_FILTER: ArkUI_NodeAttributeType = 7021;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_STYLE: ArkUI_NodeAttributeType = 7022;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_CARET_OFFSET: ArkUI_NodeAttributeType = 7023;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_CONTENT_RECT: ArkUI_NodeAttributeType = 7024;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_CONTENT_LINE_COUNT: ArkUI_NodeAttributeType =
    7025;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_SELECTION_MENU_HIDDEN: ArkUI_NodeAttributeType =
    7026;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_BLUR_ON_SUBMIT: ArkUI_NodeAttributeType = 7027;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_CUSTOM_KEYBOARD: ArkUI_NodeAttributeType = 7028;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_WORD_BREAK: ArkUI_NodeAttributeType = 7029;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_SHOW_KEYBOARD_ON_FOCUS: ArkUI_NodeAttributeType =
    7030;
pub const ArkUI_NodeAttributeType_NODE_TEXT_INPUT_NUMBER_OF_LINES: ArkUI_NodeAttributeType = 7031;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_PLACEHOLDER: ArkUI_NodeAttributeType = 8000;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_TEXT: ArkUI_NodeAttributeType = 8001;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_MAX_LENGTH: ArkUI_NodeAttributeType = 8002;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_PLACEHOLDER_COLOR: ArkUI_NodeAttributeType = 8003;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_PLACEHOLDER_FONT: ArkUI_NodeAttributeType = 8004;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_CARET_COLOR: ArkUI_NodeAttributeType = 8005;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_EDITING: ArkUI_NodeAttributeType = 8006;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_TYPE: ArkUI_NodeAttributeType = 8007;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_SHOW_COUNTER: ArkUI_NodeAttributeType = 8008;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_SELECTION_MENU_HIDDEN: ArkUI_NodeAttributeType =
    8009;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_BLUR_ON_SUBMIT: ArkUI_NodeAttributeType = 8010;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_INPUT_FILTER: ArkUI_NodeAttributeType = 8011;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_SELECTED_BACKGROUND_COLOR:
    ArkUI_NodeAttributeType = 8012;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_ENTER_KEY_TYPE: ArkUI_NodeAttributeType = 8013;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_ENABLE_KEYBOARD_ON_FOCUS: ArkUI_NodeAttributeType =
    8014;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_CARET_OFFSET: ArkUI_NodeAttributeType = 8015;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_CONTENT_RECT: ArkUI_NodeAttributeType = 8016;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_CONTENT_LINE_COUNT: ArkUI_NodeAttributeType = 8017;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_TEXT_SELECTION: ArkUI_NodeAttributeType = 8018;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_ENABLE_AUTO_FILL: ArkUI_NodeAttributeType = 8019;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_CONTENT_TYPE: ArkUI_NodeAttributeType = 8020;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_SHOW_KEYBOARD_ON_FOCUS: ArkUI_NodeAttributeType =
    8021;
pub const ArkUI_NodeAttributeType_NODE_TEXT_AREA_NUMBER_OF_LINES: ArkUI_NodeAttributeType = 8022;
pub const ArkUI_NodeAttributeType_NODE_BUTTON_LABEL: ArkUI_NodeAttributeType = 9000;
pub const ArkUI_NodeAttributeType_NODE_BUTTON_TYPE: ArkUI_NodeAttributeType = 9001;
pub const ArkUI_NodeAttributeType_NODE_PROGRESS_VALUE: ArkUI_NodeAttributeType = 10000;
pub const ArkUI_NodeAttributeType_NODE_PROGRESS_TOTAL: ArkUI_NodeAttributeType = 10001;
pub const ArkUI_NodeAttributeType_NODE_PROGRESS_COLOR: ArkUI_NodeAttributeType = 10002;
pub const ArkUI_NodeAttributeType_NODE_PROGRESS_TYPE: ArkUI_NodeAttributeType = 10003;
pub const ArkUI_NodeAttributeType_NODE_CHECKBOX_SELECT: ArkUI_NodeAttributeType = 11000;
pub const ArkUI_NodeAttributeType_NODE_CHECKBOX_SELECT_COLOR: ArkUI_NodeAttributeType = 11001;
pub const ArkUI_NodeAttributeType_NODE_CHECKBOX_UNSELECT_COLOR: ArkUI_NodeAttributeType = 11002;
pub const ArkUI_NodeAttributeType_NODE_CHECKBOX_MARK: ArkUI_NodeAttributeType = 11003;
pub const ArkUI_NodeAttributeType_NODE_CHECKBOX_SHAPE: ArkUI_NodeAttributeType = 11004;
pub const ArkUI_NodeAttributeType_NODE_XCOMPONENT_ID: ArkUI_NodeAttributeType = 12000;
pub const ArkUI_NodeAttributeType_NODE_XCOMPONENT_TYPE: ArkUI_NodeAttributeType = 12001;
pub const ArkUI_NodeAttributeType_NODE_XCOMPONENT_SURFACE_SIZE: ArkUI_NodeAttributeType = 12002;
pub const ArkUI_NodeAttributeType_NODE_DATE_PICKER_LUNAR: ArkUI_NodeAttributeType = 13000;
pub const ArkUI_NodeAttributeType_NODE_DATE_PICKER_START: ArkUI_NodeAttributeType = 13001;
pub const ArkUI_NodeAttributeType_NODE_DATE_PICKER_END: ArkUI_NodeAttributeType = 13002;
pub const ArkUI_NodeAttributeType_NODE_DATE_PICKER_SELECTED: ArkUI_NodeAttributeType = 13003;
pub const ArkUI_NodeAttributeType_NODE_DATE_PICKER_DISAPPEAR_TEXT_STYLE: ArkUI_NodeAttributeType =
    13004;
pub const ArkUI_NodeAttributeType_NODE_DATE_PICKER_TEXT_STYLE: ArkUI_NodeAttributeType = 13005;
pub const ArkUI_NodeAttributeType_NODE_DATE_PICKER_SELECTED_TEXT_STYLE: ArkUI_NodeAttributeType =
    13006;
pub const ArkUI_NodeAttributeType_NODE_TIME_PICKER_SELECTED: ArkUI_NodeAttributeType = 14000;
pub const ArkUI_NodeAttributeType_NODE_TIME_PICKER_USE_MILITARY_TIME: ArkUI_NodeAttributeType =
    14001;
pub const ArkUI_NodeAttributeType_NODE_TIME_PICKER_DISAPPEAR_TEXT_STYLE: ArkUI_NodeAttributeType =
    14002;
pub const ArkUI_NodeAttributeType_NODE_TIME_PICKER_TEXT_STYLE: ArkUI_NodeAttributeType = 14003;
pub const ArkUI_NodeAttributeType_NODE_TIME_PICKER_SELECTED_TEXT_STYLE: ArkUI_NodeAttributeType =
    14004;
pub const ArkUI_NodeAttributeType_NODE_TEXT_PICKER_OPTION_RANGE: ArkUI_NodeAttributeType = 15000;
pub const ArkUI_NodeAttributeType_NODE_TEXT_PICKER_OPTION_SELECTED: ArkUI_NodeAttributeType = 15001;
pub const ArkUI_NodeAttributeType_NODE_TEXT_PICKER_OPTION_VALUE: ArkUI_NodeAttributeType = 15002;
pub const ArkUI_NodeAttributeType_NODE_TEXT_PICKER_DISAPPEAR_TEXT_STYLE: ArkUI_NodeAttributeType =
    15003;
pub const ArkUI_NodeAttributeType_NODE_TEXT_PICKER_TEXT_STYLE: ArkUI_NodeAttributeType = 15004;
pub const ArkUI_NodeAttributeType_NODE_TEXT_PICKER_SELECTED_TEXT_STYLE: ArkUI_NodeAttributeType =
    15005;
pub const ArkUI_NodeAttributeType_NODE_TEXT_PICKER_SELECTED_INDEX: ArkUI_NodeAttributeType = 15006;
pub const ArkUI_NodeAttributeType_NODE_TEXT_PICKER_CAN_LOOP: ArkUI_NodeAttributeType = 15007;
pub const ArkUI_NodeAttributeType_NODE_TEXT_PICKER_DEFAULT_PICKER_ITEM_HEIGHT:
    ArkUI_NodeAttributeType = 15008;
pub const ArkUI_NodeAttributeType_NODE_CALENDAR_PICKER_HINT_RADIUS: ArkUI_NodeAttributeType = 16000;
pub const ArkUI_NodeAttributeType_NODE_CALENDAR_PICKER_SELECTED_DATE: ArkUI_NodeAttributeType =
    16001;
pub const ArkUI_NodeAttributeType_NODE_CALENDAR_PICKER_EDGE_ALIGNMENT: ArkUI_NodeAttributeType =
    16002;
pub const ArkUI_NodeAttributeType_NODE_CALENDAR_PICKER_TEXT_STYLE: ArkUI_NodeAttributeType = 16003;
pub const ArkUI_NodeAttributeType_NODE_SLIDER_BLOCK_COLOR: ArkUI_NodeAttributeType = 17000;
pub const ArkUI_NodeAttributeType_NODE_SLIDER_TRACK_COLOR: ArkUI_NodeAttributeType = 17001;
pub const ArkUI_NodeAttributeType_NODE_SLIDER_SELECTED_COLOR: ArkUI_NodeAttributeType = 17002;
pub const ArkUI_NodeAttributeType_NODE_SLIDER_SHOW_STEPS: ArkUI_NodeAttributeType = 17003;
pub const ArkUI_NodeAttributeType_NODE_SLIDER_BLOCK_STYLE: ArkUI_NodeAttributeType = 17004;
pub const ArkUI_NodeAttributeType_NODE_SLIDER_VALUE: ArkUI_NodeAttributeType = 17005;
pub const ArkUI_NodeAttributeType_NODE_SLIDER_MIN_VALUE: ArkUI_NodeAttributeType = 17006;
pub const ArkUI_NodeAttributeType_NODE_SLIDER_MAX_VALUE: ArkUI_NodeAttributeType = 17007;
pub const ArkUI_NodeAttributeType_NODE_SLIDER_STEP: ArkUI_NodeAttributeType = 17008;
pub const ArkUI_NodeAttributeType_NODE_SLIDER_DIRECTION: ArkUI_NodeAttributeType = 17009;
pub const ArkUI_NodeAttributeType_NODE_SLIDER_REVERSE: ArkUI_NodeAttributeType = 17010;
pub const ArkUI_NodeAttributeType_NODE_SLIDER_STYLE: ArkUI_NodeAttributeType = 17011;
pub const ArkUI_NodeAttributeType_NODE_SLIDER_TRACK_THICKNESS: ArkUI_NodeAttributeType = 17012;
pub const ArkUI_NodeAttributeType_NODE_RADIO_CHECKED: ArkUI_NodeAttributeType = 18000;
pub const ArkUI_NodeAttributeType_NODE_RADIO_STYLE: ArkUI_NodeAttributeType = 18001;
pub const ArkUI_NodeAttributeType_NODE_RADIO_VALUE: ArkUI_NodeAttributeType = 18002;
pub const ArkUI_NodeAttributeType_NODE_RADIO_GROUP: ArkUI_NodeAttributeType = 18003;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_ANIMATOR_IMAGES: ArkUI_NodeAttributeType = 19000;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_ANIMATOR_STATE: ArkUI_NodeAttributeType = 19001;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_ANIMATOR_DURATION: ArkUI_NodeAttributeType = 19002;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_ANIMATOR_REVERSE: ArkUI_NodeAttributeType = 19003;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_ANIMATOR_FIXED_SIZE: ArkUI_NodeAttributeType = 19004;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_ANIMATOR_FILL_MODE: ArkUI_NodeAttributeType = 19005;
pub const ArkUI_NodeAttributeType_NODE_IMAGE_ANIMATOR_ITERATION: ArkUI_NodeAttributeType = 19006;
pub const ArkUI_NodeAttributeType_NODE_STACK_ALIGN_CONTENT: ArkUI_NodeAttributeType = 1000000;
pub const ArkUI_NodeAttributeType_NODE_SCROLL_BAR_DISPLAY_MODE: ArkUI_NodeAttributeType = 1002000;
pub const ArkUI_NodeAttributeType_NODE_SCROLL_BAR_WIDTH: ArkUI_NodeAttributeType = 1002001;
pub const ArkUI_NodeAttributeType_NODE_SCROLL_BAR_COLOR: ArkUI_NodeAttributeType = 1002002;
pub const ArkUI_NodeAttributeType_NODE_SCROLL_SCROLL_DIRECTION: ArkUI_NodeAttributeType = 1002003;
pub const ArkUI_NodeAttributeType_NODE_SCROLL_EDGE_EFFECT: ArkUI_NodeAttributeType = 1002004;
pub const ArkUI_NodeAttributeType_NODE_SCROLL_ENABLE_SCROLL_INTERACTION: ArkUI_NodeAttributeType =
    1002005;
pub const ArkUI_NodeAttributeType_NODE_SCROLL_FRICTION: ArkUI_NodeAttributeType = 1002006;
pub const ArkUI_NodeAttributeType_NODE_SCROLL_SNAP: ArkUI_NodeAttributeType = 1002007;
pub const ArkUI_NodeAttributeType_NODE_SCROLL_NESTED_SCROLL: ArkUI_NodeAttributeType = 1002008;
pub const ArkUI_NodeAttributeType_NODE_SCROLL_OFFSET: ArkUI_NodeAttributeType = 1002009;
pub const ArkUI_NodeAttributeType_NODE_SCROLL_EDGE: ArkUI_NodeAttributeType = 1002010;
pub const ArkUI_NodeAttributeType_NODE_SCROLL_ENABLE_PAGING: ArkUI_NodeAttributeType = 1002011;
pub const ArkUI_NodeAttributeType_NODE_SCROLL_PAGE: ArkUI_NodeAttributeType = 1002012;
pub const ArkUI_NodeAttributeType_NODE_SCROLL_BY: ArkUI_NodeAttributeType = 1002013;
pub const ArkUI_NodeAttributeType_NODE_LIST_DIRECTION: ArkUI_NodeAttributeType = 1003000;
pub const ArkUI_NodeAttributeType_NODE_LIST_STICKY: ArkUI_NodeAttributeType = 1003001;
pub const ArkUI_NodeAttributeType_NODE_LIST_SPACE: ArkUI_NodeAttributeType = 1003002;
pub const ArkUI_NodeAttributeType_NODE_LIST_NODE_ADAPTER: ArkUI_NodeAttributeType = 1003003;
pub const ArkUI_NodeAttributeType_NODE_LIST_CACHED_COUNT: ArkUI_NodeAttributeType = 1003004;
pub const ArkUI_NodeAttributeType_NODE_LIST_SCROLL_TO_INDEX: ArkUI_NodeAttributeType = 1003005;
pub const ArkUI_NodeAttributeType_NODE_LIST_ALIGN_LIST_ITEM: ArkUI_NodeAttributeType = 1003006;
pub const ArkUI_NodeAttributeType_NODE_LIST_CHILDREN_MAIN_SIZE: ArkUI_NodeAttributeType = 1003007;
pub const ArkUI_NodeAttributeType_NODE_LIST_INITIAL_INDEX: ArkUI_NodeAttributeType = 1003008;
pub const ArkUI_NodeAttributeType_NODE_LIST_DIVIDER: ArkUI_NodeAttributeType = 1003009;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_LOOP: ArkUI_NodeAttributeType = 1001000;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_AUTO_PLAY: ArkUI_NodeAttributeType = 1001001;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_SHOW_INDICATOR: ArkUI_NodeAttributeType = 1001002;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_INTERVAL: ArkUI_NodeAttributeType = 1001003;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_VERTICAL: ArkUI_NodeAttributeType = 1001004;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_DURATION: ArkUI_NodeAttributeType = 1001005;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_CURVE: ArkUI_NodeAttributeType = 1001006;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_ITEM_SPACE: ArkUI_NodeAttributeType = 1001007;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_INDEX: ArkUI_NodeAttributeType = 1001008;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_DISPLAY_COUNT: ArkUI_NodeAttributeType = 1001009;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_DISABLE_SWIPE: ArkUI_NodeAttributeType = 1001010;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_SHOW_DISPLAY_ARROW: ArkUI_NodeAttributeType = 1001011;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_EDGE_EFFECT_MODE: ArkUI_NodeAttributeType = 1001012;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_NODE_ADAPTER: ArkUI_NodeAttributeType = 1001013;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_CACHED_COUNT: ArkUI_NodeAttributeType = 1001014;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_PREV_MARGIN: ArkUI_NodeAttributeType = 1001015;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_NEXT_MARGIN: ArkUI_NodeAttributeType = 1001016;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_INDICATOR: ArkUI_NodeAttributeType = 1001017;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_NESTED_SCROLL: ArkUI_NodeAttributeType = 1001018;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_SWIPE_TO_INDEX: ArkUI_NodeAttributeType = 1001019;
pub const ArkUI_NodeAttributeType_NODE_SWIPER_INDICATOR_INTERACTIVE: ArkUI_NodeAttributeType =
    1001020;
pub const ArkUI_NodeAttributeType_NODE_LIST_ITEM_SWIPE_ACTION: ArkUI_NodeAttributeType = 1004000;
pub const ArkUI_NodeAttributeType_NODE_LIST_ITEM_GROUP_SET_HEADER: ArkUI_NodeAttributeType =
    1005000;
pub const ArkUI_NodeAttributeType_NODE_LIST_ITEM_GROUP_SET_FOOTER: ArkUI_NodeAttributeType =
    1005001;
pub const ArkUI_NodeAttributeType_NODE_LIST_ITEM_GROUP_SET_DIVIDER: ArkUI_NodeAttributeType =
    1005002;
pub const ArkUI_NodeAttributeType_NODE_LIST_ITEM_GROUP_CHILDREN_MAIN_SIZE: ArkUI_NodeAttributeType =
    1005003;
pub const ArkUI_NodeAttributeType_NODE_COLUMN_ALIGN_ITEMS: ArkUI_NodeAttributeType = 1006000;
pub const ArkUI_NodeAttributeType_NODE_COLUMN_JUSTIFY_CONTENT: ArkUI_NodeAttributeType = 1006001;
pub const ArkUI_NodeAttributeType_NODE_ROW_ALIGN_ITEMS: ArkUI_NodeAttributeType = 1007000;
pub const ArkUI_NodeAttributeType_NODE_ROW_JUSTIFY_CONTENT: ArkUI_NodeAttributeType = 1007001;
pub const ArkUI_NodeAttributeType_NODE_FLEX_OPTION: ArkUI_NodeAttributeType = 1008000;
pub const ArkUI_NodeAttributeType_NODE_REFRESH_REFRESHING: ArkUI_NodeAttributeType = 1009000;
pub const ArkUI_NodeAttributeType_NODE_REFRESH_CONTENT: ArkUI_NodeAttributeType = 1009001;
pub const ArkUI_NodeAttributeType_NODE_REFRESH_PULL_DOWN_RATIO: ArkUI_NodeAttributeType = 1009002;
pub const ArkUI_NodeAttributeType_NODE_REFRESH_OFFSET: ArkUI_NodeAttributeType = 1009003;
pub const ArkUI_NodeAttributeType_NODE_REFRESH_PULL_TO_REFRESH: ArkUI_NodeAttributeType = 1009004;
pub const ArkUI_NodeAttributeType_NODE_WATER_FLOW_LAYOUT_DIRECTION: ArkUI_NodeAttributeType =
    1010000;
pub const ArkUI_NodeAttributeType_NODE_WATER_FLOW_COLUMN_TEMPLATE: ArkUI_NodeAttributeType =
    1010001;
pub const ArkUI_NodeAttributeType_NODE_WATER_FLOW_ROW_TEMPLATE: ArkUI_NodeAttributeType = 1010002;
pub const ArkUI_NodeAttributeType_NODE_WATER_FLOW_COLUMN_GAP: ArkUI_NodeAttributeType = 1010003;
pub const ArkUI_NodeAttributeType_NODE_WATER_FLOW_ROW_GAP: ArkUI_NodeAttributeType = 1010004;
pub const ArkUI_NodeAttributeType_NODE_WATER_FLOW_SECTION_OPTION: ArkUI_NodeAttributeType = 1010005;
pub const ArkUI_NodeAttributeType_NODE_WATER_FLOW_NODE_ADAPTER: ArkUI_NodeAttributeType = 1010006;
pub const ArkUI_NodeAttributeType_NODE_WATER_FLOW_CACHED_COUNT: ArkUI_NodeAttributeType = 1010007;
pub const ArkUI_NodeAttributeType_NODE_WATER_FLOW_FOOTER: ArkUI_NodeAttributeType = 1010008;
pub const ArkUI_NodeAttributeType_NODE_WATER_FLOW_SCROLL_TO_INDEX: ArkUI_NodeAttributeType =
    1010009;
pub const ArkUI_NodeAttributeType_NODE_WATER_FLOW_ITEM_CONSTRAINT_SIZE: ArkUI_NodeAttributeType =
    1010010;
pub const ArkUI_NodeAttributeType_NODE_RELATIVE_CONTAINER_GUIDE_LINE: ArkUI_NodeAttributeType =
    1012000;
pub const ArkUI_NodeAttributeType_NODE_RELATIVE_CONTAINER_BARRIER: ArkUI_NodeAttributeType =
    1012001;
pub const ArkUI_NodeAttributeType_NODE_GRID_COLUMN_TEMPLATE: ArkUI_NodeAttributeType = 1013000;
pub const ArkUI_NodeAttributeType_NODE_GRID_ROW_TEMPLATE: ArkUI_NodeAttributeType = 1013001;
pub const ArkUI_NodeAttributeType_NODE_GRID_COLUMN_GAP: ArkUI_NodeAttributeType = 1013002;
pub const ArkUI_NodeAttributeType_NODE_GRID_ROW_GAP: ArkUI_NodeAttributeType = 1013003;
pub const ArkUI_NodeAttributeType_NODE_GRID_NODE_ADAPTER: ArkUI_NodeAttributeType = 1013004;
pub const ArkUI_NodeAttributeType_NODE_GRID_CACHED_COUNT: ArkUI_NodeAttributeType = 1013005;
pub type ArkUI_NodeAttributeType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ArkUI_NodeComponentEvent {
    pub data: [ArkUI_NumberValue; 12usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_StringAsyncEvent {
    pub pStr: *const ::std::os::raw::c_char,
}
pub const ArkUI_NodeEventType_NODE_TOUCH_EVENT: ArkUI_NodeEventType = 0;
pub const ArkUI_NodeEventType_NODE_EVENT_ON_APPEAR: ArkUI_NodeEventType = 1;
pub const ArkUI_NodeEventType_NODE_EVENT_ON_DISAPPEAR: ArkUI_NodeEventType = 2;
pub const ArkUI_NodeEventType_NODE_EVENT_ON_AREA_CHANGE: ArkUI_NodeEventType = 3;
pub const ArkUI_NodeEventType_NODE_ON_FOCUS: ArkUI_NodeEventType = 4;
pub const ArkUI_NodeEventType_NODE_ON_BLUR: ArkUI_NodeEventType = 5;
pub const ArkUI_NodeEventType_NODE_ON_CLICK: ArkUI_NodeEventType = 6;
pub const ArkUI_NodeEventType_NODE_ON_TOUCH_INTERCEPT: ArkUI_NodeEventType = 7;
pub const ArkUI_NodeEventType_NODE_EVENT_ON_VISIBLE_AREA_CHANGE: ArkUI_NodeEventType = 8;
pub const ArkUI_NodeEventType_NODE_ON_HOVER: ArkUI_NodeEventType = 9;
pub const ArkUI_NodeEventType_NODE_ON_MOUSE: ArkUI_NodeEventType = 10;
pub const ArkUI_NodeEventType_NODE_EVENT_ON_ATTACH: ArkUI_NodeEventType = 11;
pub const ArkUI_NodeEventType_NODE_EVENT_ON_DETACH: ArkUI_NodeEventType = 12;
pub const ArkUI_NodeEventType_NODE_ON_ACCESSIBILITY_ACTIONS: ArkUI_NodeEventType = 13;
pub const ArkUI_NodeEventType_NODE_ON_PRE_DRAG: ArkUI_NodeEventType = 14;
pub const ArkUI_NodeEventType_NODE_ON_DRAG_START: ArkUI_NodeEventType = 15;
pub const ArkUI_NodeEventType_NODE_ON_DRAG_ENTER: ArkUI_NodeEventType = 16;
pub const ArkUI_NodeEventType_NODE_ON_DRAG_MOVE: ArkUI_NodeEventType = 17;
pub const ArkUI_NodeEventType_NODE_ON_DRAG_LEAVE: ArkUI_NodeEventType = 18;
pub const ArkUI_NodeEventType_NODE_ON_DROP: ArkUI_NodeEventType = 19;
pub const ArkUI_NodeEventType_NODE_ON_DRAG_END: ArkUI_NodeEventType = 20;
pub const ArkUI_NodeEventType_NODE_TEXT_ON_DETECT_RESULT_UPDATE: ArkUI_NodeEventType = 1000;
pub const ArkUI_NodeEventType_NODE_IMAGE_ON_COMPLETE: ArkUI_NodeEventType = 4000;
pub const ArkUI_NodeEventType_NODE_IMAGE_ON_ERROR: ArkUI_NodeEventType = 4001;
pub const ArkUI_NodeEventType_NODE_IMAGE_ON_SVG_PLAY_FINISH: ArkUI_NodeEventType = 4002;
pub const ArkUI_NodeEventType_NODE_IMAGE_ON_DOWNLOAD_PROGRESS: ArkUI_NodeEventType = 4003;
pub const ArkUI_NodeEventType_NODE_TOGGLE_ON_CHANGE: ArkUI_NodeEventType = 5000;
pub const ArkUI_NodeEventType_NODE_TEXT_INPUT_ON_CHANGE: ArkUI_NodeEventType = 7000;
pub const ArkUI_NodeEventType_NODE_TEXT_INPUT_ON_SUBMIT: ArkUI_NodeEventType = 7001;
pub const ArkUI_NodeEventType_NODE_TEXT_INPUT_ON_CUT: ArkUI_NodeEventType = 7002;
pub const ArkUI_NodeEventType_NODE_TEXT_INPUT_ON_PASTE: ArkUI_NodeEventType = 7003;
pub const ArkUI_NodeEventType_NODE_TEXT_INPUT_ON_TEXT_SELECTION_CHANGE: ArkUI_NodeEventType = 7004;
pub const ArkUI_NodeEventType_NODE_TEXT_INPUT_ON_EDIT_CHANGE: ArkUI_NodeEventType = 7005;
pub const ArkUI_NodeEventType_NODE_TEXT_INPUT_ON_CONTENT_SIZE_CHANGE: ArkUI_NodeEventType = 7006;
pub const ArkUI_NodeEventType_NODE_TEXT_INPUT_ON_INPUT_FILTER_ERROR: ArkUI_NodeEventType = 7007;
pub const ArkUI_NodeEventType_NODE_TEXT_INPUT_ON_CONTENT_SCROLL: ArkUI_NodeEventType = 7008;
pub const ArkUI_NodeEventType_NODE_TEXT_INPUT_ON_WILL_INSERT: ArkUI_NodeEventType = 7009;
pub const ArkUI_NodeEventType_NODE_TEXT_INPUT_ON_DID_INSERT: ArkUI_NodeEventType = 7010;
pub const ArkUI_NodeEventType_NODE_TEXT_INPUT_ON_WILL_DELETE: ArkUI_NodeEventType = 7011;
pub const ArkUI_NodeEventType_NODE_TEXT_INPUT_ON_DID_DELETE: ArkUI_NodeEventType = 7012;
pub const ArkUI_NodeEventType_NODE_TEXT_AREA_ON_CHANGE: ArkUI_NodeEventType = 8000;
pub const ArkUI_NodeEventType_NODE_TEXT_AREA_ON_PASTE: ArkUI_NodeEventType = 8001;
pub const ArkUI_NodeEventType_NODE_TEXT_AREA_ON_TEXT_SELECTION_CHANGE: ArkUI_NodeEventType = 8002;
pub const ArkUI_NodeEventType_NODE_TEXT_AREA_ON_INPUT_FILTER_ERROR: ArkUI_NodeEventType = 8003;
pub const ArkUI_NodeEventType_NODE_TEXT_AREA_ON_CONTENT_SCROLL: ArkUI_NodeEventType = 8004;
pub const ArkUI_NodeEventType_NODE_TEXT_AREA_ON_EDIT_CHANGE: ArkUI_NodeEventType = 8005;
pub const ArkUI_NodeEventType_NODE_TEXT_AREA_ON_SUBMIT: ArkUI_NodeEventType = 8006;
pub const ArkUI_NodeEventType_NODE_TEXT_AREA_ON_CONTENT_SIZE_CHANGE: ArkUI_NodeEventType = 8007;
pub const ArkUI_NodeEventType_NODE_TEXT_AREA_ON_WILL_INSERT: ArkUI_NodeEventType = 8008;
pub const ArkUI_NodeEventType_NODE_TEXT_AREA_ON_DID_INSERT: ArkUI_NodeEventType = 8009;
pub const ArkUI_NodeEventType_NODE_TEXT_AREA_ON_WILL_DELETE: ArkUI_NodeEventType = 8010;
pub const ArkUI_NodeEventType_NODE_TEXT_AREA_ON_DID_DELETE: ArkUI_NodeEventType = 8011;
pub const ArkUI_NodeEventType_NODE_CHECKBOX_EVENT_ON_CHANGE: ArkUI_NodeEventType = 11000;
pub const ArkUI_NodeEventType_NODE_DATE_PICKER_EVENT_ON_DATE_CHANGE: ArkUI_NodeEventType = 13000;
pub const ArkUI_NodeEventType_NODE_TIME_PICKER_EVENT_ON_CHANGE: ArkUI_NodeEventType = 14000;
pub const ArkUI_NodeEventType_NODE_TEXT_PICKER_EVENT_ON_CHANGE: ArkUI_NodeEventType = 15000;
pub const ArkUI_NodeEventType_NODE_CALENDAR_PICKER_EVENT_ON_CHANGE: ArkUI_NodeEventType = 16000;
pub const ArkUI_NodeEventType_NODE_SLIDER_EVENT_ON_CHANGE: ArkUI_NodeEventType = 17000;
pub const ArkUI_NodeEventType_NODE_RADIO_EVENT_ON_CHANGE: ArkUI_NodeEventType = 18000;
pub const ArkUI_NodeEventType_NODE_IMAGE_ANIMATOR_EVENT_ON_START: ArkUI_NodeEventType = 19000;
pub const ArkUI_NodeEventType_NODE_IMAGE_ANIMATOR_EVENT_ON_PAUSE: ArkUI_NodeEventType = 19001;
pub const ArkUI_NodeEventType_NODE_IMAGE_ANIMATOR_EVENT_ON_REPEAT: ArkUI_NodeEventType = 19002;
pub const ArkUI_NodeEventType_NODE_IMAGE_ANIMATOR_EVENT_ON_CANCEL: ArkUI_NodeEventType = 19003;
pub const ArkUI_NodeEventType_NODE_IMAGE_ANIMATOR_EVENT_ON_FINISH: ArkUI_NodeEventType = 19004;
pub const ArkUI_NodeEventType_NODE_SWIPER_EVENT_ON_CHANGE: ArkUI_NodeEventType = 1001000;
pub const ArkUI_NodeEventType_NODE_SWIPER_EVENT_ON_ANIMATION_START: ArkUI_NodeEventType = 1001001;
pub const ArkUI_NodeEventType_NODE_SWIPER_EVENT_ON_ANIMATION_END: ArkUI_NodeEventType = 1001002;
pub const ArkUI_NodeEventType_NODE_SWIPER_EVENT_ON_GESTURE_SWIPE: ArkUI_NodeEventType = 1001003;
pub const ArkUI_NodeEventType_NODE_SWIPER_EVENT_ON_CONTENT_DID_SCROLL: ArkUI_NodeEventType =
    1001004;
pub const ArkUI_NodeEventType_NODE_SCROLL_EVENT_ON_SCROLL: ArkUI_NodeEventType = 1002000;
pub const ArkUI_NodeEventType_NODE_SCROLL_EVENT_ON_SCROLL_FRAME_BEGIN: ArkUI_NodeEventType =
    1002001;
pub const ArkUI_NodeEventType_NODE_SCROLL_EVENT_ON_WILL_SCROLL: ArkUI_NodeEventType = 1002002;
pub const ArkUI_NodeEventType_NODE_SCROLL_EVENT_ON_DID_SCROLL: ArkUI_NodeEventType = 1002003;
pub const ArkUI_NodeEventType_NODE_SCROLL_EVENT_ON_SCROLL_START: ArkUI_NodeEventType = 1002004;
pub const ArkUI_NodeEventType_NODE_SCROLL_EVENT_ON_SCROLL_STOP: ArkUI_NodeEventType = 1002005;
pub const ArkUI_NodeEventType_NODE_SCROLL_EVENT_ON_SCROLL_EDGE: ArkUI_NodeEventType = 1002006;
pub const ArkUI_NodeEventType_NODE_SCROLL_EVENT_ON_REACH_START: ArkUI_NodeEventType = 1002007;
pub const ArkUI_NodeEventType_NODE_SCROLL_EVENT_ON_REACH_END: ArkUI_NodeEventType = 1002008;
pub const ArkUI_NodeEventType_NODE_LIST_ON_SCROLL_INDEX: ArkUI_NodeEventType = 1003000;
pub const ArkUI_NodeEventType_NODE_LIST_ON_WILL_SCROLL: ArkUI_NodeEventType = 1003001;
pub const ArkUI_NodeEventType_NODE_LIST_ON_DID_SCROLL: ArkUI_NodeEventType = 1003002;
pub const ArkUI_NodeEventType_NODE_REFRESH_STATE_CHANGE: ArkUI_NodeEventType = 1009000;
pub const ArkUI_NodeEventType_NODE_REFRESH_ON_REFRESH: ArkUI_NodeEventType = 1009001;
pub const ArkUI_NodeEventType_NODE_REFRESH_ON_OFFSET_CHANGE: ArkUI_NodeEventType = 1009002;
pub const ArkUI_NodeEventType_NODE_ON_WILL_SCROLL: ArkUI_NodeEventType = 1010000;
pub const ArkUI_NodeEventType_NODE_WATER_FLOW_ON_DID_SCROLL: ArkUI_NodeEventType = 1010001;
pub const ArkUI_NodeEventType_NODE_WATER_FLOW_ON_SCROLL_INDEX: ArkUI_NodeEventType = 1010002;
pub type ArkUI_NodeEventType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_NodeEvent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn OH_ArkUI_NodeEvent_GetEventType(event: *mut ArkUI_NodeEvent) -> ArkUI_NodeEventType;
}
extern "C" {
    pub fn OH_ArkUI_NodeEvent_GetTargetId(event: *mut ArkUI_NodeEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeEvent_GetNodeHandle(event: *mut ArkUI_NodeEvent) -> ArkUI_NodeHandle;
}
extern "C" {
    pub fn OH_ArkUI_NodeEvent_GetInputEvent(event: *mut ArkUI_NodeEvent)
        -> *mut ArkUI_UIInputEvent;
}
extern "C" {
    pub fn OH_ArkUI_NodeEvent_GetNodeComponentEvent(
        event: *mut ArkUI_NodeEvent,
    ) -> *mut ArkUI_NodeComponentEvent;
}
extern "C" {
    pub fn OH_ArkUI_NodeEvent_GetStringAsyncEvent(
        event: *mut ArkUI_NodeEvent,
    ) -> *mut ArkUI_StringAsyncEvent;
}
extern "C" {
    pub fn OH_ArkUI_NodeEvent_GetUserData(
        event: *mut ArkUI_NodeEvent,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OH_ArkUI_NodeEvent_GetNumberValue(
        event: *mut ArkUI_NodeEvent,
        index: i32,
        value: *mut ArkUI_NumberValue,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeEvent_GetStringValue(
        event: *mut ArkUI_NodeEvent,
        index: i32,
        string: *mut *mut ::std::os::raw::c_char,
        stringSize: *mut i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeEvent_SetReturnNumberValue(
        event: *mut ArkUI_NodeEvent,
        value: *mut ArkUI_NumberValue,
        size: i32,
    ) -> i32;
}
pub const ArkUI_NodeDirtyFlag_NODE_NEED_MEASURE: ArkUI_NodeDirtyFlag = 1;
pub const ArkUI_NodeDirtyFlag_NODE_NEED_LAYOUT: ArkUI_NodeDirtyFlag = 2;
pub const ArkUI_NodeDirtyFlag_NODE_NEED_RENDER: ArkUI_NodeDirtyFlag = 3;
pub type ArkUI_NodeDirtyFlag = ::std::os::raw::c_uint;
pub const ArkUI_NodeCustomEventType_ARKUI_NODE_CUSTOM_EVENT_ON_MEASURE: ArkUI_NodeCustomEventType =
    1;
pub const ArkUI_NodeCustomEventType_ARKUI_NODE_CUSTOM_EVENT_ON_LAYOUT: ArkUI_NodeCustomEventType =
    2;
pub const ArkUI_NodeCustomEventType_ARKUI_NODE_CUSTOM_EVENT_ON_DRAW: ArkUI_NodeCustomEventType = 4;
pub const ArkUI_NodeCustomEventType_ARKUI_NODE_CUSTOM_EVENT_ON_FOREGROUND_DRAW:
    ArkUI_NodeCustomEventType = 8;
pub const ArkUI_NodeCustomEventType_ARKUI_NODE_CUSTOM_EVENT_ON_OVERLAY_DRAW:
    ArkUI_NodeCustomEventType = 16;
pub type ArkUI_NodeCustomEventType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_NodeCustomEvent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_NodeAdapter {
    _unused: [u8; 0],
}
pub type ArkUI_NodeAdapterHandle = *mut ArkUI_NodeAdapter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_NodeAdapterEvent {
    _unused: [u8; 0],
}
pub const ArkUI_NodeAdapterEventType_NODE_ADAPTER_EVENT_WILL_ATTACH_TO_NODE:
    ArkUI_NodeAdapterEventType = 1;
pub const ArkUI_NodeAdapterEventType_NODE_ADAPTER_EVENT_WILL_DETACH_FROM_NODE:
    ArkUI_NodeAdapterEventType = 2;
pub const ArkUI_NodeAdapterEventType_NODE_ADAPTER_EVENT_ON_GET_NODE_ID: ArkUI_NodeAdapterEventType =
    3;
pub const ArkUI_NodeAdapterEventType_NODE_ADAPTER_EVENT_ON_ADD_NODE_TO_ADAPTER:
    ArkUI_NodeAdapterEventType = 4;
pub const ArkUI_NodeAdapterEventType_NODE_ADAPTER_EVENT_ON_REMOVE_NODE_FROM_ADAPTER:
    ArkUI_NodeAdapterEventType = 5;
pub type ArkUI_NodeAdapterEventType = ::std::os::raw::c_uint;
extern "C" {
    pub fn OH_ArkUI_NodeAdapter_Create() -> ArkUI_NodeAdapterHandle;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapter_Dispose(handle: ArkUI_NodeAdapterHandle);
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapter_SetTotalNodeCount(
        handle: ArkUI_NodeAdapterHandle,
        size: u32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapter_GetTotalNodeCount(handle: ArkUI_NodeAdapterHandle) -> u32;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapter_RegisterEventReceiver(
        handle: ArkUI_NodeAdapterHandle,
        userData: *mut ::std::os::raw::c_void,
        receiver: ::std::option::Option<unsafe extern "C" fn(event: *mut ArkUI_NodeAdapterEvent)>,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapter_UnregisterEventReceiver(handle: ArkUI_NodeAdapterHandle);
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapter_ReloadAllItems(handle: ArkUI_NodeAdapterHandle) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapter_ReloadItem(
        handle: ArkUI_NodeAdapterHandle,
        startPosition: u32,
        itemCount: u32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapter_RemoveItem(
        handle: ArkUI_NodeAdapterHandle,
        startPosition: u32,
        itemCount: u32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapter_InsertItem(
        handle: ArkUI_NodeAdapterHandle,
        startPosition: u32,
        itemCount: u32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapter_MoveItem(
        handle: ArkUI_NodeAdapterHandle,
        from: u32,
        to: u32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapter_GetAllItems(
        handle: ArkUI_NodeAdapterHandle,
        items: *mut *mut ArkUI_NodeHandle,
        size: *mut u32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapterEvent_GetUserData(
        event: *mut ArkUI_NodeAdapterEvent,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapterEvent_GetType(
        event: *mut ArkUI_NodeAdapterEvent,
    ) -> ArkUI_NodeAdapterEventType;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapterEvent_GetRemovedNode(
        event: *mut ArkUI_NodeAdapterEvent,
    ) -> ArkUI_NodeHandle;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapterEvent_GetItemIndex(event: *mut ArkUI_NodeAdapterEvent) -> u32;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapterEvent_GetHostNode(
        event: *mut ArkUI_NodeAdapterEvent,
    ) -> ArkUI_NodeHandle;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapterEvent_SetItem(
        event: *mut ArkUI_NodeAdapterEvent,
        node: ArkUI_NodeHandle,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeAdapterEvent_SetNodeId(event: *mut ArkUI_NodeAdapterEvent, id: i32) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_NativeNodeAPI_1 {
    pub version: i32,
    pub createNode:
        ::std::option::Option<unsafe extern "C" fn(type_: ArkUI_NodeType) -> ArkUI_NodeHandle>,
    pub disposeNode: ::std::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle)>,
    pub addChild: ::std::option::Option<
        unsafe extern "C" fn(parent: ArkUI_NodeHandle, child: ArkUI_NodeHandle) -> i32,
    >,
    pub removeChild: ::std::option::Option<
        unsafe extern "C" fn(parent: ArkUI_NodeHandle, child: ArkUI_NodeHandle) -> i32,
    >,
    pub insertChildAfter: ::std::option::Option<
        unsafe extern "C" fn(
            parent: ArkUI_NodeHandle,
            child: ArkUI_NodeHandle,
            sibling: ArkUI_NodeHandle,
        ) -> i32,
    >,
    pub insertChildBefore: ::std::option::Option<
        unsafe extern "C" fn(
            parent: ArkUI_NodeHandle,
            child: ArkUI_NodeHandle,
            sibling: ArkUI_NodeHandle,
        ) -> i32,
    >,
    pub insertChildAt: ::std::option::Option<
        unsafe extern "C" fn(
            parent: ArkUI_NodeHandle,
            child: ArkUI_NodeHandle,
            position: i32,
        ) -> i32,
    >,
    pub setAttribute: ::std::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            attribute: ArkUI_NodeAttributeType,
            item: *const ArkUI_AttributeItem,
        ) -> i32,
    >,
    pub getAttribute: ::std::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            attribute: ArkUI_NodeAttributeType,
        ) -> *const ArkUI_AttributeItem,
    >,
    pub resetAttribute: ::std::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, attribute: ArkUI_NodeAttributeType) -> i32,
    >,
    pub registerNodeEvent: ::std::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            eventType: ArkUI_NodeEventType,
            targetId: i32,
            userData: *mut ::std::os::raw::c_void,
        ) -> i32,
    >,
    pub unregisterNodeEvent: ::std::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, eventType: ArkUI_NodeEventType),
    >,
    pub registerNodeEventReceiver: ::std::option::Option<
        unsafe extern "C" fn(
            eventReceiver: ::std::option::Option<unsafe extern "C" fn(event: *mut ArkUI_NodeEvent)>,
        ),
    >,
    pub unregisterNodeEventReceiver: ::std::option::Option<unsafe extern "C" fn()>,
    pub markDirty: ::std::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, dirtyFlag: ArkUI_NodeDirtyFlag),
    >,
    pub getTotalChildCount:
        ::std::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> u32>,
    pub getChildAt: ::std::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, position: i32) -> ArkUI_NodeHandle,
    >,
    pub getFirstChild:
        ::std::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> ArkUI_NodeHandle>,
    pub getLastChild:
        ::std::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> ArkUI_NodeHandle>,
    pub getPreviousSibling:
        ::std::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> ArkUI_NodeHandle>,
    pub getNextSibling:
        ::std::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> ArkUI_NodeHandle>,
    pub registerNodeCustomEvent: ::std::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            eventType: ArkUI_NodeCustomEventType,
            targetId: i32,
            userData: *mut ::std::os::raw::c_void,
        ) -> i32,
    >,
    pub unregisterNodeCustomEvent: ::std::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, eventType: ArkUI_NodeCustomEventType),
    >,
    pub registerNodeCustomEventReceiver: ::std::option::Option<
        unsafe extern "C" fn(
            eventReceiver: ::std::option::Option<
                unsafe extern "C" fn(event: *mut ArkUI_NodeCustomEvent),
            >,
        ),
    >,
    pub unregisterNodeCustomEventReceiver: ::std::option::Option<unsafe extern "C" fn()>,
    pub setMeasuredSize: ::std::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, width: i32, height: i32) -> i32,
    >,
    pub setLayoutPosition: ::std::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, positionX: i32, positionY: i32) -> i32,
    >,
    pub getMeasuredSize:
        ::std::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> ArkUI_IntSize>,
    pub getLayoutPosition:
        ::std::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> ArkUI_IntOffset>,
    pub measureNode: ::std::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            Constraint: *mut ArkUI_LayoutConstraint,
        ) -> i32,
    >,
    pub layoutNode: ::std::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, positionX: i32, positionY: i32) -> i32,
    >,
    pub addNodeEventReceiver: ::std::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            eventReceiver: ::std::option::Option<unsafe extern "C" fn(event: *mut ArkUI_NodeEvent)>,
        ) -> i32,
    >,
    pub removeNodeEventReceiver: ::std::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            eventReceiver: ::std::option::Option<unsafe extern "C" fn(event: *mut ArkUI_NodeEvent)>,
        ) -> i32,
    >,
    pub addNodeCustomEventReceiver: ::std::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            eventReceiver: ::std::option::Option<
                unsafe extern "C" fn(event: *mut ArkUI_NodeCustomEvent),
            >,
        ) -> i32,
    >,
    pub removeNodeCustomEventReceiver: ::std::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            eventReceiver: ::std::option::Option<
                unsafe extern "C" fn(event: *mut ArkUI_NodeCustomEvent),
            >,
        ) -> i32,
    >,
    pub setUserData: ::std::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, userData: *mut ::std::os::raw::c_void) -> i32,
    >,
    pub getUserData: ::std::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle) -> *mut ::std::os::raw::c_void,
    >,
    pub setLengthMetricUnit: ::std::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, unit: ArkUI_LengthMetricUnit) -> i32,
    >,
    pub getParent:
        ::std::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> ArkUI_NodeHandle>,
    pub removeAllChildren:
        ::std::option::Option<unsafe extern "C" fn(parent: ArkUI_NodeHandle) -> i32>,
}
extern "C" {
    pub fn OH_ArkUI_NodeCustomEvent_GetLayoutConstraintInMeasure(
        event: *mut ArkUI_NodeCustomEvent,
    ) -> *mut ArkUI_LayoutConstraint;
}
extern "C" {
    pub fn OH_ArkUI_NodeCustomEvent_GetPositionInLayout(
        event: *mut ArkUI_NodeCustomEvent,
    ) -> ArkUI_IntOffset;
}
extern "C" {
    pub fn OH_ArkUI_NodeCustomEvent_GetDrawContextInDraw(
        event: *mut ArkUI_NodeCustomEvent,
    ) -> *mut ArkUI_DrawContext;
}
extern "C" {
    pub fn OH_ArkUI_NodeCustomEvent_GetEventTargetId(event: *mut ArkUI_NodeCustomEvent) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeCustomEvent_GetUserData(
        event: *mut ArkUI_NodeCustomEvent,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OH_ArkUI_NodeCustomEvent_GetNodeHandle(
        event: *mut ArkUI_NodeCustomEvent,
    ) -> ArkUI_NodeHandle;
}
extern "C" {
    pub fn OH_ArkUI_NodeCustomEvent_GetEventType(
        event: *mut ArkUI_NodeCustomEvent,
    ) -> ArkUI_NodeCustomEventType;
}
extern "C" {
    pub fn OH_ArkUI_NodeCustomEvent_GetCustomSpanMeasureInfo(
        event: *mut ArkUI_NodeCustomEvent,
        info: *mut ArkUI_CustomSpanMeasureInfo,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeCustomEvent_SetCustomSpanMetrics(
        event: *mut ArkUI_NodeCustomEvent,
        metrics: *mut ArkUI_CustomSpanMetrics,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeCustomEvent_GetCustomSpanDrawInfo(
        event: *mut ArkUI_NodeCustomEvent,
        info: *mut ArkUI_CustomSpanDrawInfo,
    ) -> i32;
}
pub const ArkUI_NodeContentEventType_NODE_CONTENT_EVENT_ON_ATTACH_TO_WINDOW:
    ArkUI_NodeContentEventType = 0;
pub const ArkUI_NodeContentEventType_NODE_CONTENT_EVENT_ON_DETACH_FROM_WINDOW:
    ArkUI_NodeContentEventType = 1;
pub type ArkUI_NodeContentEventType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_NodeContentEvent {
    _unused: [u8; 0],
}
pub type ArkUI_NodeContentCallback =
    ::std::option::Option<unsafe extern "C" fn(event: *mut ArkUI_NodeContentEvent)>;
extern "C" {
    pub fn OH_ArkUI_NodeContent_RegisterCallback(
        content: ArkUI_NodeContentHandle,
        callback: ArkUI_NodeContentCallback,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeContentEvent_GetEventType(
        event: *mut ArkUI_NodeContentEvent,
    ) -> ArkUI_NodeContentEventType;
}
extern "C" {
    pub fn OH_ArkUI_NodeContentEvent_GetNodeContentHandle(
        event: *mut ArkUI_NodeContentEvent,
    ) -> ArkUI_NodeContentHandle;
}
extern "C" {
    pub fn OH_ArkUI_NodeContent_SetUserData(
        content: ArkUI_NodeContentHandle,
        userData: *mut ::std::os::raw::c_void,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeContent_GetUserData(
        content: ArkUI_NodeContentHandle,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn OH_ArkUI_NodeContent_AddNode(
        content: ArkUI_NodeContentHandle,
        node: ArkUI_NodeHandle,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeContent_RemoveNode(
        content: ArkUI_NodeContentHandle,
        node: ArkUI_NodeHandle,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeContent_InsertNode(
        content: ArkUI_NodeContentHandle,
        node: ArkUI_NodeHandle,
        position: i32,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeUtils_GetLayoutSize(
        node: ArkUI_NodeHandle,
        size: *mut ArkUI_IntSize,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeUtils_GetLayoutPosition(
        node: ArkUI_NodeHandle,
        localOffset: *mut ArkUI_IntOffset,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeUtils_GetLayoutPositionInWindow(
        node: ArkUI_NodeHandle,
        globalOffset: *mut ArkUI_IntOffset,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeUtils_GetLayoutPositionInScreen(
        node: ArkUI_NodeHandle,
        screenOffset: *mut ArkUI_IntOffset,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeUtils_GetPositionWithTranslateInWindow(
        node: ArkUI_NodeHandle,
        translateOffset: *mut ArkUI_IntOffset,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_NodeUtils_GetPositionWithTranslateInScreen(
        node: ArkUI_NodeHandle,
        translateOffset: *mut ArkUI_IntOffset,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_List_CloseAllSwipeActions(
        node: ArkUI_NodeHandle,
        userData: *mut ::std::os::raw::c_void,
        onFinish: ::std::option::Option<
            unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void),
        >,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GetContextByNode(node: ArkUI_NodeHandle) -> ArkUI_ContextHandle;
}
extern "C" {
    pub fn OH_ArkUI_RegisterSystemColorModeChangeEvent(
        node: ArkUI_NodeHandle,
        userData: *mut ::std::os::raw::c_void,
        onColorModeChange: ::std::option::Option<
            unsafe extern "C" fn(
                colorMode: ArkUI_SystemColorMode,
                userData: *mut ::std::os::raw::c_void,
            ),
        >,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_UnregisterSystemColorModeChangeEvent(node: ArkUI_NodeHandle);
}
extern "C" {
    pub fn OH_ArkUI_RegisterSystemFontStyleChangeEvent(
        node: ArkUI_NodeHandle,
        userData: *mut ::std::os::raw::c_void,
        onFontStyleChange: ::std::option::Option<
            unsafe extern "C" fn(
                event: *mut ArkUI_SystemFontStyleEvent,
                userData: *mut ::std::os::raw::c_void,
            ),
        >,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_UnregisterSystemFontStyleChangeEvent(node: ArkUI_NodeHandle);
}
extern "C" {
    pub fn OH_ArkUI_SystemFontStyleEvent_GetFontSizeScale(
        event: *const ArkUI_SystemFontStyleEvent,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_SystemFontStyleEvent_GetFontWeightScale(
        event: *const ArkUI_SystemFontStyleEvent,
    ) -> f32;
}
extern "C" {
    pub fn OH_ArkUI_GetNodeHandleFromNapiValue(
        env: napi_env,
        frameNode: napi_value,
        handle: *mut ArkUI_NodeHandle,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GetContextFromNapiValue(
        env: napi_env,
        value: napi_value,
        context: *mut ArkUI_ContextHandle,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GetNodeContentFromNapiValue(
        env: napi_env,
        value: napi_value,
        content: *mut ArkUI_NodeContentHandle,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GetDrawableDescriptorFromNapiValue(
        env: napi_env,
        value: napi_value,
        drawableDescriptor: *mut *mut ArkUI_DrawableDescriptor,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GetDrawableDescriptorFromResourceNapiValue(
        env: napi_env,
        value: napi_value,
        drawableDescriptor: *mut *mut ArkUI_DrawableDescriptor,
    ) -> i32;
}
extern "C" {
    pub fn OH_ArkUI_GetNavigationId(
        node: ArkUI_NodeHandle,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> ArkUI_ErrorCode;
}
extern "C" {
    pub fn OH_ArkUI_GetNavDestinationName(
        node: ArkUI_NodeHandle,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> ArkUI_ErrorCode;
}
extern "C" {
    pub fn OH_ArkUI_GetNavStackLength(node: ArkUI_NodeHandle, length: *mut i32) -> ArkUI_ErrorCode;
}
extern "C" {
    pub fn OH_ArkUI_GetNavDestinationNameByIndex(
        node: ArkUI_NodeHandle,
        index: i32,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> ArkUI_ErrorCode;
}
extern "C" {
    pub fn OH_ArkUI_GetNavDestinationId(
        node: ArkUI_NodeHandle,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> ArkUI_ErrorCode;
}
extern "C" {
    pub fn OH_ArkUI_GetNavDestinationState(
        node: ArkUI_NodeHandle,
        state: *mut ArkUI_NavDestinationState,
    ) -> ArkUI_ErrorCode;
}
extern "C" {
    pub fn OH_ArkUI_GetNavDestinationIndex(
        node: ArkUI_NodeHandle,
        index: *mut i32,
    ) -> ArkUI_ErrorCode;
}
extern "C" {
    pub fn OH_ArkUI_GetNavDestinationParam(node: ArkUI_NodeHandle) -> napi_value;
}
extern "C" {
    pub fn OH_ArkUI_GetRouterPageIndex(node: ArkUI_NodeHandle, index: *mut i32) -> ArkUI_ErrorCode;
}
extern "C" {
    pub fn OH_ArkUI_GetRouterPageName(
        node: ArkUI_NodeHandle,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> ArkUI_ErrorCode;
}
extern "C" {
    pub fn OH_ArkUI_GetRouterPagePath(
        node: ArkUI_NodeHandle,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> ArkUI_ErrorCode;
}
extern "C" {
    pub fn OH_ArkUI_GetRouterPageState(
        node: ArkUI_NodeHandle,
        state: *mut ArkUI_RouterPageState,
    ) -> ArkUI_ErrorCode;
}
extern "C" {
    pub fn OH_ArkUI_GetRouterPageId(
        node: ArkUI_NodeHandle,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> ArkUI_ErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontCollection {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Typography {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_TextStyle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_TypographyStyle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_TypographyCreate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_TextBox {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_PositionAndAffinity {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Range {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontParser {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_TextShadow {
    _unused: [u8; 0],
}
pub const OH_Drawing_ErrorCode_OH_DRAWING_SUCCESS: OH_Drawing_ErrorCode = 0;
pub const OH_Drawing_ErrorCode_OH_DRAWING_ERROR_NO_PERMISSION: OH_Drawing_ErrorCode = 201;
pub const OH_Drawing_ErrorCode_OH_DRAWING_ERROR_INVALID_PARAMETER: OH_Drawing_ErrorCode = 401;
pub const OH_Drawing_ErrorCode_OH_DRAWING_ERROR_PARAMETER_OUT_OF_RANGE: OH_Drawing_ErrorCode =
    26200001;
pub type OH_Drawing_ErrorCode = ::std::os::raw::c_uint;
extern "C" {
    pub fn OH_Drawing_ErrorCodeGet() -> OH_Drawing_ErrorCode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Canvas {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Pen {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Region {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Brush {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Path {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Bitmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Point {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_PixelMap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_ColorSpace {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Point2D {
    pub x: f32,
    pub y: f32,
}
pub type OH_Drawing_Corner_Radii = OH_Drawing_Point2D;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Point3D {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_PathEffect {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Rect {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_RoundRect {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Matrix {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_ShaderEffect {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_ShadowLayer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Filter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_MaskFilter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_ColorFilter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Font {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_MemoryStream {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Typeface {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_TextBlob {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Image {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_ImageFilter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_SamplingOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_TextBlobBuilder {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_GpuContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Surface {
    _unused: [u8; 0],
}
pub const OH_Drawing_ColorFormat_COLOR_FORMAT_UNKNOWN: OH_Drawing_ColorFormat = 0;
pub const OH_Drawing_ColorFormat_COLOR_FORMAT_ALPHA_8: OH_Drawing_ColorFormat = 1;
pub const OH_Drawing_ColorFormat_COLOR_FORMAT_RGB_565: OH_Drawing_ColorFormat = 2;
pub const OH_Drawing_ColorFormat_COLOR_FORMAT_ARGB_4444: OH_Drawing_ColorFormat = 3;
pub const OH_Drawing_ColorFormat_COLOR_FORMAT_RGBA_8888: OH_Drawing_ColorFormat = 4;
pub const OH_Drawing_ColorFormat_COLOR_FORMAT_BGRA_8888: OH_Drawing_ColorFormat = 5;
pub type OH_Drawing_ColorFormat = ::std::os::raw::c_uint;
pub const OH_Drawing_AlphaFormat_ALPHA_FORMAT_UNKNOWN: OH_Drawing_AlphaFormat = 0;
pub const OH_Drawing_AlphaFormat_ALPHA_FORMAT_OPAQUE: OH_Drawing_AlphaFormat = 1;
pub const OH_Drawing_AlphaFormat_ALPHA_FORMAT_PREMUL: OH_Drawing_AlphaFormat = 2;
pub const OH_Drawing_AlphaFormat_ALPHA_FORMAT_UNPREMUL: OH_Drawing_AlphaFormat = 3;
pub type OH_Drawing_AlphaFormat = ::std::os::raw::c_uint;
pub const OH_Drawing_BlendMode_BLEND_MODE_CLEAR: OH_Drawing_BlendMode = 0;
pub const OH_Drawing_BlendMode_BLEND_MODE_SRC: OH_Drawing_BlendMode = 1;
pub const OH_Drawing_BlendMode_BLEND_MODE_DST: OH_Drawing_BlendMode = 2;
pub const OH_Drawing_BlendMode_BLEND_MODE_SRC_OVER: OH_Drawing_BlendMode = 3;
pub const OH_Drawing_BlendMode_BLEND_MODE_DST_OVER: OH_Drawing_BlendMode = 4;
pub const OH_Drawing_BlendMode_BLEND_MODE_SRC_IN: OH_Drawing_BlendMode = 5;
pub const OH_Drawing_BlendMode_BLEND_MODE_DST_IN: OH_Drawing_BlendMode = 6;
pub const OH_Drawing_BlendMode_BLEND_MODE_SRC_OUT: OH_Drawing_BlendMode = 7;
pub const OH_Drawing_BlendMode_BLEND_MODE_DST_OUT: OH_Drawing_BlendMode = 8;
pub const OH_Drawing_BlendMode_BLEND_MODE_SRC_ATOP: OH_Drawing_BlendMode = 9;
pub const OH_Drawing_BlendMode_BLEND_MODE_DST_ATOP: OH_Drawing_BlendMode = 10;
pub const OH_Drawing_BlendMode_BLEND_MODE_XOR: OH_Drawing_BlendMode = 11;
pub const OH_Drawing_BlendMode_BLEND_MODE_PLUS: OH_Drawing_BlendMode = 12;
pub const OH_Drawing_BlendMode_BLEND_MODE_MODULATE: OH_Drawing_BlendMode = 13;
pub const OH_Drawing_BlendMode_BLEND_MODE_SCREEN: OH_Drawing_BlendMode = 14;
pub const OH_Drawing_BlendMode_BLEND_MODE_OVERLAY: OH_Drawing_BlendMode = 15;
pub const OH_Drawing_BlendMode_BLEND_MODE_DARKEN: OH_Drawing_BlendMode = 16;
pub const OH_Drawing_BlendMode_BLEND_MODE_LIGHTEN: OH_Drawing_BlendMode = 17;
pub const OH_Drawing_BlendMode_BLEND_MODE_COLOR_DODGE: OH_Drawing_BlendMode = 18;
pub const OH_Drawing_BlendMode_BLEND_MODE_COLOR_BURN: OH_Drawing_BlendMode = 19;
pub const OH_Drawing_BlendMode_BLEND_MODE_HARD_LIGHT: OH_Drawing_BlendMode = 20;
pub const OH_Drawing_BlendMode_BLEND_MODE_SOFT_LIGHT: OH_Drawing_BlendMode = 21;
pub const OH_Drawing_BlendMode_BLEND_MODE_DIFFERENCE: OH_Drawing_BlendMode = 22;
pub const OH_Drawing_BlendMode_BLEND_MODE_EXCLUSION: OH_Drawing_BlendMode = 23;
pub const OH_Drawing_BlendMode_BLEND_MODE_MULTIPLY: OH_Drawing_BlendMode = 24;
pub const OH_Drawing_BlendMode_BLEND_MODE_HUE: OH_Drawing_BlendMode = 25;
pub const OH_Drawing_BlendMode_BLEND_MODE_SATURATION: OH_Drawing_BlendMode = 26;
pub const OH_Drawing_BlendMode_BLEND_MODE_COLOR: OH_Drawing_BlendMode = 27;
pub const OH_Drawing_BlendMode_BLEND_MODE_LUMINOSITY: OH_Drawing_BlendMode = 28;
pub type OH_Drawing_BlendMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Image_Info {
    pub width: i32,
    pub height: i32,
    pub colorType: OH_Drawing_ColorFormat,
    pub alphaType: OH_Drawing_AlphaFormat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_RectStyle_Info {
    pub color: u32,
    pub leftTopRadius: f64,
    pub rightTopRadius: f64,
    pub rightBottomRadius: f64,
    pub leftBottomRadius: f64,
}
pub const OH_Drawing_TextEncoding_TEXT_ENCODING_UTF8: OH_Drawing_TextEncoding = 0;
pub const OH_Drawing_TextEncoding_TEXT_ENCODING_UTF16: OH_Drawing_TextEncoding = 1;
pub const OH_Drawing_TextEncoding_TEXT_ENCODING_UTF32: OH_Drawing_TextEncoding = 2;
pub const OH_Drawing_TextEncoding_TEXT_ENCODING_GLYPH_ID: OH_Drawing_TextEncoding = 3;
pub type OH_Drawing_TextEncoding = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontMgr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontStyleSet {
    _unused: [u8; 0],
}
pub const OH_Drawing_SrcRectConstraint_STRICT_SRC_RECT_CONSTRAINT: OH_Drawing_SrcRectConstraint = 0;
pub const OH_Drawing_SrcRectConstraint_FAST_SRC_RECT_CONSTRAINT: OH_Drawing_SrcRectConstraint = 1;
pub type OH_Drawing_SrcRectConstraint = ::std::os::raw::c_uint;
extern "C" {
    pub fn OH_Drawing_CanvasCreate() -> *mut OH_Drawing_Canvas;
}
extern "C" {
    pub fn OH_Drawing_CanvasDestroy(arg1: *mut OH_Drawing_Canvas);
}
extern "C" {
    pub fn OH_Drawing_CanvasBind(arg1: *mut OH_Drawing_Canvas, arg2: *mut OH_Drawing_Bitmap);
}
extern "C" {
    pub fn OH_Drawing_CanvasAttachPen(arg1: *mut OH_Drawing_Canvas, arg2: *const OH_Drawing_Pen);
}
extern "C" {
    pub fn OH_Drawing_CanvasDetachPen(arg1: *mut OH_Drawing_Canvas);
}
extern "C" {
    pub fn OH_Drawing_CanvasAttachBrush(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Brush,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasDetachBrush(arg1: *mut OH_Drawing_Canvas);
}
extern "C" {
    pub fn OH_Drawing_CanvasSave(arg1: *mut OH_Drawing_Canvas);
}
extern "C" {
    pub fn OH_Drawing_CanvasSaveLayer(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Rect,
        arg3: *const OH_Drawing_Brush,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasRestore(arg1: *mut OH_Drawing_Canvas);
}
extern "C" {
    pub fn OH_Drawing_CanvasGetSaveCount(arg1: *mut OH_Drawing_Canvas) -> u32;
}
extern "C" {
    pub fn OH_Drawing_CanvasRestoreToCount(arg1: *mut OH_Drawing_Canvas, saveCount: u32);
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawLine(
        arg1: *mut OH_Drawing_Canvas,
        x1: f32,
        y1: f32,
        x2: f32,
        y2: f32,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawPath(arg1: *mut OH_Drawing_Canvas, arg2: *const OH_Drawing_Path);
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawPixelMapRect(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_PixelMap,
        src: *const OH_Drawing_Rect,
        dst: *const OH_Drawing_Rect,
        arg3: *const OH_Drawing_SamplingOptions,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawBackground(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Brush,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawRegion(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Region,
    );
}
pub const OH_Drawing_PointMode_POINT_MODE_POINTS: OH_Drawing_PointMode = 0;
pub const OH_Drawing_PointMode_POINT_MODE_LINES: OH_Drawing_PointMode = 1;
pub const OH_Drawing_PointMode_POINT_MODE_POLYGON: OH_Drawing_PointMode = 2;
pub type OH_Drawing_PointMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn OH_Drawing_CanvasDrawPoint(
        canvas: *mut OH_Drawing_Canvas,
        point: *const OH_Drawing_Point2D,
    ) -> OH_Drawing_ErrorCode;
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawPoints(
        arg1: *mut OH_Drawing_Canvas,
        mode: OH_Drawing_PointMode,
        count: u32,
        arg2: *const OH_Drawing_Point2D,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawBitmap(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Bitmap,
        left: f32,
        top: f32,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawBitmapRect(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Bitmap,
        src: *const OH_Drawing_Rect,
        dst: *const OH_Drawing_Rect,
        arg3: *const OH_Drawing_SamplingOptions,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawRect(arg1: *mut OH_Drawing_Canvas, arg2: *const OH_Drawing_Rect);
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawCircle(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Point,
        radius: f32,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawColor(
        canvas: *mut OH_Drawing_Canvas,
        color: u32,
        blendMode: OH_Drawing_BlendMode,
    ) -> OH_Drawing_ErrorCode;
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawOval(arg1: *mut OH_Drawing_Canvas, arg2: *const OH_Drawing_Rect);
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawArc(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Rect,
        startAngle: f32,
        sweepAngle: f32,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawRoundRect(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_RoundRect,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawSingleCharacter(
        canvas: *mut OH_Drawing_Canvas,
        str_: *const ::std::os::raw::c_char,
        font: *const OH_Drawing_Font,
        x: f32,
        y: f32,
    ) -> OH_Drawing_ErrorCode;
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawTextBlob(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_TextBlob,
        x: f32,
        y: f32,
    );
}
pub const OH_Drawing_CanvasClipOp_DIFFERENCE: OH_Drawing_CanvasClipOp = 0;
pub const OH_Drawing_CanvasClipOp_INTERSECT: OH_Drawing_CanvasClipOp = 1;
pub type OH_Drawing_CanvasClipOp = ::std::os::raw::c_uint;
extern "C" {
    pub fn OH_Drawing_CanvasClipRect(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Rect,
        clipOp: OH_Drawing_CanvasClipOp,
        doAntiAlias: bool,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasClipRoundRect(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_RoundRect,
        clipOp: OH_Drawing_CanvasClipOp,
        doAntiAlias: bool,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasClipPath(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Path,
        clipOp: OH_Drawing_CanvasClipOp,
        doAntiAlias: bool,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasClipRegion(
        canvas: *mut OH_Drawing_Canvas,
        region: *const OH_Drawing_Region,
        clipOp: OH_Drawing_CanvasClipOp,
    ) -> OH_Drawing_ErrorCode;
}
extern "C" {
    pub fn OH_Drawing_CanvasRotate(arg1: *mut OH_Drawing_Canvas, degrees: f32, px: f32, py: f32);
}
extern "C" {
    pub fn OH_Drawing_CanvasTranslate(arg1: *mut OH_Drawing_Canvas, dx: f32, dy: f32);
}
extern "C" {
    pub fn OH_Drawing_CanvasScale(arg1: *mut OH_Drawing_Canvas, sx: f32, sy: f32);
}
extern "C" {
    pub fn OH_Drawing_CanvasSkew(arg1: *mut OH_Drawing_Canvas, sx: f32, sy: f32);
}
extern "C" {
    pub fn OH_Drawing_CanvasClear(arg1: *mut OH_Drawing_Canvas, color: u32);
}
extern "C" {
    pub fn OH_Drawing_CanvasGetWidth(arg1: *mut OH_Drawing_Canvas) -> i32;
}
extern "C" {
    pub fn OH_Drawing_CanvasGetHeight(arg1: *mut OH_Drawing_Canvas) -> i32;
}
extern "C" {
    pub fn OH_Drawing_CanvasGetLocalClipBounds(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_Rect,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasGetTotalMatrix(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_Matrix,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasConcatMatrix(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_Matrix,
    );
}
pub const OH_Drawing_CanvasShadowFlags_SHADOW_FLAGS_NONE: OH_Drawing_CanvasShadowFlags = 0;
pub const OH_Drawing_CanvasShadowFlags_SHADOW_FLAGS_TRANSPARENT_OCCLUDER:
    OH_Drawing_CanvasShadowFlags = 1;
pub const OH_Drawing_CanvasShadowFlags_SHADOW_FLAGS_GEOMETRIC_ONLY: OH_Drawing_CanvasShadowFlags =
    2;
pub const OH_Drawing_CanvasShadowFlags_SHADOW_FLAGS_ALL: OH_Drawing_CanvasShadowFlags = 3;
pub type OH_Drawing_CanvasShadowFlags = ::std::os::raw::c_uint;
extern "C" {
    pub fn OH_Drawing_CanvasDrawShadow(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_Path,
        planeParams: OH_Drawing_Point3D,
        devLightPos: OH_Drawing_Point3D,
        lightRadius: f32,
        ambientColor: u32,
        spotColor: u32,
        flag: OH_Drawing_CanvasShadowFlags,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasSetMatrix(arg1: *mut OH_Drawing_Canvas, arg2: *mut OH_Drawing_Matrix);
}
extern "C" {
    pub fn OH_Drawing_CanvasResetMatrix(arg1: *mut OH_Drawing_Canvas);
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawImageRectWithSrc(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Image,
        src: *const OH_Drawing_Rect,
        dst: *const OH_Drawing_Rect,
        arg3: *const OH_Drawing_SamplingOptions,
        arg4: OH_Drawing_SrcRectConstraint,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasDrawImageRect(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_Image,
        dst: *mut OH_Drawing_Rect,
        arg3: *mut OH_Drawing_SamplingOptions,
    );
}
pub const OH_Drawing_VertexMode_VERTEX_MODE_TRIANGLES: OH_Drawing_VertexMode = 0;
pub const OH_Drawing_VertexMode_VERTEX_MODE_TRIANGLES_STRIP: OH_Drawing_VertexMode = 1;
pub const OH_Drawing_VertexMode_VERTEX_MODE_TRIANGLE_FAN: OH_Drawing_VertexMode = 2;
pub type OH_Drawing_VertexMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn OH_Drawing_CanvasDrawVertices(
        arg1: *mut OH_Drawing_Canvas,
        vertexMmode: OH_Drawing_VertexMode,
        vertexCount: i32,
        positions: *const OH_Drawing_Point2D,
        texs: *const OH_Drawing_Point2D,
        colors: *const u32,
        indexCount: i32,
        indices: *const u16,
        mode: OH_Drawing_BlendMode,
    );
}
extern "C" {
    pub fn OH_Drawing_CanvasReadPixels(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_Image_Info,
        dstPixels: *mut ::std::os::raw::c_void,
        dstRowBytes: u32,
        srcX: i32,
        srcY: i32,
    ) -> bool;
}
extern "C" {
    pub fn OH_Drawing_CanvasReadPixelsToBitmap(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_Bitmap,
        srcX: i32,
        srcY: i32,
    ) -> bool;
}
extern "C" {
    pub fn OH_Drawing_CanvasIsClipEmpty(
        canvas: *mut OH_Drawing_Canvas,
        isClipEmpty: *mut bool,
    ) -> OH_Drawing_ErrorCode;
}
extern "C" {
    pub fn OH_Drawing_CanvasGetImageInfo(
        canvas: *mut OH_Drawing_Canvas,
        imageInfo: *mut OH_Drawing_Image_Info,
    ) -> OH_Drawing_ErrorCode;
}
extern "C" {
    pub fn OH_Drawing_ColorSetArgb(alpha: u32, red: u32, green: u32, blue: u32) -> u32;
}
extern "C" {
    pub fn OH_Drawing_FontCreate() -> *mut OH_Drawing_Font;
}
pub const OH_Drawing_FontHinting_FONT_HINTING_NONE: OH_Drawing_FontHinting = 0;
pub const OH_Drawing_FontHinting_FONT_HINTING_SLIGHT: OH_Drawing_FontHinting = 1;
pub const OH_Drawing_FontHinting_FONT_HINTING_NORMAL: OH_Drawing_FontHinting = 2;
pub const OH_Drawing_FontHinting_FONT_HINTING_FULL: OH_Drawing_FontHinting = 3;
pub type OH_Drawing_FontHinting = ::std::os::raw::c_uint;
pub const OH_Drawing_FontEdging_FONT_EDGING_ALIAS: OH_Drawing_FontEdging = 0;
pub const OH_Drawing_FontEdging_FONT_EDGING_ANTI_ALIAS: OH_Drawing_FontEdging = 1;
pub const OH_Drawing_FontEdging_FONT_EDGING_SUBPIXEL_ANTI_ALIAS: OH_Drawing_FontEdging = 2;
pub type OH_Drawing_FontEdging = ::std::os::raw::c_uint;
extern "C" {
    pub fn OH_Drawing_FontSetBaselineSnap(arg1: *mut OH_Drawing_Font, baselineSnap: bool);
}
extern "C" {
    pub fn OH_Drawing_FontIsBaselineSnap(arg1: *const OH_Drawing_Font) -> bool;
}
extern "C" {
    pub fn OH_Drawing_FontSetSubpixel(arg1: *mut OH_Drawing_Font, isSubpixel: bool);
}
extern "C" {
    pub fn OH_Drawing_FontIsSubpixel(arg1: *const OH_Drawing_Font) -> bool;
}
extern "C" {
    pub fn OH_Drawing_FontSetForceAutoHinting(arg1: *mut OH_Drawing_Font, isForceAutoHinting: bool);
}
extern "C" {
    pub fn OH_Drawing_FontIsForceAutoHinting(arg1: *const OH_Drawing_Font) -> bool;
}
extern "C" {
    pub fn OH_Drawing_FontSetTypeface(arg1: *mut OH_Drawing_Font, arg2: *mut OH_Drawing_Typeface);
}
extern "C" {
    pub fn OH_Drawing_FontGetTypeface(arg1: *mut OH_Drawing_Font) -> *mut OH_Drawing_Typeface;
}
extern "C" {
    pub fn OH_Drawing_FontSetTextSize(arg1: *mut OH_Drawing_Font, textSize: f32);
}
extern "C" {
    pub fn OH_Drawing_FontGetTextSize(arg1: *const OH_Drawing_Font) -> f32;
}
extern "C" {
    pub fn OH_Drawing_FontCountText(
        arg1: *mut OH_Drawing_Font,
        text: *const ::std::os::raw::c_void,
        byteLength: usize,
        encoding: OH_Drawing_TextEncoding,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OH_Drawing_FontTextToGlyphs(
        arg1: *const OH_Drawing_Font,
        text: *const ::std::os::raw::c_void,
        byteLength: u32,
        encoding: OH_Drawing_TextEncoding,
        glyphs: *mut u16,
        maxGlyphCount: ::std::os::raw::c_int,
    ) -> u32;
}
extern "C" {
    pub fn OH_Drawing_FontGetWidths(
        arg1: *const OH_Drawing_Font,
        glyphs: *const u16,
        count: ::std::os::raw::c_int,
        widths: *mut f32,
    );
}
extern "C" {
    pub fn OH_Drawing_FontMeasureSingleCharacter(
        font: *const OH_Drawing_Font,
        str_: *const ::std::os::raw::c_char,
        textWidth: *mut f32,
    ) -> OH_Drawing_ErrorCode;
}
extern "C" {
    pub fn OH_Drawing_FontMeasureText(
        font: *const OH_Drawing_Font,
        text: *const ::std::os::raw::c_void,
        byteLength: usize,
        encoding: OH_Drawing_TextEncoding,
        bounds: *mut OH_Drawing_Rect,
        textWidth: *mut f32,
    ) -> OH_Drawing_ErrorCode;
}
extern "C" {
    pub fn OH_Drawing_FontSetLinearText(arg1: *mut OH_Drawing_Font, isLinearText: bool);
}
extern "C" {
    pub fn OH_Drawing_FontIsLinearText(arg1: *const OH_Drawing_Font) -> bool;
}
extern "C" {
    pub fn OH_Drawing_FontSetTextSkewX(arg1: *mut OH_Drawing_Font, skewX: f32);
}
extern "C" {
    pub fn OH_Drawing_FontGetTextSkewX(arg1: *const OH_Drawing_Font) -> f32;
}
extern "C" {
    pub fn OH_Drawing_FontSetFakeBoldText(arg1: *mut OH_Drawing_Font, isFakeBoldText: bool);
}
extern "C" {
    pub fn OH_Drawing_FontIsFakeBoldText(arg1: *const OH_Drawing_Font) -> bool;
}
extern "C" {
    pub fn OH_Drawing_FontSetScaleX(arg1: *mut OH_Drawing_Font, scaleX: f32);
}
extern "C" {
    pub fn OH_Drawing_FontGetScaleX(arg1: *const OH_Drawing_Font) -> f32;
}
extern "C" {
    pub fn OH_Drawing_FontSetHinting(arg1: *mut OH_Drawing_Font, arg2: OH_Drawing_FontHinting);
}
extern "C" {
    pub fn OH_Drawing_FontGetHinting(arg1: *const OH_Drawing_Font) -> OH_Drawing_FontHinting;
}
extern "C" {
    pub fn OH_Drawing_FontSetEmbeddedBitmaps(arg1: *mut OH_Drawing_Font, isEmbeddedBitmaps: bool);
}
extern "C" {
    pub fn OH_Drawing_FontIsEmbeddedBitmaps(arg1: *const OH_Drawing_Font) -> bool;
}
extern "C" {
    pub fn OH_Drawing_FontSetEdging(arg1: *mut OH_Drawing_Font, arg2: OH_Drawing_FontEdging);
}
extern "C" {
    pub fn OH_Drawing_FontGetEdging(arg1: *const OH_Drawing_Font) -> OH_Drawing_FontEdging;
}
extern "C" {
    pub fn OH_Drawing_FontDestroy(arg1: *mut OH_Drawing_Font);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Font_Metrics {
    pub flags: u32,
    pub top: f32,
    pub ascent: f32,
    pub descent: f32,
    pub bottom: f32,
    pub leading: f32,
    pub avgCharWidth: f32,
    pub maxCharWidth: f32,
    pub xMin: f32,
    pub xMax: f32,
    pub xHeight: f32,
    pub capHeight: f32,
    pub underlineThickness: f32,
    pub underlinePosition: f32,
    pub strikeoutThickness: f32,
    pub strikeoutPosition: f32,
}
extern "C" {
    pub fn OH_Drawing_FontGetMetrics(
        arg1: *mut OH_Drawing_Font,
        arg2: *mut OH_Drawing_Font_Metrics,
    ) -> f32;
}
pub const OH_Drawing_TextDirection_TEXT_DIRECTION_RTL: OH_Drawing_TextDirection = 0;
pub const OH_Drawing_TextDirection_TEXT_DIRECTION_LTR: OH_Drawing_TextDirection = 1;
pub type OH_Drawing_TextDirection = ::std::os::raw::c_uint;
pub const OH_Drawing_TextAlign_TEXT_ALIGN_LEFT: OH_Drawing_TextAlign = 0;
pub const OH_Drawing_TextAlign_TEXT_ALIGN_RIGHT: OH_Drawing_TextAlign = 1;
pub const OH_Drawing_TextAlign_TEXT_ALIGN_CENTER: OH_Drawing_TextAlign = 2;
pub const OH_Drawing_TextAlign_TEXT_ALIGN_JUSTIFY: OH_Drawing_TextAlign = 3;
pub const OH_Drawing_TextAlign_TEXT_ALIGN_START: OH_Drawing_TextAlign = 4;
pub const OH_Drawing_TextAlign_TEXT_ALIGN_END: OH_Drawing_TextAlign = 5;
pub type OH_Drawing_TextAlign = ::std::os::raw::c_uint;
pub const OH_Drawing_FontWeight_FONT_WEIGHT_100: OH_Drawing_FontWeight = 0;
pub const OH_Drawing_FontWeight_FONT_WEIGHT_200: OH_Drawing_FontWeight = 1;
pub const OH_Drawing_FontWeight_FONT_WEIGHT_300: OH_Drawing_FontWeight = 2;
pub const OH_Drawing_FontWeight_FONT_WEIGHT_400: OH_Drawing_FontWeight = 3;
pub const OH_Drawing_FontWeight_FONT_WEIGHT_500: OH_Drawing_FontWeight = 4;
pub const OH_Drawing_FontWeight_FONT_WEIGHT_600: OH_Drawing_FontWeight = 5;
pub const OH_Drawing_FontWeight_FONT_WEIGHT_700: OH_Drawing_FontWeight = 6;
pub const OH_Drawing_FontWeight_FONT_WEIGHT_800: OH_Drawing_FontWeight = 7;
pub const OH_Drawing_FontWeight_FONT_WEIGHT_900: OH_Drawing_FontWeight = 8;
pub type OH_Drawing_FontWeight = ::std::os::raw::c_uint;
pub const OH_Drawing_TextBaseline_TEXT_BASELINE_ALPHABETIC: OH_Drawing_TextBaseline = 0;
pub const OH_Drawing_TextBaseline_TEXT_BASELINE_IDEOGRAPHIC: OH_Drawing_TextBaseline = 1;
pub type OH_Drawing_TextBaseline = ::std::os::raw::c_uint;
pub const OH_Drawing_TextDecoration_TEXT_DECORATION_NONE: OH_Drawing_TextDecoration = 0;
pub const OH_Drawing_TextDecoration_TEXT_DECORATION_UNDERLINE: OH_Drawing_TextDecoration = 1;
pub const OH_Drawing_TextDecoration_TEXT_DECORATION_OVERLINE: OH_Drawing_TextDecoration = 2;
pub const OH_Drawing_TextDecoration_TEXT_DECORATION_LINE_THROUGH: OH_Drawing_TextDecoration = 4;
pub type OH_Drawing_TextDecoration = ::std::os::raw::c_uint;
pub const OH_Drawing_FontStyle_FONT_STYLE_NORMAL: OH_Drawing_FontStyle = 0;
pub const OH_Drawing_FontStyle_FONT_STYLE_ITALIC: OH_Drawing_FontStyle = 1;
pub const OH_Drawing_FontStyle_FONT_STYLE_OBLIQUE: OH_Drawing_FontStyle = 2;
pub type OH_Drawing_FontStyle = ::std::os::raw::c_uint;
pub const OH_Drawing_PlaceholderVerticalAlignment_ALIGNMENT_OFFSET_AT_BASELINE:
    OH_Drawing_PlaceholderVerticalAlignment = 0;
pub const OH_Drawing_PlaceholderVerticalAlignment_ALIGNMENT_ABOVE_BASELINE:
    OH_Drawing_PlaceholderVerticalAlignment = 1;
pub const OH_Drawing_PlaceholderVerticalAlignment_ALIGNMENT_BELOW_BASELINE:
    OH_Drawing_PlaceholderVerticalAlignment = 2;
pub const OH_Drawing_PlaceholderVerticalAlignment_ALIGNMENT_TOP_OF_ROW_BOX:
    OH_Drawing_PlaceholderVerticalAlignment = 3;
pub const OH_Drawing_PlaceholderVerticalAlignment_ALIGNMENT_BOTTOM_OF_ROW_BOX:
    OH_Drawing_PlaceholderVerticalAlignment = 4;
pub const OH_Drawing_PlaceholderVerticalAlignment_ALIGNMENT_CENTER_OF_ROW_BOX:
    OH_Drawing_PlaceholderVerticalAlignment = 5;
pub type OH_Drawing_PlaceholderVerticalAlignment = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_PlaceholderSpan {
    pub width: f64,
    pub height: f64,
    pub alignment: OH_Drawing_PlaceholderVerticalAlignment,
    pub baseline: OH_Drawing_TextBaseline,
    pub baselineOffset: f64,
}
pub const OH_Drawing_TextDecorationStyle_TEXT_DECORATION_STYLE_SOLID:
    OH_Drawing_TextDecorationStyle = 0;
pub const OH_Drawing_TextDecorationStyle_TEXT_DECORATION_STYLE_DOUBLE:
    OH_Drawing_TextDecorationStyle = 1;
pub const OH_Drawing_TextDecorationStyle_TEXT_DECORATION_STYLE_DOTTED:
    OH_Drawing_TextDecorationStyle = 2;
pub const OH_Drawing_TextDecorationStyle_TEXT_DECORATION_STYLE_DASHED:
    OH_Drawing_TextDecorationStyle = 3;
pub const OH_Drawing_TextDecorationStyle_TEXT_DECORATION_STYLE_WAVY:
    OH_Drawing_TextDecorationStyle = 4;
pub type OH_Drawing_TextDecorationStyle = ::std::os::raw::c_uint;
pub const OH_Drawing_EllipsisModal_ELLIPSIS_MODAL_HEAD: OH_Drawing_EllipsisModal = 0;
pub const OH_Drawing_EllipsisModal_ELLIPSIS_MODAL_MIDDLE: OH_Drawing_EllipsisModal = 1;
pub const OH_Drawing_EllipsisModal_ELLIPSIS_MODAL_TAIL: OH_Drawing_EllipsisModal = 2;
pub type OH_Drawing_EllipsisModal = ::std::os::raw::c_uint;
pub const OH_Drawing_BreakStrategy_BREAK_STRATEGY_GREEDY: OH_Drawing_BreakStrategy = 0;
pub const OH_Drawing_BreakStrategy_BREAK_STRATEGY_HIGH_QUALITY: OH_Drawing_BreakStrategy = 1;
pub const OH_Drawing_BreakStrategy_BREAK_STRATEGY_BALANCED: OH_Drawing_BreakStrategy = 2;
pub type OH_Drawing_BreakStrategy = ::std::os::raw::c_uint;
pub const OH_Drawing_WordBreakType_WORD_BREAK_TYPE_NORMAL: OH_Drawing_WordBreakType = 0;
pub const OH_Drawing_WordBreakType_WORD_BREAK_TYPE_BREAK_ALL: OH_Drawing_WordBreakType = 1;
pub const OH_Drawing_WordBreakType_WORD_BREAK_TYPE_BREAK_WORD: OH_Drawing_WordBreakType = 2;
pub type OH_Drawing_WordBreakType = ::std::os::raw::c_uint;
pub const OH_Drawing_RectHeightStyle_RECT_HEIGHT_STYLE_TIGHT: OH_Drawing_RectHeightStyle = 0;
pub const OH_Drawing_RectHeightStyle_RECT_HEIGHT_STYLE_MAX: OH_Drawing_RectHeightStyle = 1;
pub const OH_Drawing_RectHeightStyle_RECT_HEIGHT_STYLE_INCLUDELINESPACEMIDDLE:
    OH_Drawing_RectHeightStyle = 2;
pub const OH_Drawing_RectHeightStyle_RECT_HEIGHT_STYLE_INCLUDELINESPACETOP:
    OH_Drawing_RectHeightStyle = 3;
pub const OH_Drawing_RectHeightStyle_RECT_HEIGHT_STYLE_INCLUDELINESPACEBOTTOM:
    OH_Drawing_RectHeightStyle = 4;
pub const OH_Drawing_RectHeightStyle_RECT_HEIGHT_STYLE_STRUCT: OH_Drawing_RectHeightStyle = 5;
pub type OH_Drawing_RectHeightStyle = ::std::os::raw::c_uint;
pub const OH_Drawing_RectWidthStyle_RECT_WIDTH_STYLE_TIGHT: OH_Drawing_RectWidthStyle = 0;
pub const OH_Drawing_RectWidthStyle_RECT_WIDTH_STYLE_MAX: OH_Drawing_RectWidthStyle = 1;
pub type OH_Drawing_RectWidthStyle = ::std::os::raw::c_uint;
pub const OH_Drawing_FontConfigInfoErrorCode_SUCCESS_FONT_CONFIG_INFO:
    OH_Drawing_FontConfigInfoErrorCode = 0;
pub const OH_Drawing_FontConfigInfoErrorCode_ERROR_FONT_CONFIG_INFO_UNKNOWN:
    OH_Drawing_FontConfigInfoErrorCode = 1;
pub const OH_Drawing_FontConfigInfoErrorCode_ERROR_FONT_CONFIG_INFO_PARSE_FILE:
    OH_Drawing_FontConfigInfoErrorCode = 2;
pub const OH_Drawing_FontConfigInfoErrorCode_ERROR_FONT_CONFIG_INFO_ALLOC_MEMORY:
    OH_Drawing_FontConfigInfoErrorCode = 3;
pub const OH_Drawing_FontConfigInfoErrorCode_ERROR_FONT_CONFIG_INFO_COPY_STRING_DATA:
    OH_Drawing_FontConfigInfoErrorCode = 4;
pub type OH_Drawing_FontConfigInfoErrorCode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontFallbackInfo {
    pub language: *mut ::std::os::raw::c_char,
    pub familyName: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontFallbackGroup {
    pub groupName: *mut ::std::os::raw::c_char,
    pub fallbackInfoSize: usize,
    pub fallbackInfoSet: *mut OH_Drawing_FontFallbackInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontAdjustInfo {
    pub weight: ::std::os::raw::c_int,
    pub to: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontAliasInfo {
    pub familyName: *mut ::std::os::raw::c_char,
    pub weight: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontGenericInfo {
    pub familyName: *mut ::std::os::raw::c_char,
    pub aliasInfoSize: usize,
    pub adjustInfoSize: usize,
    pub aliasInfoSet: *mut OH_Drawing_FontAliasInfo,
    pub adjustInfoSet: *mut OH_Drawing_FontAdjustInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontConfigInfo {
    pub fontDirSize: usize,
    pub fontGenericInfoSize: usize,
    pub fallbackGroupSize: usize,
    pub fontDirSet: *mut *mut ::std::os::raw::c_char,
    pub fontGenericInfoSet: *mut OH_Drawing_FontGenericInfo,
    pub fallbackGroupSet: *mut OH_Drawing_FontFallbackGroup,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontDescriptor {
    pub path: *mut ::std::os::raw::c_char,
    pub postScriptName: *mut ::std::os::raw::c_char,
    pub fullName: *mut ::std::os::raw::c_char,
    pub fontFamily: *mut ::std::os::raw::c_char,
    pub fontSubfamily: *mut ::std::os::raw::c_char,
    pub weight: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub italic: ::std::os::raw::c_int,
    pub monoSpace: bool,
    pub symbolic: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_LineMetrics {
    pub ascender: f64,
    pub descender: f64,
    pub capHeight: f64,
    pub xHeight: f64,
    pub width: f64,
    pub height: f64,
    pub x: f64,
    pub y: f64,
    pub startIndex: usize,
    pub endIndex: usize,
    pub firstCharMetrics: OH_Drawing_Font_Metrics,
}
pub const OH_Drawing_TextHeightBehavior_TEXT_HEIGHT_ALL: OH_Drawing_TextHeightBehavior = 0;
pub const OH_Drawing_TextHeightBehavior_TEXT_HEIGHT_DISABLE_FIRST_ASCENT:
    OH_Drawing_TextHeightBehavior = 1;
pub const OH_Drawing_TextHeightBehavior_TEXT_HEIGHT_DISABLE_LAST_ASCENT:
    OH_Drawing_TextHeightBehavior = 2;
pub const OH_Drawing_TextHeightBehavior_TEXT_HEIGHT_DISABLE_ALL: OH_Drawing_TextHeightBehavior = 3;
pub type OH_Drawing_TextHeightBehavior = ::std::os::raw::c_uint;
pub const OH_Drawing_TextStyleType_TEXT_STYLE_NONE: OH_Drawing_TextStyleType = 0;
pub const OH_Drawing_TextStyleType_TEXT_STYLE_ALL_ATTRIBUTES: OH_Drawing_TextStyleType = 1;
pub const OH_Drawing_TextStyleType_TEXT_STYLE_FONT: OH_Drawing_TextStyleType = 2;
pub const OH_Drawing_TextStyleType_TEXT_STYLE_FOREGROUND: OH_Drawing_TextStyleType = 3;
pub const OH_Drawing_TextStyleType_TEXT_STYLE_BACKGROUND: OH_Drawing_TextStyleType = 4;
pub const OH_Drawing_TextStyleType_TEXT_STYLE_SHADOW: OH_Drawing_TextStyleType = 5;
pub const OH_Drawing_TextStyleType_TEXT_STYLE_DECORATIONS: OH_Drawing_TextStyleType = 6;
pub const OH_Drawing_TextStyleType_TEXT_STYLE_LETTER_SPACING: OH_Drawing_TextStyleType = 7;
pub const OH_Drawing_TextStyleType_TEXT_STYLE_WORD_SPACING: OH_Drawing_TextStyleType = 8;
pub type OH_Drawing_TextStyleType = ::std::os::raw::c_uint;
pub const OH_Drawing_FontWidth_FONT_WIDTH_ULTRA_CONDENSED: OH_Drawing_FontWidth = 1;
pub const OH_Drawing_FontWidth_FONT_WIDTH_EXTRA_CONDENSED: OH_Drawing_FontWidth = 2;
pub const OH_Drawing_FontWidth_FONT_WIDTH_CONDENSED: OH_Drawing_FontWidth = 3;
pub const OH_Drawing_FontWidth_FONT_WIDTH_SEMI_CONDENSED: OH_Drawing_FontWidth = 4;
pub const OH_Drawing_FontWidth_FONT_WIDTH_NORMAL: OH_Drawing_FontWidth = 5;
pub const OH_Drawing_FontWidth_FONT_WIDTH_SEMI_EXPANDED: OH_Drawing_FontWidth = 6;
pub const OH_Drawing_FontWidth_FONT_WIDTH_EXPANDED: OH_Drawing_FontWidth = 7;
pub const OH_Drawing_FontWidth_FONT_WIDTH_EXTRA_EXPANDED: OH_Drawing_FontWidth = 8;
pub const OH_Drawing_FontWidth_FONT_WIDTH_ULTRA_EXPANDED: OH_Drawing_FontWidth = 9;
pub type OH_Drawing_FontWidth = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontStyleStruct {
    pub weight: OH_Drawing_FontWeight,
    pub width: OH_Drawing_FontWidth,
    pub slant: OH_Drawing_FontStyle,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontFeature {
    pub tag: *mut ::std::os::raw::c_char,
    pub value: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_StrutStyle {
    pub weight: OH_Drawing_FontWeight,
    pub style: OH_Drawing_FontStyle,
    pub size: f64,
    pub heightScale: f64,
    pub heightOverride: bool,
    pub halfLeading: bool,
    pub leading: f64,
    pub forceStrutHeight: bool,
    pub familiesSize: usize,
    pub families: *mut *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn OH_Drawing_CreateTypographyStyle() -> *mut OH_Drawing_TypographyStyle;
}
extern "C" {
    pub fn OH_Drawing_DestroyTypographyStyle(arg1: *mut OH_Drawing_TypographyStyle);
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextDirection(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextAlign(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextMaxLines(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_CreateTextStyle() -> *mut OH_Drawing_TextStyle;
}
extern "C" {
    pub fn OH_Drawing_DestroyTextStyle(arg1: *mut OH_Drawing_TextStyle);
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleColor(arg1: *mut OH_Drawing_TextStyle, arg2: u32);
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleFontSize(arg1: *mut OH_Drawing_TextStyle, arg2: f64);
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleFontWeight(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleBaseLine(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleDecoration(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleDecorationColor(arg1: *mut OH_Drawing_TextStyle, arg2: u32);
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleFontHeight(arg1: *mut OH_Drawing_TextStyle, arg2: f64);
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleFontFamilies(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::std::os::raw::c_int,
        fontFamilies: *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleFontStyle(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleLocale(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleForegroundBrush(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Brush,
    );
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetForegroundBrush(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Brush,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleForegroundPen(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Pen,
    );
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetForegroundPen(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Pen,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleBackgroundBrush(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Brush,
    );
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetBackgroundBrush(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Brush,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleBackgroundPen(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Pen,
    );
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetBackgroundPen(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Pen,
    );
}
extern "C" {
    pub fn OH_Drawing_CreateTypographyHandler(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: *mut OH_Drawing_FontCollection,
    ) -> *mut OH_Drawing_TypographyCreate;
}
extern "C" {
    pub fn OH_Drawing_DestroyTypographyHandler(arg1: *mut OH_Drawing_TypographyCreate);
}
extern "C" {
    pub fn OH_Drawing_TypographyHandlerPushTextStyle(
        arg1: *mut OH_Drawing_TypographyCreate,
        arg2: *mut OH_Drawing_TextStyle,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyHandlerAddText(
        arg1: *mut OH_Drawing_TypographyCreate,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyHandlerPopTextStyle(arg1: *mut OH_Drawing_TypographyCreate);
}
extern "C" {
    pub fn OH_Drawing_CreateTypography(
        arg1: *mut OH_Drawing_TypographyCreate,
    ) -> *mut OH_Drawing_Typography;
}
extern "C" {
    pub fn OH_Drawing_DestroyTypography(arg1: *mut OH_Drawing_Typography);
}
extern "C" {
    pub fn OH_Drawing_TypographyLayout(arg1: *mut OH_Drawing_Typography, arg2: f64);
}
extern "C" {
    pub fn OH_Drawing_TypographyPaint(
        arg1: *mut OH_Drawing_Typography,
        arg2: *mut OH_Drawing_Canvas,
        arg3: f64,
        arg4: f64,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyPaintOnPath(
        arg1: *mut OH_Drawing_Typography,
        arg2: *mut OH_Drawing_Canvas,
        arg3: *mut OH_Drawing_Path,
        arg4: f64,
        arg5: f64,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyGetMaxWidth(arg1: *mut OH_Drawing_Typography) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetHeight(arg1: *mut OH_Drawing_Typography) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetLongestLine(arg1: *mut OH_Drawing_Typography) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetMinIntrinsicWidth(arg1: *mut OH_Drawing_Typography) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetMaxIntrinsicWidth(arg1: *mut OH_Drawing_Typography) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetAlphabeticBaseline(arg1: *mut OH_Drawing_Typography) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetIdeographicBaseline(arg1: *mut OH_Drawing_Typography) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyHandlerAddPlaceholder(
        arg1: *mut OH_Drawing_TypographyCreate,
        arg2: *mut OH_Drawing_PlaceholderSpan,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyDidExceedMaxLines(arg1: *mut OH_Drawing_Typography) -> bool;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetRectsForRange(
        arg1: *mut OH_Drawing_Typography,
        arg2: usize,
        arg3: usize,
        arg4: OH_Drawing_RectHeightStyle,
        arg5: OH_Drawing_RectWidthStyle,
    ) -> *mut OH_Drawing_TextBox;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetRectsForPlaceholders(
        arg1: *mut OH_Drawing_Typography,
    ) -> *mut OH_Drawing_TextBox;
}
extern "C" {
    pub fn OH_Drawing_GetLeftFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn OH_Drawing_GetRightFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn OH_Drawing_GetTopFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn OH_Drawing_GetBottomFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn OH_Drawing_GetTextDirectionFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OH_Drawing_GetSizeOfTextBox(arg1: *mut OH_Drawing_TextBox) -> usize;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetGlyphPositionAtCoordinate(
        arg1: *mut OH_Drawing_Typography,
        arg2: f64,
        arg3: f64,
    ) -> *mut OH_Drawing_PositionAndAffinity;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetGlyphPositionAtCoordinateWithCluster(
        arg1: *mut OH_Drawing_Typography,
        arg2: f64,
        arg3: f64,
    ) -> *mut OH_Drawing_PositionAndAffinity;
}
extern "C" {
    pub fn OH_Drawing_GetPositionFromPositionAndAffinity(
        arg1: *mut OH_Drawing_PositionAndAffinity,
    ) -> usize;
}
extern "C" {
    pub fn OH_Drawing_GetAffinityFromPositionAndAffinity(
        arg1: *mut OH_Drawing_PositionAndAffinity,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetWordBoundary(
        arg1: *mut OH_Drawing_Typography,
        arg2: usize,
    ) -> *mut OH_Drawing_Range;
}
extern "C" {
    pub fn OH_Drawing_GetStartFromRange(arg1: *mut OH_Drawing_Range) -> usize;
}
extern "C" {
    pub fn OH_Drawing_GetEndFromRange(arg1: *mut OH_Drawing_Range) -> usize;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetLineCount(arg1: *mut OH_Drawing_Typography) -> usize;
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleDecorationStyle(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleDecorationThicknessScale(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: f64,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleLetterSpacing(arg1: *mut OH_Drawing_TextStyle, arg2: f64);
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleWordSpacing(arg1: *mut OH_Drawing_TextStyle, arg2: f64);
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleHalfLeading(arg1: *mut OH_Drawing_TextStyle, arg2: bool);
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleEllipsis(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleEllipsisModal(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextBreakStrategy(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextWordBreakType(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextEllipsisModal(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyGetLineHeight(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetLineWidth(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetLineTextRange(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::std::os::raw::c_int,
        arg3: bool,
    ) -> *mut OH_Drawing_Range;
}
extern "C" {
    pub fn OH_Drawing_CreateFontDescriptor() -> *mut OH_Drawing_FontDescriptor;
}
extern "C" {
    pub fn OH_Drawing_DestroyFontDescriptor(arg1: *mut OH_Drawing_FontDescriptor);
}
extern "C" {
    pub fn OH_Drawing_CreateFontParser() -> *mut OH_Drawing_FontParser;
}
extern "C" {
    pub fn OH_Drawing_DestroyFontParser(arg1: *mut OH_Drawing_FontParser);
}
extern "C" {
    pub fn OH_Drawing_FontParserGetSystemFontList(
        arg1: *mut OH_Drawing_FontParser,
        arg2: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_Drawing_DestroySystemFontList(arg1: *mut *mut ::std::os::raw::c_char, arg2: usize);
}
extern "C" {
    pub fn OH_Drawing_FontParserGetFontByName(
        arg1: *mut OH_Drawing_FontParser,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut OH_Drawing_FontDescriptor;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetLineMetrics(
        arg1: *mut OH_Drawing_Typography,
    ) -> *mut OH_Drawing_LineMetrics;
}
extern "C" {
    pub fn OH_Drawing_LineMetricsGetSize(arg1: *mut OH_Drawing_LineMetrics) -> usize;
}
extern "C" {
    pub fn OH_Drawing_DestroyLineMetrics(arg1: *mut OH_Drawing_LineMetrics);
}
extern "C" {
    pub fn OH_Drawing_TypographyGetLineMetricsAt(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::std::os::raw::c_int,
        arg3: *mut OH_Drawing_LineMetrics,
    ) -> bool;
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextEllipsis(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextLocale(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextSplitRatio(arg1: *mut OH_Drawing_TypographyStyle, arg2: f32);
}
extern "C" {
    pub fn OH_Drawing_TypographyGetTextStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> *mut OH_Drawing_TextStyle;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetEffectiveAlignment(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OH_Drawing_TypographyIsLineUnlimited(arg1: *mut OH_Drawing_TypographyStyle) -> bool;
}
extern "C" {
    pub fn OH_Drawing_TypographyIsEllipsized(arg1: *mut OH_Drawing_TypographyStyle) -> bool;
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: *mut OH_Drawing_TextStyle,
    );
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetFontMetrics(
        arg1: *mut OH_Drawing_Typography,
        arg2: *mut OH_Drawing_TextStyle,
        arg3: *mut OH_Drawing_Font_Metrics,
    ) -> bool;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetLineInfo(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::std::os::raw::c_int,
        arg3: bool,
        arg4: bool,
        arg5: *mut OH_Drawing_LineMetrics,
    ) -> bool;
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextFontWeight(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextFontStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextFontFamily(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextFontSize(arg1: *mut OH_Drawing_TypographyStyle, arg2: f64);
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextFontHeight(arg1: *mut OH_Drawing_TypographyStyle, arg2: f64);
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextHalfLeading(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: bool,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextUseLineStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: bool,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextLineStyleFontWeight(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextLineStyleFontStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextLineStyleFontFamilies(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::std::os::raw::c_int,
        fontFamilies: *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextLineStyleFontSize(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: f64,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextLineStyleFontHeight(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: f64,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextLineStyleHalfLeading(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: bool,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextLineStyleSpacingScale(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: f64,
    );
}
extern "C" {
    pub fn OH_Drawing_SetTypographyTextLineStyleOnly(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: bool,
    );
}
extern "C" {
    pub fn OH_Drawing_CreateTextShadow() -> *mut OH_Drawing_TextShadow;
}
extern "C" {
    pub fn OH_Drawing_DestroyTextShadow(arg1: *mut OH_Drawing_TextShadow);
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetShadows(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> *mut OH_Drawing_TextShadow;
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetShadowCount(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OH_Drawing_TextStyleAddShadow(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *const OH_Drawing_TextShadow,
    );
}
extern "C" {
    pub fn OH_Drawing_TextStyleClearShadows(arg1: *mut OH_Drawing_TextStyle);
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetShadowWithIndex(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::std::os::raw::c_int,
    ) -> *mut OH_Drawing_TextShadow;
}
extern "C" {
    pub fn OH_Drawing_TypographySetIndents(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::std::os::raw::c_int,
        indents: *const f32,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyGetIndentsWithIndex(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn OH_Drawing_DestroyTextShadows(arg1: *mut OH_Drawing_TextShadow);
}
extern "C" {
    pub fn OH_Drawing_TypographyTextSetHeightBehavior(
        arg1: *mut OH_Drawing_TypographyStyle,
        heightMode: OH_Drawing_TextHeightBehavior,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyTextGetHeightBehavior(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> OH_Drawing_TextHeightBehavior;
}
extern "C" {
    pub fn OH_Drawing_TextStyleSetBackgroundRect(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *const OH_Drawing_RectStyle_Info,
        styleId: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyHandlerAddSymbol(
        arg1: *mut OH_Drawing_TypographyCreate,
        symbol: u32,
    );
}
extern "C" {
    pub fn OH_Drawing_TextStyleAddFontFeature(
        arg1: *mut OH_Drawing_TextStyle,
        tag: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn OH_Drawing_TextStyleAddFontVariation(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *const ::std::os::raw::c_char,
        arg3: f32,
    );
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetFontFeatures(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> *mut OH_Drawing_FontFeature;
}
extern "C" {
    pub fn OH_Drawing_TextStyleDestroyFontFeatures(
        arg1: *mut OH_Drawing_FontFeature,
        fontFeatureSize: usize,
    );
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetFontFeatureSize(arg1: *mut OH_Drawing_TextStyle) -> usize;
}
extern "C" {
    pub fn OH_Drawing_TextStyleClearFontFeature(arg1: *mut OH_Drawing_TextStyle);
}
extern "C" {
    pub fn OH_Drawing_TextStyleSetBaselineShift(arg1: *mut OH_Drawing_TextStyle, lineShift: f64);
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetBaselineShift(arg1: *mut OH_Drawing_TextStyle) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetColor(arg1: *mut OH_Drawing_TextStyle) -> u32;
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetDecorationStyle(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> OH_Drawing_TextDecorationStyle;
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetFontWeight(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> OH_Drawing_FontWeight;
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetFontStyle(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> OH_Drawing_FontStyle;
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetBaseline(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> OH_Drawing_TextBaseline;
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetFontFamilies(
        arg1: *mut OH_Drawing_TextStyle,
        num: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_Drawing_TextStyleDestroyFontFamilies(
        fontFamilies: *mut *mut ::std::os::raw::c_char,
        num: usize,
    );
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetFontSize(arg1: *mut OH_Drawing_TextStyle) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetLetterSpacing(arg1: *mut OH_Drawing_TextStyle) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetWordSpacing(arg1: *mut OH_Drawing_TextStyle) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetFontHeight(arg1: *mut OH_Drawing_TextStyle) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetHalfLeading(arg1: *mut OH_Drawing_TextStyle) -> bool;
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetLocale(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_Drawing_SetTextStyleFontStyleStruct(
        drawingTextStyle: *mut OH_Drawing_TextStyle,
        fontStyle: OH_Drawing_FontStyleStruct,
    );
}
extern "C" {
    pub fn OH_Drawing_TextStyleGetFontStyleStruct(
        drawingTextStyle: *mut OH_Drawing_TextStyle,
    ) -> OH_Drawing_FontStyleStruct;
}
extern "C" {
    pub fn OH_Drawing_SetTypographyStyleFontStyleStruct(
        drawingStyle: *mut OH_Drawing_TypographyStyle,
        fontStyle: OH_Drawing_FontStyleStruct,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyStyleGetFontStyleStruct(
        drawingStyle: *mut OH_Drawing_TypographyStyle,
    ) -> OH_Drawing_FontStyleStruct;
}
extern "C" {
    pub fn OH_Drawing_TextStyleIsEqual(
        style: *const OH_Drawing_TextStyle,
        comparedStyle: *const OH_Drawing_TextStyle,
    ) -> bool;
}
extern "C" {
    pub fn OH_Drawing_TextStyleIsEqualByFont(
        style: *const OH_Drawing_TextStyle,
        comparedStyle: *const OH_Drawing_TextStyle,
    ) -> bool;
}
extern "C" {
    pub fn OH_Drawing_TextStyleIsAttributeMatched(
        style: *const OH_Drawing_TextStyle,
        comparedStyle: *const OH_Drawing_TextStyle,
        textStyleType: OH_Drawing_TextStyleType,
    ) -> bool;
}
extern "C" {
    pub fn OH_Drawing_TextStyleSetPlaceholder(style: *mut OH_Drawing_TextStyle);
}
extern "C" {
    pub fn OH_Drawing_TextStyleIsPlaceholder(style: *mut OH_Drawing_TextStyle) -> bool;
}
extern "C" {
    pub fn OH_Drawing_TypographyStyleGetEffectiveAlignment(
        style: *mut OH_Drawing_TypographyStyle,
    ) -> OH_Drawing_TextAlign;
}
extern "C" {
    pub fn OH_Drawing_TypographyStyleIsHintEnabled(style: *mut OH_Drawing_TypographyStyle) -> bool;
}
extern "C" {
    pub fn OH_Drawing_GetSystemFontConfigInfo(
        arg1: *mut OH_Drawing_FontConfigInfoErrorCode,
    ) -> *mut OH_Drawing_FontConfigInfo;
}
extern "C" {
    pub fn OH_Drawing_DestroySystemFontConfigInfo(arg1: *mut OH_Drawing_FontConfigInfo);
}
extern "C" {
    pub fn OH_Drawing_SetTypographyStyleTextStrutStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: *mut OH_Drawing_StrutStyle,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyStyleDestroyStrutStyle(arg1: *mut OH_Drawing_StrutStyle);
}
extern "C" {
    pub fn OH_Drawing_TypographyStyleGetStrutStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> *mut OH_Drawing_StrutStyle;
}
extern "C" {
    pub fn OH_Drawing_TypographyStyleStrutStyleEquals(
        from: *mut OH_Drawing_StrutStyle,
        to: *mut OH_Drawing_StrutStyle,
    ) -> bool;
}
extern "C" {
    pub fn OH_Drawing_TypographyStyleSetHintsEnabled(
        style: *mut OH_Drawing_TypographyStyle,
        hintsEnabled: bool,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyGetLineFontMetrics(
        arg1: *mut OH_Drawing_Typography,
        lineNumber: usize,
        fontMetricsSize: *mut usize,
    ) -> *mut OH_Drawing_Font_Metrics;
}
extern "C" {
    pub fn OH_Drawing_TypographyDestroyLineFontMetrics(arg1: *mut OH_Drawing_Font_Metrics);
}
extern "C" {
    pub fn OH_Drawing_TypographyMarkDirty(arg1: *mut OH_Drawing_Typography);
}
extern "C" {
    pub fn OH_Drawing_TypographyGetUnresolvedGlyphsCount(arg1: *mut OH_Drawing_Typography) -> i32;
}
extern "C" {
    pub fn OH_Drawing_TypographyUpdateFontSize(
        arg1: *mut OH_Drawing_Typography,
        from: usize,
        to: usize,
        fontSize: f32,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyTextGetLineStyle(arg1: *mut OH_Drawing_TypographyStyle) -> bool;
}
extern "C" {
    pub fn OH_Drawing_TypographyTextlineStyleGetFontWeight(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> OH_Drawing_FontWeight;
}
extern "C" {
    pub fn OH_Drawing_TypographyTextlineStyleGetFontStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> OH_Drawing_FontStyle;
}
extern "C" {
    pub fn OH_Drawing_TypographyTextlineStyleGetFontFamilies(
        arg1: *mut OH_Drawing_TypographyStyle,
        num: *mut usize,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_Drawing_TypographyTextlineStyleDestroyFontFamilies(
        fontFamilies: *mut *mut ::std::os::raw::c_char,
        fontFamiliesNum: usize,
    );
}
extern "C" {
    pub fn OH_Drawing_TypographyTextlineStyleGetFontSize(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyTextlineStyleGetHeightScale(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyTextlineStyleGetHeightOnly(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> bool;
}
extern "C" {
    pub fn OH_Drawing_TypographyTextlineStyleGetHalfLeading(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> bool;
}
extern "C" {
    pub fn OH_Drawing_TypographyTextlineStyleGetSpacingScale(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> f64;
}
extern "C" {
    pub fn OH_Drawing_TypographyTextlineGetStyleOnly(arg1: *mut OH_Drawing_TypographyStyle)
        -> bool;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetTextAlign(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> OH_Drawing_TextAlign;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetTextDirection(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> OH_Drawing_TextDirection;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetTextMaxLines(arg1: *mut OH_Drawing_TypographyStyle) -> usize;
}
extern "C" {
    pub fn OH_Drawing_TypographyGetTextEllipsis(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_Drawing_TypographyDestroyEllipsis(ellipsis: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn OH_Drawing_TypographyStyleEquals(
        from: *mut OH_Drawing_TypographyStyle,
        to: *mut OH_Drawing_TypographyStyle,
    ) -> bool;
}
extern "C" {
    pub fn OH_Drawing_TypographyDestroyTextBox(arg1: *mut OH_Drawing_TextBox);
}
extern "C" {
    pub fn OH_Drawing_SetTextShadow(
        shadow: *mut OH_Drawing_TextShadow,
        color: u32,
        offset: *mut OH_Drawing_Point,
        blurRadius: f64,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_StyledString {
    _unused: [u8; 0],
}
extern "C" {
    pub fn OH_ArkUI_StyledString_Create(
        style: *mut OH_Drawing_TypographyStyle,
        collection: *mut OH_Drawing_FontCollection,
    ) -> *mut ArkUI_StyledString;
}
extern "C" {
    pub fn OH_ArkUI_StyledString_Destroy(handle: *mut ArkUI_StyledString);
}
extern "C" {
    pub fn OH_ArkUI_StyledString_PushTextStyle(
        handle: *mut ArkUI_StyledString,
        style: *mut OH_Drawing_TextStyle,
    );
}
extern "C" {
    pub fn OH_ArkUI_StyledString_AddText(
        handle: *mut ArkUI_StyledString,
        content: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn OH_ArkUI_StyledString_PopTextStyle(handle: *mut ArkUI_StyledString);
}
extern "C" {
    pub fn OH_ArkUI_StyledString_CreateTypography(
        handle: *mut ArkUI_StyledString,
    ) -> *mut OH_Drawing_Typography;
}
extern "C" {
    pub fn OH_ArkUI_StyledString_AddPlaceholder(
        handle: *mut ArkUI_StyledString,
        placeholder: *mut OH_Drawing_PlaceholderSpan,
    );
}
