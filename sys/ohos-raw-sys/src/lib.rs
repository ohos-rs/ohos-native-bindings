/* automatically generated by rust-bindgen 0.65.1 */

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]

use napi_sys_ohos::*;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawDir {
    _unused: [u8; 0],
}
extern "C" {
    pub fn OH_ResourceManager_GetRawFileName(
        rawDir: *mut RawDir,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OH_ResourceManager_GetRawFileCount(rawDir: *mut RawDir) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OH_ResourceManager_CloseRawDir(rawDir: *mut RawDir);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawFile {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawFile64 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawFileDescriptor {
    pub fd: ::std::os::raw::c_int,
    pub start: ::std::os::raw::c_long,
    pub length: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawFileDescriptor64 {
    pub fd: ::std::os::raw::c_int,
    pub start: i64,
    pub length: i64,
}
extern "C" {
    pub fn OH_ResourceManager_ReadRawFile(
        rawFile: *const RawFile,
        buf: *mut ::std::os::raw::c_void,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OH_ResourceManager_SeekRawFile(
        rawFile: *const RawFile,
        offset: ::std::os::raw::c_long,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OH_ResourceManager_GetRawFileSize(rawFile: *mut RawFile) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn OH_ResourceManager_GetRawFileRemainingLength(
        rawFile: *const RawFile,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn OH_ResourceManager_CloseRawFile(rawFile: *mut RawFile);
}
extern "C" {
    pub fn OH_ResourceManager_GetRawFileOffset(rawFile: *const RawFile) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn OH_ResourceManager_GetRawFileDescriptorData(
        rawFile: *const RawFile,
        descriptor: *mut RawFileDescriptor,
    ) -> bool;
}
extern "C" {
    pub fn OH_ResourceManager_ReleaseRawFileDescriptorData(
        descriptor: *const RawFileDescriptor,
    ) -> bool;
}
extern "C" {
    pub fn OH_ResourceManager_ReadRawFile64(
        rawFile: *const RawFile64,
        buf: *mut ::std::os::raw::c_void,
        length: i64,
    ) -> i64;
}
extern "C" {
    pub fn OH_ResourceManager_SeekRawFile64(
        rawFile: *const RawFile64,
        offset: i64,
        whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn OH_ResourceManager_GetRawFileSize64(rawFile: *mut RawFile64) -> i64;
}
extern "C" {
    pub fn OH_ResourceManager_GetRawFileRemainingLength64(rawFile: *const RawFile64) -> i64;
}
extern "C" {
    pub fn OH_ResourceManager_CloseRawFile64(rawFile: *mut RawFile64);
}
extern "C" {
    pub fn OH_ResourceManager_GetRawFileOffset64(rawFile: *const RawFile64) -> i64;
}
extern "C" {
    pub fn OH_ResourceManager_GetRawFileDescriptor64(
        rawFile: *const RawFile64,
        descriptor: *mut RawFileDescriptor64,
    ) -> bool;
}
extern "C" {
    pub fn OH_ResourceManager_ReleaseRawFileDescriptor64(
        descriptor: *const RawFileDescriptor64,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NativeResourceManager {
    _unused: [u8; 0],
}
extern "C" {
    pub fn OH_ResourceManager_InitNativeResourceManager(
        env: napi_env,
        jsResMgr: napi_value,
    ) -> *mut NativeResourceManager;
}
extern "C" {
    pub fn OH_ResourceManager_ReleaseNativeResourceManager(resMgr: *mut NativeResourceManager);
}
extern "C" {
    pub fn OH_ResourceManager_OpenRawDir(
        mgr: *const NativeResourceManager,
        dirName: *const ::std::os::raw::c_char,
    ) -> *mut RawDir;
}
extern "C" {
    pub fn OH_ResourceManager_OpenRawFile(
        mgr: *const NativeResourceManager,
        fileName: *const ::std::os::raw::c_char,
    ) -> *mut RawFile;
}
extern "C" {
    pub fn OH_ResourceManager_OpenRawFile64(
        mgr: *const NativeResourceManager,
        fileName: *const ::std::os::raw::c_char,
    ) -> *mut RawFile64;
}
extern "C" {
    pub fn OH_ResourceManager_IsRawDir(
        mgr: *const NativeResourceManager,
        path: *const ::std::os::raw::c_char,
    ) -> bool;
}
