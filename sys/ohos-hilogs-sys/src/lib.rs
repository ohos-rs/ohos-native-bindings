/* automatically generated by rust-bindgen 0.65.1 */

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]

pub const __GNUC_VA_LIST: u32 = 1;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const LOG_DOMAIN: u32 = 0;
pub type va_list = [u64; 4usize];
pub type __gnuc_va_list = [u64; 4usize];
#[doc = " Third-party application logs"]
pub const LogType_LOG_APP: LogType = 0;
#[doc = " @brief Enumerates log types.\n\n Currently, <b>LOG_APP</b> is available. \\n\n\n @since 8"]
pub type LogType = ::std::os::raw::c_uint;
#[doc = " Debug level to be used by {@link OH_LOG_DEBUG}"]
pub const LogLevel_LOG_DEBUG: LogLevel = 3;
#[doc = " Informational level to be used by {@link OH_LOG_INFO}"]
pub const LogLevel_LOG_INFO: LogLevel = 4;
#[doc = " Warning level to be used by {@link OH_LOG_WARN}"]
pub const LogLevel_LOG_WARN: LogLevel = 5;
#[doc = " Error level to be used by {@link OH_LOG_ERROR}"]
pub const LogLevel_LOG_ERROR: LogLevel = 6;
#[doc = " Fatal level to be used by {@link OH_LOG_FATAL}"]
pub const LogLevel_LOG_FATAL: LogLevel = 7;
#[doc = " @brief Enumerates log levels.\n\n You are advised to select log levels based on their respective usage scenarios:\\n\n <ul><li><b>DEBUG</b>: used for debugging and disabled from commercial releases</li> \\n\n <li><b>INFO</b>: used for logging important system running status and steps in key processes</li> \\n\n <li><b>WARN</b>: used for logging unexpected exceptions that have little impact on user experience and can\n automatically recover. Logs at this level are generally output when such exceptions are detected and\n captured.</li> \\n\n <li><b>ERROR</b>: used for logging malfunction that affects user experience and cannot automatically\n recover</li>\\n\n <li><b>FATAL</b>: used for logging major exceptions that have severely affected user experience and should\n not occur.</li></ul> \\n\n\n @since 8"]
pub type LogLevel = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " @brief Outputs logs.\n\n You can use this function to output logs based on the specified log type, log level, service domain, log tag,\n and variable parameters determined by the format specifier and privacy identifier in the printf format.\n\n @param type Indicates the log type. The type for third-party applications is defined by {@link LOG_APP}.\n @param level Indicates the log level, which can be <b>LOG_DEBUG</b>, <b>LOG_INFO</b>, <b>LOG_WARN</b>,\n <b>LOG_ERROR</b>, and <b>LOG_FATAL</b>.\n @param domain Indicates the service domain of logs. Its value is a hexadecimal integer ranging from 0x0 to 0xFFFF.\n @param tag Indicates the log tag, which is a string used to identify the class, file, or service behavior.\n @param fmt Indicates the format string, which is an enhancement of a printf format string and supports the privacy\n identifier. Specifically, {public} or {private} is added between the % character and the format specifier\n in each parameter. \\n\n @param ... Indicates a list of parameters. The number and type of parameters must map onto the format specifiers\n in the format string.\n @return Returns <b>0</b> or a larger value if the operation is successful; returns a value smaller\n than <b>0</b> otherwise.\n @since 8"]
    pub fn OH_LOG_Print(
        type_: LogType,
        level: LogLevel,
        domain: ::std::os::raw::c_uint,
        tag: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Checks whether logs of the specified service domain, log tag, and log level can be output.\n\n @param domain Indicates the service domain of logs.\n @param tag Indicates the log tag.\n @param level Indicates the log level.\n @return Returns <b>true</b> if the specified logs can be output; returns <b>false</b> otherwise.\n @since 8"]
    pub fn OH_LOG_IsLoggable(
        domain: ::std::os::raw::c_uint,
        tag: *const ::std::os::raw::c_char,
        level: LogLevel,
    ) -> bool;
}
#[doc = " @brief Defines the function pointer type for the user-defined log processing function.\n\n @param type Indicates the log type. The type for third-party applications is defined by {@link LOG_APP}.\n @param level Indicates the log level, which can be <b>LOG_DEBUG</b>, <b>LOG_INFO</b>, <b>LOG_WARN</b>,\n <b>LOG_ERROR</b>, and <b>LOG_FATAL</b>.\n @param domain Indicates the service domain of logs. Its value is a hexadecimal integer ranging from 0x0 to 0xFFFF.\n @param tag Indicates the log tag, which is a string used to identify the class, file, or service behavior.\n @param msg Indicates the log message itself, which is a formatted log string.\n @since 11"]
pub type LogCallback = ::std::option::Option<
    unsafe extern "C" fn(
        type_: LogType,
        level: LogLevel,
        domain: ::std::os::raw::c_uint,
        tag: *const ::std::os::raw::c_char,
        msg: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    #[doc = " @brief Set the user-defined log processing function.\n\n After calling this function, the callback function implemented by the user can receive all hilogs of the\n current process.\n Note that it will not change the default behavior of hilog logs of the current process, no matter whether this\n interface is called or not. \\n\n\n @param callback Indicates the callback function implemented by the user. If you do not need to process hilog logs,\n you can transfer a null pointer.\n @since 11"]
    pub fn OH_LOG_SetCallback(callback: LogCallback);
}
