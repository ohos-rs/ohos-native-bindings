/* automatically generated by rust-bindgen 0.65.1 */

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(clippy::missing_safety_doc)]

#[doc = " Acceleration sensor.\n @since 11"]
pub const Sensor_Type_SENSOR_TYPE_ACCELEROMETER: Sensor_Type = 1;
#[doc = " Gyroscope sensor.\n @since 11"]
pub const Sensor_Type_SENSOR_TYPE_GYROSCOPE: Sensor_Type = 2;
#[doc = " Ambient light sensor.\n @since 11"]
pub const Sensor_Type_SENSOR_TYPE_AMBIENT_LIGHT: Sensor_Type = 5;
#[doc = " Magnetic field sensor.\n @since 11"]
pub const Sensor_Type_SENSOR_TYPE_MAGNETIC_FIELD: Sensor_Type = 6;
#[doc = " Barometer sensor.\n @since 11"]
pub const Sensor_Type_SENSOR_TYPE_BAROMETER: Sensor_Type = 8;
#[doc = " Hall effect sensor.\n @since 11"]
pub const Sensor_Type_SENSOR_TYPE_HALL: Sensor_Type = 10;
#[doc = " Proximity sensor.\n @since 11"]
pub const Sensor_Type_SENSOR_TYPE_PROXIMITY: Sensor_Type = 12;
#[doc = " Orientation sensor.\n @since 11"]
pub const Sensor_Type_SENSOR_TYPE_ORIENTATION: Sensor_Type = 256;
#[doc = " Gravity sensor.\n @since 11"]
pub const Sensor_Type_SENSOR_TYPE_GRAVITY: Sensor_Type = 257;
#[doc = " Linear acceleration sensor.\n @since 13"]
pub const Sensor_Type_SENSOR_TYPE_LINEAR_ACCELERATION: Sensor_Type = 258;
#[doc = " Rotation vector sensor.\n @since 11"]
pub const Sensor_Type_SENSOR_TYPE_ROTATION_VECTOR: Sensor_Type = 259;
#[doc = " Game rotation vector sensor.\n @since 13"]
pub const Sensor_Type_SENSOR_TYPE_GAME_ROTATION_VECTOR: Sensor_Type = 262;
#[doc = " Pedometer detection sensor.\n @since 11"]
pub const Sensor_Type_SENSOR_TYPE_PEDOMETER_DETECTION: Sensor_Type = 265;
#[doc = " Pedometer sensor.\n @since 11"]
pub const Sensor_Type_SENSOR_TYPE_PEDOMETER: Sensor_Type = 266;
#[doc = " Heart rate sensor.\n @since 11"]
pub const Sensor_Type_SENSOR_TYPE_HEART_RATE: Sensor_Type = 278;
#[doc = " @brief Enumerates the sensor types.\n\n @since 11"]
pub type Sensor_Type = ::std::os::raw::c_uint;
#[doc = " @error The operation is successful.\n @since 11"]
pub const Sensor_Result_SENSOR_SUCCESS: Sensor_Result = 0;
#[doc = " @error Permission verification failed.\n @since 11"]
pub const Sensor_Result_SENSOR_PERMISSION_DENIED: Sensor_Result = 201;
#[doc = " @error Parameter check failed. For example, a mandatory parameter is not passed in,\n or the parameter type passed in is incorrect.\n @since 11"]
pub const Sensor_Result_SENSOR_PARAMETER_ERROR: Sensor_Result = 401;
#[doc = " @error The sensor service is abnormal.\n @since 11"]
pub const Sensor_Result_SENSOR_SERVICE_EXCEPTION: Sensor_Result = 14500101;
#[doc = " @brief Enumerates the sensor result codes.\n\n @since 11"]
pub type Sensor_Result = ::std::os::raw::c_uint;
#[doc = " The sensor data is unreliable. It is possible that the sensor does not contact with the device to measure.\n @since 11"]
pub const Sensor_Accuracy_SENSOR_ACCURACY_UNRELIABLE: Sensor_Accuracy = 0;
#[doc = " The sensor data is at a low accuracy level. The data must be calibrated based on\n the environment before being used.\n @since 11"]
pub const Sensor_Accuracy_SENSOR_ACCURACY_LOW: Sensor_Accuracy = 1;
#[doc = " The sensor data is at a medium accuracy level. You are advised to calibrate the data\n based on the environment before using it.\n @since 11"]
pub const Sensor_Accuracy_SENSOR_ACCURACY_MEDIUM: Sensor_Accuracy = 2;
#[doc = " The sensor data is at a high accuracy level. The data can be used directly.\n @since 11"]
pub const Sensor_Accuracy_SENSOR_ACCURACY_HIGH: Sensor_Accuracy = 3;
#[doc = " @brief Enumerates the accuracy levels of data reported by a sensor.\n\n @since 11"]
pub type Sensor_Accuracy = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sensor_Info {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " @brief Creates an array of {@link Sensor_Info} instances with the given number.\n\n @param count - Number of {@link Sensor_Info} instances to create.\n @return Returns the double pointer to the array of {@link Sensor_Info} instances\n if the operation is successful;\n returns <b>NULL</b> otherwise.\n @since 11"]
    pub fn OH_Sensor_CreateInfos(count: u32) -> *mut *mut Sensor_Info;
}
extern "C" {
    #[doc = " @brief Destroys an array of {@link Sensor_Info} instances and reclaims memory.\n\n @param sensors - Double pointer to the array of {@link Sensor_Info} instances.\n @param count - Number of {@link Sensor_Info} instances to destroy.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_Sensor_DestroyInfos(sensors: *mut *mut Sensor_Info, count: u32) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the sensor name.\n\n @param sensor - Pointer to the sensor information.\n @param sensorName - Pointer to the sensor name.\n @param length - Pointer to the length, in bytes.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorInfo_GetName(
        sensor: *mut Sensor_Info,
        sensorName: *mut ::std::os::raw::c_char,
        length: *mut u32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the sensor's vendor name.\n\n @param sensor - Pointer to the sensor information.\n @param vendorName - Pointer to the vendor name.\n @param length - Pointer to the length, in bytes.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorInfo_GetVendorName(
        sensor: *mut Sensor_Info,
        vendorName: *mut ::std::os::raw::c_char,
        length: *mut u32,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the sensor type.\n\n @param sensor - Pointer to the sensor information.\n @param sensorType - Pointer to the sensor type.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorInfo_GetType(sensor: *mut Sensor_Info, sensorType: *mut Sensor_Type) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the sensor resolution.\n\n @param sensor - Pointer to the sensor information.\n @param resolution - Pointer to the sensor resolution.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorInfo_GetResolution(sensor: *mut Sensor_Info, resolution: *mut f32) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the minimum data reporting interval of a sensor.\n\n @param sensor - Pointer to the sensor information.\n @param minSamplingInterval - Pointer to the minimum data reporting interval, in nanoseconds.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorInfo_GetMinSamplingInterval(
        sensor: *mut Sensor_Info,
        minSamplingInterval: *mut i64,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the maximum data reporting interval of a sensor.\n\n @param sensor - Pointer to the sensor information.\n @param maxSamplingInterval - Pointer to the maximum data reporting interval, in nanoseconds.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorInfo_GetMaxSamplingInterval(
        sensor: *mut Sensor_Info,
        maxSamplingInterval: *mut i64,
    ) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sensor_Event {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " @brief Obtains the sensor type.\n\n @param sensorEvent - Pointer to the sensor data information.\n @param sensorType - Pointer to the sensor type.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorEvent_GetType(
        sensorEvent: *mut Sensor_Event,
        sensorType: *mut Sensor_Type,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the timestamp of sensor data.\n\n @param sensorEvent - Pointer to the sensor data information.\n @param timestamp - Pointer to the timestamp.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorEvent_GetTimestamp(sensorEvent: *mut Sensor_Event, timestamp: *mut i64) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the accuracy of sensor data.\n\n @param sensorEvent - Pointer to the sensor data information.\n @param accuracy - Pointer to the accuracy.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorEvent_GetAccuracy(
        sensorEvent: *mut Sensor_Event,
        accuracy: *mut Sensor_Accuracy,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains sensor data. The data length and content depend on the sensor type.\n The format of the sensor data reported is as follows:\n SENSOR_TYPE_ACCELEROMETER: data[0], data[1], and data[2], indicating the acceleration around\n the x, y, and z axes of the device, respectively, in m/s2.\n SENSOR_TYPE_GYROSCOPE: data[0], data[1], and data[2], indicating the angular velocity of rotation around\n  the x, y, and z axes of the device, respectively, in rad/s.\n SENSOR_TYPE_AMBIENT_LIGHT: data[0], indicating the ambient light intensity, in lux. Since api version 12,\n two additional data will be returned, where data[1] indicating the color temperature, in kelvin; data[2]\n indicating the infrared luminance, in cd/m2.\n SENSOR_TYPE_MAGNETIC_FIELD: data[0], data[1], and data[2], indicating the magnetic field strength around\n the x, y, and z axes of the device, respectively, in μT.\n SENSOR_TYPE_BAROMETER: data[0], indicating the atmospheric pressure, in hPa.\n SENSOR_TYPE_HALL: data[0], indicating the opening/closing state of the flip cover. The value <b>0</b> means that\n the flip cover is opened, and a value greater than <b>0</b> means that the flip cover is closed.\n SENSOR_TYPE_PROXIMITY: data[0], indicates the approaching state. The value <b>0</b> means the two objects are close\n to each other, and a value greater than <b>0</b> means that they are far away from each other.\n SENSOR_TYPE_ORIENTATION: data[0], data[1], and data[2], indicating the rotation angles of a device around\n the z, x, and y axes, respectively, in degree.\n SENSOR_TYPE_GRAVITY: data[0], data[1], and data[2], indicating the gravitational acceleration around\n the x, y, and z axes of a device, respectively, in m/s2.\n SENSOR_TYPE_ROTATION_VECTOR: data[0], data[1] and data[2], indicating the rotation angles of a device around\n the x, y, and z axes, respectively, in degree. data[3] indicates the rotation vector.\n SENSOR_TYPE_PEDOMETER_DETECTION: data[0], indicating the pedometer detection status.\n The value <b>1</b> means that the number of detected steps changes.\n SENSOR_TYPE_PEDOMETER: data[0], indicating the number of steps a user has walked.\n SENSOR_TYPE_HEART_RATE: data[0], indicating the heart rate value.\n SENSOR_TYPE_LINEAR_ACCELERATION: Supported from api version 13. data[0], data[1], and data[2], indicating the\n linear acceleration around the x, y, and z axes of the device, respectively, in m/s2.\n SENSOR_TYPE_GAME_ROTATION_VECTOR: Supported from api version 13. data[0], data[1] and data[2], indicating the\n rotation angles of a device around the x, y, and z axes, respectively, in degree. data[3] indicates the rotation\n vector.\n\n @param sensorEvent - Pointer to the sensor data information.\n @param data - Double pointer to the sensor data.\n @param length - Pointer to the array length.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorEvent_GetData(
        sensorEvent: *mut Sensor_Event,
        data: *mut *mut f32,
        length: *mut u32,
    ) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sensor_SubscriptionId {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " @brief Creates a {@link Sensor_SubscriptionId} instance.\n\n @return Returns the pointer to the {@link Sensor_SubscriptionId} instance if the operation is successful;\n returns <b>NULL</b> otherwise.\n @since 11"]
    pub fn OH_Sensor_CreateSubscriptionId() -> *mut Sensor_SubscriptionId;
}
extern "C" {
    #[doc = " @brief Destroys a {@link Sensor_SubscriptionId} instance and reclaims memory.\n\n @param id - Pointer to the {@link Sensor_SubscriptionId} instance.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_Sensor_DestroySubscriptionId(id: *mut Sensor_SubscriptionId) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the sensor type.\n\n @param id - Pointer to the sensor subscription ID.\n @param sensorType - Pointer to the sensor type.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorSubscriptionId_GetType(
        id: *mut Sensor_SubscriptionId,
        sensorType: *mut Sensor_Type,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Sets the sensor type.\n\n @param id - Pointer to the sensor subscription ID.\n @param sensorType - Sensor type to set.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorSubscriptionId_SetType(
        id: *mut Sensor_SubscriptionId,
        sensorType: Sensor_Type,
    ) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sensor_SubscriptionAttribute {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " @brief Creates a {@link Sensor_SubscriptionAttribute} instance.\n\n @return Returns the pointer to the {@link Sensor_SubscriptionAttribute} instance if the operation is successful;\n returns <b>NULL</b> otherwise.\n @since 11"]
    pub fn OH_Sensor_CreateSubscriptionAttribute() -> *mut Sensor_SubscriptionAttribute;
}
extern "C" {
    #[doc = " @brief Destroys a {@link Sensor_SubscriptionAttribute} instance and reclaims memory.\n\n @param attribute - Pointer to the {@link Sensor_SubscriptionAttribute} instance.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_Sensor_DestroySubscriptionAttribute(
        attribute: *mut Sensor_SubscriptionAttribute,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Sets the sensor data reporting interval.\n\n @param attribute - Pointer to the sensor subscription attribute.\n @param samplingInterval - Data reporting interval to set, in nanoseconds.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorSubscriptionAttribute_SetSamplingInterval(
        attribute: *mut Sensor_SubscriptionAttribute,
        samplingInterval: i64,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the sensor data reporting interval.\n\n @param attribute - Pointer to the sensor subscription attribute.\n @param samplingInterval - Pointer to the data reporting interval, in nanoseconds.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorSubscriptionAttribute_GetSamplingInterval(
        attribute: *mut Sensor_SubscriptionAttribute,
        samplingInterval: *mut i64,
    ) -> i32;
}
#[doc = " @brief Defines the callback function used to report sensor data.\n @since 11"]
pub type Sensor_EventCallback =
    ::std::option::Option<unsafe extern "C" fn(event: *mut Sensor_Event)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sensor_Subscriber {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " @brief Creates a {@link Sensor_Subscriber} instance.\n\n @return Returns the pointer to the {@link Sensor_Subscriber} instance\n if the operation is successful; returns <b>NULL</b> otherwise.\n @since 11"]
    pub fn OH_Sensor_CreateSubscriber() -> *mut Sensor_Subscriber;
}
extern "C" {
    #[doc = " @brief Destroys a {@link Sensor_Subscriber} instance and reclaims memory.\n\n @param subscriber - Pointer to the {@link Sensor_Subscriber} instance.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_Sensor_DestroySubscriber(subscriber: *mut Sensor_Subscriber) -> i32;
}
extern "C" {
    #[doc = " @brief Sets a callback function to report sensor data.\n\n @param subscriber - Pointer to the sensor subscriber information.\n @param callback - Callback function to set.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorSubscriber_SetCallback(
        subscriber: *mut Sensor_Subscriber,
        callback: Sensor_EventCallback,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains the callback function used to report sensor data.\n\n @param subscriber - Pointer to the sensor subscriber information.\n @param callback - Pointer to the callback function.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful;\n returns an error code defined in {@link Sensor_Result} otherwise.\n @since 11"]
    pub fn OH_SensorSubscriber_GetCallback(
        subscriber: *mut Sensor_Subscriber,
        callback: *mut Sensor_EventCallback,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Obtains information about all sensors on the device.\n\n @param infos - Double pointer to the information about all sensors on the device.\n For details, see {@link Sensor_Info}.\n @param count - Pointer to the number of sensors on the device.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful; returns the following error code otherwise.\n {@link SENSOR_PARAMETER_ERROR} Parameter check failed. For example, the parameter is invalid,\n or the parameter type passed in is incorrect.\\n\n {@link SENSOR_SERVICE_EXCEPTION} The sensor service is abnormal.\\n\n\n @since 11"]
    pub fn OH_Sensor_GetInfos(infos: *mut *mut Sensor_Info, count: *mut u32) -> Sensor_Result;
}
extern "C" {
    #[doc = " @brief Subscribes to sensor data. The system will report sensor data to the subscriber at the specified frequency.\n If you need to apply for the ohos.permission.ACCELEROMETER permission when subscribing to the accelerometer sensor,\n you need to apply for the ohos.permission.GYROSCOPE permission when subscribing to the gyroscope sensor, and you need\n to apply for the ohos.permission.ACTIVITY_MOTION permission when subscribing to the pedometer related sensor. Apply\n for ohos.permission.READ_HEALTH_DATA permission when subscribing to health-related sensors, such as heart rate\n sensors, otherwise the subscription fails. Other sensors do not require permissions.\n\n @param id - Pointer to the sensor subscription ID. For details, see {@link Sensor_SubscriptionId}.\n @param attribute - Pointer to the subscription attribute, which is used to specify the data reporting frequency.\n For details, see {@link Sensor_SubscriptionAttribute}.\n @param subscriber - Pointer to the subscriber information, which is used to specify the callback function for\n reporting the sensor data. For details, see {@link Sensor_Subscriber}.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful; returns the following error code otherwise.\n {@link SENSOR_PERMISSION_DENIED} Permission verification failed.\\n\n {@link SENSOR_PARAMETER_ERROR} Parameter check failed. For example, the parameter is invalid,\n or the parameter type passed in is incorrect.\\n\n {@link SENSOR_SERVICE_EXCEPTION} The sensor service is abnormal.\\n\n @permission ohos.permission.ACCELEROMETER or ohos.permission.GYROSCOPE or\n             ohos.permission.ACTIVITY_MOTION or ohos.permission.READ_HEALTH_DATA\n @since 11"]
    pub fn OH_Sensor_Subscribe(
        id: *const Sensor_SubscriptionId,
        attribute: *const Sensor_SubscriptionAttribute,
        subscriber: *const Sensor_Subscriber,
    ) -> Sensor_Result;
}
extern "C" {
    #[doc = " @brief Unsubscribes from sensor data.\n If you need to apply for the ohos.permission.ACCELEROMETER permission to unsubscribe from the accelerometer sensor,\n you need to request the ohos.permission.GYROSCOPE permission to unsubscribe from the gyroscope sensor, and you need\n to request the ohos.permission.ACTIVITY_MOTION permission to unsubscribe from the pedometer-related sensor. When you\n unsubscribe from health-related sensors, such as heart rate sensors, apply for ohos.permission.READ_HEALTH_DATA\n permissions, otherwise the subscription will fail. Other sensors do not require permissions.\n\n @param id - Pointer to the sensor subscription ID. For details, see {@link Sensor_SubscriptionId}.\n @param subscriber - Pointer to the subscriber information, which is used to specify the callback function for\n reporting the sensor data. For details, see {@link Sensor_Subscriber}.\n @return Returns <b>SENSOR_SUCCESS</b> if the operation is successful; returns the following error code otherwise.\n {@link SENSOR_PERMISSION_DENIED} Permission verification failed.\\n\n {@link SENSOR_PARAMETER_ERROR} Parameter check failed. For example, the parameter is invalid,\n or the parameter type passed in is incorrect.\\n\n {@link SENSOR_SERVICE_EXCEPTION} The sensor service is abnormal.\\n\n @permission ohos.permission.ACCELEROMETER or ohos.permission.GYROSCOPE or\n             ohos.permission.ACTIVITY_MOTION or ohos.permission.READ_HEALTH_DATA\n\n @since 11"]
    pub fn OH_Sensor_Unsubscribe(
        id: *const Sensor_SubscriptionId,
        subscriber: *const Sensor_Subscriber,
    ) -> Sensor_Result;
}
