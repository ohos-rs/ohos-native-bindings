/* automatically generated by rust-bindgen 0.65.1 */


#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(clippy::missing_safety_doc)]


#[doc = "< Vibration is used for unknown, lowest priority"]
pub const Vibrator_Usage_VIBRATOR_USAGE_UNKNOWN: Vibrator_Usage = 0;
#[doc = "< Vibration is used for alarm"]
pub const Vibrator_Usage_VIBRATOR_USAGE_ALARM: Vibrator_Usage = 1;
#[doc = "< Vibration is used for ring"]
pub const Vibrator_Usage_VIBRATOR_USAGE_RING: Vibrator_Usage = 2;
#[doc = "< Vibration is used for notification"]
pub const Vibrator_Usage_VIBRATOR_USAGE_NOTIFICATION: Vibrator_Usage = 3;
#[doc = "< Vibration is used for communication"]
pub const Vibrator_Usage_VIBRATOR_USAGE_COMMUNICATION: Vibrator_Usage = 4;
#[doc = "< Vibration is used for touch"]
pub const Vibrator_Usage_VIBRATOR_USAGE_TOUCH: Vibrator_Usage = 5;
#[doc = "< Vibration is used for media"]
pub const Vibrator_Usage_VIBRATOR_USAGE_MEDIA: Vibrator_Usage = 6;
#[doc = "< Vibration is used for physical feedback"]
pub const Vibrator_Usage_VIBRATOR_USAGE_PHYSICAL_FEEDBACK: Vibrator_Usage = 7;
#[doc = "< Vibration is used for simulate reality"]
pub const Vibrator_Usage_VIBRATOR_USAGE_SIMULATED_REALITY: Vibrator_Usage = 8;
pub const Vibrator_Usage_VIBRATOR_USAGE_MAX: Vibrator_Usage = 9;
#[doc = " @brief Enumerates vibration usages scenarios.\n\n @since 11"]
pub type Vibrator_Usage = ::std::os::raw::c_uint;
#[doc = " @brief Defines the vibrator attribute.\n\n @since 11"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vibrator_Attribute {
    pub vibratorId: i32,
    pub usage: Vibrator_Usage,
}
#[doc = " @brief Defines the vibration file description.\n\n @since 11"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vibrator_FileDescription {
    pub fd: i32,
    pub offset: i64,
    pub length: i64,
}
extern "C" {
    #[doc = " @brief Controls the vibrator to vibrate continuously for a given duration.\n\n @param duration - Vibration duration, in milliseconds.\n @param attribute - Vibration attribute. For details, see {@link Vibrator_Attribute}.\n @return Returns <b>0</b> if the operation is successful; returns the following error code otherwise.\n {@link PERMISSION_DENIED} Permission verification failed.\\n\n {@link PARAMETER_ERROR} Parameter check failed. For example, the parameter is invalid,\n or the parameter type passed in is incorrect.\\n\n {@link UNSUPPORTED} The API is not supported on the device. The device supports the corresponding SysCap,\n but does not support certain APIs in this SysCap.\\n\n {@link DEVICE_OPERATION_FAILED} The operation on the device failed.\\n\n @permission ohos.permission.VIBRATE\n\n @since 11"]
    pub fn OH_Vibrator_PlayVibration(duration: i32, attribute: Vibrator_Attribute) -> i32;
}
extern "C" {
    #[doc = " @brief Controls the vibrator to vibrate with the custom sequence.\n\n @param fileDescription - File descriptor of the custom vibration effect.\n For details, see {@link Vibrator_FileDescription}.\n @param vibrateAttribute - Vibration attribute. For details, see {@link Vibrator_Attribute}.\n @return Returns <b>0</b> if the operation is successful; returns the following error code otherwise.\n {@link PERMISSION_DENIED} Permission verification failed.\\n\n {@link PARAMETER_ERROR} Parameter check failed. For example, the parameter is invalid,\n or the parameter type passed in is incorrect.\\n\n {@link UNSUPPORTED} The API is not supported on the device. The device supports the corresponding SysCap,\n but does not support certain APIs in this SysCap.\\n\n {@link DEVICE_OPERATION_FAILED} The operation on the device failed.\\n\n @permission ohos.permission.VIBRATE\n\n @since 11"]
    pub fn OH_Vibrator_PlayVibrationCustom(
        fileDescription: Vibrator_FileDescription,
        vibrateAttribute: Vibrator_Attribute,
    ) -> i32;
}
extern "C" {
    #[doc = " @brief Stop the motor vibration according to the input mode.\n\n @permission ohos.permission.VIBRATE\n @return Returns <b>0</b> if the operation is successful; returns the following error code otherwise.\n {@link PERMISSION_DENIED} Permission verification failed.\\n\n {@link UNSUPPORTED} The API is not supported on the device. The device supports the corresponding SysCap,\n but does not support certain APIs in this SysCap.\\n\n {@link DEVICE_OPERATION_FAILED} The operation on the device failed.\\n\n @permission ohos.permission.VIBRATE\n\n @since 11"]
    pub fn OH_Vibrator_Cancel() -> i32;
}
