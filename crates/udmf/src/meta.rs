use ohos_udmf_sys::{OH_Utd_IsHigher, OH_Utd_IsLower};
use std::fmt;
use std::str::FromStr;

#[derive(Debug, PartialEq, Clone)]
pub enum UdmfMeta {
    Entity,
    Object,
    CompositeObject,
    Text,
    PlainText,
    Html,
    Hyperlink,
    Xml,
    SourceCode,
    Script,
    ShellScript,
    CshScript,
    PerlScript,
    PhpScript,
    PythonScript,
    RubyScript,
    TypeScript,
    JavaScript,
    CHeader,
    CSource,
    CPlusPlusHeader,
    CPlusPlusSource,
    JavaSource,
    Ebook,
    Epub,
    Azw,
    Azw3,
    Kfx,
    Mobi,
    Media,
    Image,
    Jpeg,
    Png,
    RawImage,
    Tiff,
    Bmp,
    Ico,
    PhotoshopImage,
    AiImage,
    WordDoc,
    Excel,
    Ppt,
    Pdf,
    Postscript,
    EncapsulatedPostscript,
    Video,
    Avi,
    Mpeg,
    Mpeg4,
    Video3gpp,
    Video3gpp2,
    WindowsMediaWm,
    WindowsMediaWmv,
    WindowsMediaWmp,
    Audio,
    Aac,
    Aiff,
    Alac,
    Flac,
    Mp3,
    Ogg,
    Pcm,
    WindowsMediaWma,
    WaveformAudio,
    WindowsMediaWmx,
    WindowsMediaWvx,
    WindowsMediaWax,
    GeneralFile,
    Directory,
    Folder,
    Symlink,
    Archive,
    Bz2Archive,
    DiskImage,
    TarArchive,
    ZipArchive,
    JavaArchive,
    GnuTarArchive,
    GnuZipArchive,
    GnuZipTarArchive,
    Calendar,
    Contact,
    Database,
    Message,
    Vcard,
    Navigation,
    Location,
    OpenHarmonyForm,
    OpenHarmonyAppItem,
    OpenHarmonyPixelMap,
    OpenHarmonyAtomicService,
    OpenHarmonyPackage,
    OpenHarmonyHap,
    Smil,
    Markdown,
    Fax,
    JfxFax,
    EfxFax,
    XbitmapImage,
    TgaImage,
    SgiImage,
    OpenexrImage,
    FlashpixImage,
    Realmedia,
    AuAudio,
    AifcAudio,
    Sd2Audio,
    Realaudio,
    Openxml,
    WordprocessingmlDocument,
    SpreadsheetmlSheet,
    PresentationmlPresentation,
    Opendocument,
    OpendocumentText,
    OpendocumentSpreadsheet,
    OpendocumentPresentation,
    OpendocumentGraphics,
    OpendocumentFormula,
    StuffitArchive,
    Vcs,
    Ics,
    Executable,
    PortableExecutable,
    SunJavaClass,
    Font,
    TruetypeFont,
    TruetypeCollectionFont,
    OpentypeFont,
    PostscriptFont,
    PostscriptPfbFont,
    PostscriptPfaFont,
    OpenHarmonyHdoc,
    OpenHarmonyHinote,
    OpenHarmonyStyledString,
    OpenHarmonyWant,
    GeneralFileUri,
    GeneralContentForm,
}

impl fmt::Display for UdmfMeta {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}

impl FromStr for UdmfMeta {
    type Err = ();

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "general.entity" => Ok(UdmfMeta::Entity),
            "general.object" => Ok(UdmfMeta::Object),
            "general.composite-object" => Ok(UdmfMeta::CompositeObject),
            "general.text" => Ok(UdmfMeta::Text),
            "general.plain-text" => Ok(UdmfMeta::PlainText),
            "general.html" => Ok(UdmfMeta::Html),
            "general.hyperlink" => Ok(UdmfMeta::Hyperlink),
            "general.xml" => Ok(UdmfMeta::Xml),
            "general.source-code" => Ok(UdmfMeta::SourceCode),
            "general.script" => Ok(UdmfMeta::Script),
            "general.shell-script" => Ok(UdmfMeta::ShellScript),
            "general.csh-script" => Ok(UdmfMeta::CshScript),
            "general.perl-script" => Ok(UdmfMeta::PerlScript),
            "general.php-script" => Ok(UdmfMeta::PhpScript),
            "general.python-script" => Ok(UdmfMeta::PythonScript),
            "general.ruby-script" => Ok(UdmfMeta::RubyScript),
            "general.type-script" => Ok(UdmfMeta::TypeScript),
            "general.java-script" => Ok(UdmfMeta::JavaScript),
            "general.c-header" => Ok(UdmfMeta::CHeader),
            "general.c-source" => Ok(UdmfMeta::CSource),
            "general.c-plus-plus-header" => Ok(UdmfMeta::CPlusPlusHeader),
            "general.c-plus-plus-source" => Ok(UdmfMeta::CPlusPlusSource),
            "general.java-source" => Ok(UdmfMeta::JavaSource),
            "general.ebook" => Ok(UdmfMeta::Ebook),
            "general.epub" => Ok(UdmfMeta::Epub),
            "com.amazon.azw" => Ok(UdmfMeta::Azw),
            "com.amazon.azw3" => Ok(UdmfMeta::Azw3),
            "com.amazon.kfx" => Ok(UdmfMeta::Kfx),
            "com.amazon.mobi" => Ok(UdmfMeta::Mobi),
            "general.media" => Ok(UdmfMeta::Media),
            "general.image" => Ok(UdmfMeta::Image),
            "general.jpeg" => Ok(UdmfMeta::Jpeg),
            "general.png" => Ok(UdmfMeta::Png),
            "general.raw-image" => Ok(UdmfMeta::RawImage),
            "general.tiff" => Ok(UdmfMeta::Tiff),
            "com.microsoft.bmp" => Ok(UdmfMeta::Bmp),
            "com.microsoft.ico" => Ok(UdmfMeta::Ico),
            "com.adobe.photoshop-image" => Ok(UdmfMeta::PhotoshopImage),
            "com.adobe.illustrator.ai-image" => Ok(UdmfMeta::AiImage),
            "com.microsoft.word.doc" => Ok(UdmfMeta::WordDoc),
            "com.microsoft.excel.xls" => Ok(UdmfMeta::Excel),
            "com.microsoft.powerpoint.ppt" => Ok(UdmfMeta::Ppt),
            "com.adobe.pdf" => Ok(UdmfMeta::Pdf),
            "com.adobe.postscript" => Ok(UdmfMeta::Postscript),
            "com.adobe.encapsulated-postscript" => Ok(UdmfMeta::EncapsulatedPostscript),
            "general.video" => Ok(UdmfMeta::Video),
            "general.avi" => Ok(UdmfMeta::Avi),
            "general.mpeg" => Ok(UdmfMeta::Mpeg),
            "general.mpeg-4" => Ok(UdmfMeta::Mpeg4),
            "general.3gpp" => Ok(UdmfMeta::Video3gpp),
            "general.3gpp2" => Ok(UdmfMeta::Video3gpp2),
            "com.microsoft.windows-media-wm" => Ok(UdmfMeta::WindowsMediaWm),
            "com.microsoft.windows-media-wmv" => Ok(UdmfMeta::WindowsMediaWmv),
            "com.microsoft.windows-media-wmp" => Ok(UdmfMeta::WindowsMediaWmp),
            "general.audio" => Ok(UdmfMeta::Audio),
            "general.aac" => Ok(UdmfMeta::Aac),
            "general.aiff" => Ok(UdmfMeta::Aiff),
            "general.alac" => Ok(UdmfMeta::Alac),
            "general.flac" => Ok(UdmfMeta::Flac),
            "general.mp3" => Ok(UdmfMeta::Mp3),
            "general.ogg" => Ok(UdmfMeta::Ogg),
            "general.pcm" => Ok(UdmfMeta::Pcm),
            "com.microsoft.windows-media-wma" => Ok(UdmfMeta::WindowsMediaWma),
            "com.microsoft.waveform-audio" => Ok(UdmfMeta::WaveformAudio),
            "com.microsoft.windows-media-wmx" => Ok(UdmfMeta::WindowsMediaWmx),
            "com.microsoft.windows-media-wvx" => Ok(UdmfMeta::WindowsMediaWvx),
            "com.microsoft.windows-media-wax" => Ok(UdmfMeta::WindowsMediaWax),
            "general.file" => Ok(UdmfMeta::GeneralFile),
            "general.directory" => Ok(UdmfMeta::Directory),
            "general.folder" => Ok(UdmfMeta::Folder),
            "general.symlink" => Ok(UdmfMeta::Symlink),
            "general.archive" => Ok(UdmfMeta::Archive),
            "general.bz2-archive" => Ok(UdmfMeta::Bz2Archive),
            "general.disk-image" => Ok(UdmfMeta::DiskImage),
            "general.tar-archive" => Ok(UdmfMeta::TarArchive),
            "general.zip-archive" => Ok(UdmfMeta::ZipArchive),
            "com.sun.java-archive" => Ok(UdmfMeta::JavaArchive),
            "org.gnu.gnu-tar-archive" => Ok(UdmfMeta::GnuTarArchive),
            "org.gnu.gnu-zip-archive" => Ok(UdmfMeta::GnuZipArchive),
            "org.gnu.gnu-zip-tar-archive" => Ok(UdmfMeta::GnuZipTarArchive),
            "general.calendar" => Ok(UdmfMeta::Calendar),
            "general.contact" => Ok(UdmfMeta::Contact),
            "general.database" => Ok(UdmfMeta::Database),
            "general.message" => Ok(UdmfMeta::Message),
            "general.vcard" => Ok(UdmfMeta::Vcard),
            "general.navigation" => Ok(UdmfMeta::Navigation),
            "general.location" => Ok(UdmfMeta::Location),
            "openharmony.form" => Ok(UdmfMeta::OpenHarmonyForm),
            "openharmony.app-item" => Ok(UdmfMeta::OpenHarmonyAppItem),
            "openharmony.pixel-map" => Ok(UdmfMeta::OpenHarmonyPixelMap),
            "openharmony.atomic-service" => Ok(UdmfMeta::OpenHarmonyAtomicService),
            "openharmony.package" => Ok(UdmfMeta::OpenHarmonyPackage),
            "openharmony.hap" => Ok(UdmfMeta::OpenHarmonyHap),
            "com.real.smil" => Ok(UdmfMeta::Smil),
            "general.markdown" => Ok(UdmfMeta::Markdown),
            "general.fax" => Ok(UdmfMeta::Fax),
            "com.j2.jfx-fax" => Ok(UdmfMeta::JfxFax),
            "com.js.efx-fax" => Ok(UdmfMeta::EfxFax),
            "general.xbitmap-image" => Ok(UdmfMeta::XbitmapImage),
            "com.truevision.tga-image" => Ok(UdmfMeta::TgaImage),
            "com.sgi.sgi-image" => Ok(UdmfMeta::SgiImage),
            "com.ilm.openexr-image" => Ok(UdmfMeta::OpenexrImage),
            "com.kodak.flashpix.image" => Ok(UdmfMeta::FlashpixImage),
            "com.real.realmedia" => Ok(UdmfMeta::Realmedia),
            "general.au-audio" => Ok(UdmfMeta::AuAudio),
            "general.aifc-audio" => Ok(UdmfMeta::AifcAudio),
            "com.digidesign.sd2-audio" => Ok(UdmfMeta::Sd2Audio),
            "com.real.realaudio" => Ok(UdmfMeta::Realaudio),
            "org.openxmlformats.openxml" => Ok(UdmfMeta::Openxml),
            "org.openxmlformats.wordprocessingml.document" => {
                Ok(UdmfMeta::WordprocessingmlDocument)
            }
            "org.openxmlformats.spreadsheetml.sheet" => Ok(UdmfMeta::SpreadsheetmlSheet),
            "org.openxmlformats.presentationml.presentation" => {
                Ok(UdmfMeta::PresentationmlPresentation)
            }
            "org.oasis.opendocument" => Ok(UdmfMeta::Opendocument),
            "org.oasis.opendocument.text" => Ok(UdmfMeta::OpendocumentText),
            "org.oasis.opendocument.spreadsheet" => Ok(UdmfMeta::OpendocumentSpreadsheet),
            "org.oasis.opendocument.presentation" => Ok(UdmfMeta::OpendocumentPresentation),
            "org.oasis.opendocument.graphics" => Ok(UdmfMeta::OpendocumentGraphics),
            "org.oasis.opendocument.formula" => Ok(UdmfMeta::OpendocumentFormula),
            "com.allume.stuffit-archive" => Ok(UdmfMeta::StuffitArchive),
            "general.vcs" => Ok(UdmfMeta::Vcs),
            "general.ics" => Ok(UdmfMeta::Ics),
            "general.executable" => Ok(UdmfMeta::Executable),
            "com.microsoft.portable-executable" => Ok(UdmfMeta::PortableExecutable),
            "com.sun.java-class" => Ok(UdmfMeta::SunJavaClass),
            "general.font" => Ok(UdmfMeta::Font),
            "general.truetype-font" => Ok(UdmfMeta::TruetypeFont),
            "general.truetype-collection-font" => Ok(UdmfMeta::TruetypeCollectionFont),
            "general.opentype-font" => Ok(UdmfMeta::OpentypeFont),
            "com.adobe.postscript-font" => Ok(UdmfMeta::PostscriptFont),
            "com.adobe.postscript-pfb-font" => Ok(UdmfMeta::PostscriptPfbFont),
            "com.adobe.postscript-pfa-font" => Ok(UdmfMeta::PostscriptPfaFont),
            "openharmony.hdoc" => Ok(UdmfMeta::OpenHarmonyHdoc),
            "openharmony.hinote" => Ok(UdmfMeta::OpenHarmonyHinote),
            "openharmony.styled-string" => Ok(UdmfMeta::OpenHarmonyStyledString),
            "openharmony.want" => Ok(UdmfMeta::OpenHarmonyWant),
            "general.file-uri" => Ok(UdmfMeta::GeneralFileUri),
            "general.content-form" => Ok(UdmfMeta::GeneralContentForm),
            _ => Err(()),
        }
    }
}

impl UdmfMeta {
    pub fn is_higher(&self, dest: &UdmfMeta) -> bool {
        let ret = unsafe {
            OH_Utd_IsHigher(
                self.to_string().as_ptr().cast(),
                dest.to_string().as_ptr().cast(),
            )
        };
        ret
    }

    pub fn is_lower(&self, dest: &UdmfMeta) -> bool {
        let ret = unsafe {
            OH_Utd_IsLower(
                self.to_string().as_ptr().cast(),
                dest.to_string().as_ptr().cast(),
            )
        };
        ret
    }

    pub fn to_string(&self) -> String {
        match self {
            UdmfMeta::Entity => "general.entity".to_string(),
            UdmfMeta::Object => "general.object".to_string(),
            UdmfMeta::CompositeObject => "general.composite-object".to_string(),
            UdmfMeta::Text => "general.text".to_string(),
            UdmfMeta::PlainText => "general.plain-text".to_string(),
            UdmfMeta::Html => "general.html".to_string(),
            UdmfMeta::Hyperlink => "general.hyperlink".to_string(),
            UdmfMeta::Xml => "general.xml".to_string(),
            UdmfMeta::SourceCode => "general.source-code".to_string(),
            UdmfMeta::Script => "general.script".to_string(),
            UdmfMeta::ShellScript => "general.shell-script".to_string(),
            UdmfMeta::CshScript => "general.csh-script".to_string(),
            UdmfMeta::PerlScript => "general.perl-script".to_string(),
            UdmfMeta::PhpScript => "general.php-script".to_string(),
            UdmfMeta::PythonScript => "general.python-script".to_string(),
            UdmfMeta::RubyScript => "general.ruby-script".to_string(),
            UdmfMeta::TypeScript => "general.type-script".to_string(),
            UdmfMeta::JavaScript => "general.java-script".to_string(),
            UdmfMeta::CHeader => "general.c-header".to_string(),
            UdmfMeta::CSource => "general.c-source".to_string(),
            UdmfMeta::CPlusPlusHeader => "general.c-plus-plus-header".to_string(),
            UdmfMeta::CPlusPlusSource => "general.c-plus-plus-source".to_string(),
            UdmfMeta::JavaSource => "general.java-source".to_string(),
            UdmfMeta::Ebook => "general.ebook".to_string(),
            UdmfMeta::Epub => "general.epub".to_string(),
            UdmfMeta::Azw => "com.amazon.azw".to_string(),
            UdmfMeta::Azw3 => "com.amazon.azw3".to_string(),
            UdmfMeta::Kfx => "com.amazon.kfx".to_string(),
            UdmfMeta::Mobi => "com.amazon.mobi".to_string(),
            UdmfMeta::Media => "general.media".to_string(),
            UdmfMeta::Image => "general.image".to_string(),
            UdmfMeta::Jpeg => "general.jpeg".to_string(),
            UdmfMeta::Png => "general.png".to_string(),
            UdmfMeta::RawImage => "general.raw-image".to_string(),
            UdmfMeta::Tiff => "general.tiff".to_string(),
            UdmfMeta::Bmp => "com.microsoft.bmp".to_string(),
            UdmfMeta::Ico => "com.microsoft.ico".to_string(),
            UdmfMeta::PhotoshopImage => "com.adobe.photoshop-image".to_string(),
            UdmfMeta::AiImage => "com.adobe.illustrator.ai-image".to_string(),
            UdmfMeta::WordDoc => "com.microsoft.word.doc".to_string(),
            UdmfMeta::Excel => "com.microsoft.excel.xls".to_string(),
            UdmfMeta::Ppt => "com.microsoft.powerpoint.ppt".to_string(),
            UdmfMeta::Pdf => "com.adobe.pdf".to_string(),
            UdmfMeta::Postscript => "com.adobe.postscript".to_string(),
            UdmfMeta::EncapsulatedPostscript => "com.adobe.encapsulated-postscript".to_string(),
            UdmfMeta::Video => "general.video".to_string(),
            UdmfMeta::Avi => "general.avi".to_string(),
            UdmfMeta::Mpeg => "general.mpeg".to_string(),
            UdmfMeta::Mpeg4 => "general.mpeg-4".to_string(),
            UdmfMeta::Video3gpp => "general.3gpp".to_string(),
            UdmfMeta::Video3gpp2 => "general.3gpp2".to_string(),
            UdmfMeta::WindowsMediaWm => "com.microsoft.windows-media-wm".to_string(),
            UdmfMeta::WindowsMediaWmv => "com.microsoft.windows-media-wmv".to_string(),
            UdmfMeta::WindowsMediaWmp => "com.microsoft.windows-media-wmp".to_string(),
            UdmfMeta::Audio => "general.audio".to_string(),
            UdmfMeta::Aac => "general.aac".to_string(),
            UdmfMeta::Aiff => "general.aiff".to_string(),
            UdmfMeta::Alac => "general.alac".to_string(),
            UdmfMeta::Flac => "general.flac".to_string(),
            UdmfMeta::Mp3 => "general.mp3".to_string(),
            UdmfMeta::Ogg => "general.ogg".to_string(),
            UdmfMeta::Pcm => "general.pcm".to_string(),
            UdmfMeta::WindowsMediaWma => "com.microsoft.windows-media-wma".to_string(),
            UdmfMeta::WaveformAudio => "com.microsoft.waveform-audio".to_string(),
            UdmfMeta::WindowsMediaWmx => "com.microsoft.windows-media-wmx".to_string(),
            UdmfMeta::WindowsMediaWvx => "com.microsoft.windows-media-wvx".to_string(),
            UdmfMeta::WindowsMediaWax => "com.microsoft.windows-media-wax".to_string(),
            UdmfMeta::GeneralFile => "general.file".to_string(),
            UdmfMeta::Directory => "general.directory".to_string(),
            UdmfMeta::Folder => "general.folder".to_string(),
            UdmfMeta::Symlink => "general.symlink".to_string(),
            UdmfMeta::Archive => "general.archive".to_string(),
            UdmfMeta::Bz2Archive => "general.bz2-archive".to_string(),
            UdmfMeta::DiskImage => "general.disk-image".to_string(),
            UdmfMeta::TarArchive => "general.tar-archive".to_string(),
            UdmfMeta::ZipArchive => "general.zip-archive".to_string(),
            UdmfMeta::JavaArchive => "com.sun.java-archive".to_string(),
            UdmfMeta::GnuTarArchive => "org.gnu.gnu-tar-archive".to_string(),
            UdmfMeta::GnuZipArchive => "org.gnu.gnu-zip-archive".to_string(),
            UdmfMeta::GnuZipTarArchive => "org.gnu.gnu-zip-tar-archive".to_string(),
            UdmfMeta::Calendar => "general.calendar".to_string(),
            UdmfMeta::Contact => "general.contact".to_string(),
            UdmfMeta::Database => "general.database".to_string(),
            UdmfMeta::Message => "general.message".to_string(),
            UdmfMeta::Vcard => "general.vcard".to_string(),
            UdmfMeta::Navigation => "general.navigation".to_string(),
            UdmfMeta::Location => "general.location".to_string(),
            UdmfMeta::OpenHarmonyForm => "openharmony.form".to_string(),
            UdmfMeta::OpenHarmonyAppItem => "openharmony.app-item".to_string(),
            UdmfMeta::OpenHarmonyPixelMap => "openharmony.pixel-map".to_string(),
            UdmfMeta::OpenHarmonyAtomicService => "openharmony.atomic-service".to_string(),
            UdmfMeta::OpenHarmonyPackage => "openharmony.package".to_string(),
            UdmfMeta::OpenHarmonyHap => "openharmony.hap".to_string(),
            UdmfMeta::Smil => "com.real.smil".to_string(),
            UdmfMeta::Markdown => "general.markdown".to_string(),
            UdmfMeta::Fax => "general.fax".to_string(),
            UdmfMeta::JfxFax => "com.j2.jfx-fax".to_string(),
            UdmfMeta::EfxFax => "com.js.efx-fax".to_string(),
            UdmfMeta::XbitmapImage => "general.xbitmap-image".to_string(),
            UdmfMeta::TgaImage => "com.truevision.tga-image".to_string(),
            UdmfMeta::SgiImage => "com.sgi.sgi-image".to_string(),
            UdmfMeta::OpenexrImage => "com.ilm.openexr-image".to_string(),
            UdmfMeta::FlashpixImage => "com.kodak.flashpix.image".to_string(),
            UdmfMeta::Realmedia => "com.real.realmedia".to_string(),
            UdmfMeta::AuAudio => "general.au-audio".to_string(),
            UdmfMeta::AifcAudio => "general.aifc-audio".to_string(),
            UdmfMeta::Sd2Audio => "com.digidesign.sd2-audio".to_string(),
            UdmfMeta::Realaudio => "com.real.realaudio".to_string(),
            UdmfMeta::Openxml => "org.openxmlformats.openxml".to_string(),
            UdmfMeta::WordprocessingmlDocument => {
                "org.openxmlformats.wordprocessingml.document".to_string()
            }
            UdmfMeta::SpreadsheetmlSheet => "org.openxmlformats.spreadsheetml.sheet".to_string(),
            UdmfMeta::PresentationmlPresentation => {
                "org.openxmlformats.presentationml.presentation".to_string()
            }
            UdmfMeta::Opendocument => "org.oasis.opendocument".to_string(),
            UdmfMeta::OpendocumentText => "org.oasis.opendocument.text".to_string(),
            UdmfMeta::OpendocumentSpreadsheet => "org.oasis.opendocument.spreadsheet".to_string(),
            UdmfMeta::OpendocumentPresentation => "org.oasis.opendocument.presentation".to_string(),
            UdmfMeta::OpendocumentGraphics => "org.oasis.opendocument.graphics".to_string(),
            UdmfMeta::OpendocumentFormula => "org.oasis.opendocument.formula".to_string(),
            UdmfMeta::StuffitArchive => "com.allume.stuffit-archive".to_string(),
            UdmfMeta::Vcs => "general.vcs".to_string(),
            UdmfMeta::Ics => "general.ics".to_string(),
            UdmfMeta::Executable => "general.executable".to_string(),
            UdmfMeta::PortableExecutable => "com.microsoft.portable-executable".to_string(),
            UdmfMeta::SunJavaClass => "com.sun.java-class".to_string(),
            UdmfMeta::Font => "general.font".to_string(),
            UdmfMeta::TruetypeFont => "general.truetype-font".to_string(),
            UdmfMeta::TruetypeCollectionFont => "general.truetype-collection-font".to_string(),
            UdmfMeta::OpentypeFont => "general.opentype-font".to_string(),
            UdmfMeta::PostscriptFont => "com.adobe.postscript-font".to_string(),
            UdmfMeta::PostscriptPfbFont => "com.adobe.postscript-pfb-font".to_string(),
            UdmfMeta::PostscriptPfaFont => "com.adobe.postscript-pfa-font".to_string(),
            UdmfMeta::OpenHarmonyHdoc => "openharmony.hdoc".to_string(),
            UdmfMeta::OpenHarmonyHinote => "openharmony.hinote".to_string(),
            UdmfMeta::OpenHarmonyStyledString => "openharmony.styled-string".to_string(),
            UdmfMeta::OpenHarmonyWant => "openharmony.want".to_string(),
            UdmfMeta::GeneralFileUri => "general.file-uri".to_string(),
            UdmfMeta::GeneralContentForm => "general.content-form".to_string(),
        }
    }
}
